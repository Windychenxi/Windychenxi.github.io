<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ELK 专题七 （ElasticSearch 优化）</title>
      <link href="/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/"/>
      <url>/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对 ElasticSearch 进行合理的优化，提高 ElasticSearch 集群的性能。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h1 id="分片策略"><a href="#分片策略" class="headerlink" title="分片策略"></a>分片策略</h1><h2 id="合理设置分片数"><a href="#合理设置分片数" class="headerlink" title="合理设置分片数"></a>合理设置分片数</h2><p>ElasticSearch 在 7.0 之前，ElasticSearch 默认 5 个主分片、1 个备份分片；在7.0 之后，默认一个主分片、1 个备份分片。</p><p>分片和副本的设计为 ES 提供了支持分布式和故障转移的特性，但并不意味着分片和副本是可以无限分配的。而且索引的分片完成分配后，由于索引的路由机制，我们是不能重新修改分片数的。</p><p>可能有人会说，我不知道这个索引将来会变得很大，并且过后我也不能更改索引的大小，所以为了保险起见，还是给它设置 1000 个分片吧。但是需要知道的是，一个分片并不是没有代价的。</p><p>需要了解如下几个问题：</p><ol><li>每个搜索请求都需要命中索引中的每一个分片，如果每一个分片都处于不同的节点还好，但是如果多个分片都需要在同一个节点上竞争使用相同的资源就有些糟糕了。</li><li>用于计算相关度的词项统计信息是基于分片的。如果有许多分片，每一个都只有很少的数据，会导致很低的相关度。</li></ol><h2 id="推迟分片分配"><a href="#推迟分片分配" class="headerlink" title="推迟分片分配"></a>推迟分片分配</h2><p>对于节点瞬时中断的问题，默认情况，集群会等一分钟来查看节点是否会重新加入。如果这个节点在此期间重新加入，重新加入的节点会保持现有的分片数据，不会出发新的分片分配。这样就可以减少 ES 在自动再平衡可用分片时所带来的极大开销。</p><p>通过修改参数 <code>delayed_timeout</code>，可以延长再均衡的时间。可以全局设置，也可以在索引级别进行修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">PUT</span> <span class="string">/_all/_settings</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;settings&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;index.unassigned.node_left.delayed_timeout&quot;:</span> <span class="string">&quot;5m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量提交数据"><a href="#批量提交数据" class="headerlink" title="批量提交数据"></a>批量提交数据</h2><p>ES 提供 Bulk API 支持批量操作，当我们有大量的写任务时，可以使用 Bulk 来进行批量写入。</p><p>通用的策略如下：</p><p>Bulk 默认设置批量提交的数据量不能超过 100M，数据条数一般是根据文档的大小和服务器性能而定的。但是单次批处理的数据大小应从 5MB~15MB 逐渐增加。当性能没有提升时，把这个数据量作为最大值。</p><h2 id="优化存储设备"><a href="#优化存储设备" class="headerlink" title="优化存储设备"></a>优化存储设备</h2><p>ES 是一种密度使用磁盘的应用，在段合并时会频繁操作磁盘，所以对磁盘要求较高，可以使用 SSD。当磁盘速度提升之后，集群的整体性能会大幅提高。</p><h2 id="减少-Refresh-次数"><a href="#减少-Refresh-次数" class="headerlink" title="减少 Refresh 次数"></a>减少 Refresh 次数</h2><p>Lucene 在新增数据时，采用了延迟写入的策略。默认情况下索引的 refresh_interval 为 1秒。</p><p>Lucene 将待写入的数据先写到内存中，超过 1 秒（默认）时，就会触发一次 Refresh。然后 Refresh 会把内存中的数据刷新到操作系统的文件缓存系统中。</p><p>如果我们对搜索的时效性要求不高，可以将 Refresh 周期延长。例如 30 秒，这样还可以有效地减少段刷新次数。但这同时也意味着需要消耗更多的 Heap 内存。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212224007228.png" alt="image-20230212224007228"></p><blockquote><p><strong>注意</strong></p><ol><li><p><code>Memory</code> 阶段，不能被 ElasticSearch 检索</p></li><li><p><code>OS Cache</code> 阶段，可以被 ElasticSearch 检索</p></li><li><p><strong>内存数据会不会丢失？</strong></p><p>不会。</p><p>（1） 在<code>Memory</code>阶段，存在一主一备。</p><p>（2） 同时在数据写入 <code>Memory</code>时，还会写入 <code>Translog</code>中，如果存在数据丢失，可以从 <code>Translog</code>进行恢复。</p></li></ol></blockquote><h2 id="加大-Flush-设置"><a href="#加大-Flush-设置" class="headerlink" title="加大 Flush 设置"></a>加大 Flush 设置</h2><p>Flush 的主要目的是把文件缓存系统中的段持久化到硬盘。当 Translog 的数据量达到 512MB 或者 30 分钟时，会触发一次 Flush。</p><p><code>index.translog.flush_threshold_size</code> 参数的默认值是 512MB， 我们可以进行修改。增加参数值意味着文件缓存系统中可能需要存储更多的数据。所以我们需要为操作系统的文件缓存系统留下足够的空间。</p><h2 id="减少副本的数量"><a href="#减少副本的数量" class="headerlink" title="减少副本的数量"></a>减少副本的数量</h2><p>ES 为了保证集群的可用性，提供了 Replicas（副本）支持。然而每个副本也会执行分析、索引及可能得合并过程。所以 Replicas 的数量会严重影响写索引的效率。</p><p>当写索引时，需要把写入的数据都同步到副本节点，副本节点越多，写索引的效率就越慢。</p><p>如果我们需要大批量进行写入操作，可以先禁止 Replica 的复制。设置 <code>index.number_of_replicas: 0</code>关闭副本。在写入完成后，Replica 修改回正常的状态。</p><h2 id="路由选择"><a href="#路由选择" class="headerlink" title="路由选择"></a>路由选择</h2><p>当我们查询文档的时候，Elasticsearch 如何知道一个文档应该存放到哪个分片中呢？它其实是</p><p>通过下面这个公式来计算出来：</p><p><code>shard = hash(routing) % number_of_primary_shardsrouting</code> 默认值是文档的 id，也可以采用自定义值，比如用户 id。</p><ul><li><strong>不带 routing 查询</strong></li></ul><p>在查询的时候因为不知道要查询的数据具体在哪个分片上，所以整个过程分为 2 个步骤：</p><p>1、分发：请求到达协调节点后，协调节点将查询请求分发到每个分片上。</p><p>2、聚合: 协调节点搜集到每个分片上查询结果，在将查询的结果进行排序，之后给用户返回结果。</p><ul><li><strong>带 routing 查询</strong></li></ul><p>查询的时候，可以直接根据 routing 信息定位到某个分配查询，不需要查询所有的分配，经过协调节点排序。向上面自定义的用户查询，如果 routing 设置为 userid 的话，就可以直接查询出数据来，效率提升很多。</p><h1 id="ES核心配置参数"><a href="#ES核心配置参数" class="headerlink" title="ES核心配置参数"></a>ES核心配置参数</h1><p>ES 核心配置文件<code>elasticsearch.yml</code>重要参数</p><table><thead><tr><th>参数名</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>cluster.name</td><td>elasticsearch</td><td>配置 ES 的集群名称，默认值是 ES，建议改成与所存数据相关的名称，ES 会自动发现在同一网段下的集群名称相同的节点</td></tr><tr><td>node.name</td><td>node-1</td><td>集群中的节点名，在同一个集群中不能重复。节点的名称一旦设置，就不能再改变了。当然，也可以设 置 成 服 务 器 的 主 机 名 称 ， 例 如 node.name:${HOSTNAME}。</td></tr><tr><td>node.master</td><td>true</td><td>指定该节点是否有资格被选举成为 Master 节点，默认是 True，如果被设置为 True，则只是有资格成为Master 节点，具体能否成为 Master 节点，需要通过选举产生。</td></tr><tr><td>node.data</td><td>true</td><td>指定该节点是否存储索引数据，默认为 True。数据的增、删、改、查都是在 Data 节点完成的。</td></tr><tr><td>index.number_of_shards</td><td>1</td><td>设置都索引分片个数，默认是 1 片。也可以在创建索引时设置该值，具体设置为多大都值要根据数据量的大小来定。如果数据量不大，则设置成 1 时效率最高</td></tr><tr><td>index.number_of_replicas</td><td>1</td><td>设置默认的索引副本个数，默认为 1 个。副本数越多，集群的可用性越好，但是写索引时需要同步的数据越多。</td></tr><tr><td>transport.tcp.compress</td><td>true</td><td>设置在节点间传输数据时是否压缩，默认为 False，不压缩</td></tr><tr><td>discovery.zen.minimum_master_nodes</td><td>1</td><td>设置在选举 Master 节点时需要参与的最少的候选主节点数，默认为 1。如果使用默认值，则当网络不稳定时有可能会出现脑裂。合理的数值为 (master_eligible_nodes/2)+1 ，其中master_eligible_nodes 表示集群中的候选主节点数</td></tr><tr><td>discovery.zen.ping.timeout</td><td>3s</td><td>设置在集群中自动发现其他节点时 Ping 连接的超时时间，默认为 3 秒。在较差的网络环境下需要设置得大一点，防止因误判该节点的存活状态而导致分片的转移</td></tr></tbody></table><h1 id="问题及解决方案"><a href="#问题及解决方案" class="headerlink" title="问题及解决方案"></a>问题及解决方案</h1><h2 id="为什么要使用-ES"><a href="#为什么要使用-ES" class="headerlink" title="为什么要使用 ES?"></a>为什么要使用 ES?</h2><p>系统中的数据，随着业务的发展，时间的推移，将会非常多，而业务中往往采用模糊查询进行数据的搜索，而模糊查询会导致查询引擎放弃索引，导致系统查询数据时都是全表扫描，在百万级别的数据库中，</p><p>查询效率是非常低下的，而我们使用 ES 做一个全文索引，将经常查询的系统功能的某些字段，比如说电商系统的商品表中商品名，描述、价格还有 id 这些字段我们放入 ES 索引库里，可以提高查询速度。</p><h2 id="master-选举流程"><a href="#master-选举流程" class="headerlink" title="master 选举流程"></a>master 选举流程</h2><ol><li><p>Elasticsearch 的选主是 ZenDiscovery 模块负责的，主要包含 Ping（节点之间通过这个 RPC 来发现彼此）和 Unicast（单播模块包含一个主机列表以控制哪些节点需要 ping 通）这两部分</p></li><li><p>对所有可以成为 master 的节点（node.master: true）根据 nodeId 字典排序，每次选举每个节点都把自己所知道节点排一次序，然后选出第一个（第 0 位）节点，暂且认为它是 master 节点。</p></li><li><p>如果对某个节点的投票数达到一定的值（可以成为 master 节点数 n/2+1）并且该节点自己也选举自己，那这个节点就是 master。否则重新选举一直到满足上述条件。</p></li><li><p>master 节点的职责主要包括集群、节点和索引的管理，不负责文档级别的管理；</p></li></ol><h2 id="集群脑裂问题"><a href="#集群脑裂问题" class="headerlink" title="集群脑裂问题"></a>集群脑裂问题</h2><h3 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h3><ol><li><p><strong>网络问题</strong>：集群间的网络延迟导致一些节点访问不到 master，认为 master 挂掉了从而选举出新的master，并对 master 上的分片和副本标红，分配新的主分片</p></li><li><p><strong>节点负载</strong>：主节点的角色既为 master 又为 data，访问量较大时可能会导致 ES 停止响应造成大面积延迟，此时其他节点得不到主节点的响应认为主节点挂掉了，会重新选取主节点。</p></li><li><p><strong>内存回收</strong>：data 节点上的 ES 进程占用的内存较大，引发 JVM 的大规模内存回收，造成 ES 进程失去响应。</p></li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><strong>减少误判：</strong>discovery.zen.ping_timeout 节点状态的响应时间，默认为 3s，可以适当调大，如果 master在该响应时间的范围内没有做出响应应答，判断该节点已经挂掉了。</li></ol><p>调大参数（如 6s，discovery.zen.ping_timeout:6），可适当减少误判。</p><ol start="2"><li><p><strong>选举触发</strong>: <code>discovery.zen.minimum_master_nodes:1</code> </p><p>该参数是用于控制选举行为发生的最小集群主节点数量。当备选主节点的个数大于等于该参数的值，且备选主节点中有该参数个节点认为主节点挂了，进行选举。官方建议为（n/2）+1，n 为主节点个数(即有资格成为主节点的节点个数）</p></li><li><p><strong>角色分离</strong>：即 master 节点与 data 节点分离，限制角色</p></li></ol><p>（1） 主节点配置为：node.master: true node.data: false</p><p>（2） 从节点配置为：node.master: false node.data: true</p><h2 id="更新删除文档"><a href="#更新删除文档" class="headerlink" title="更新删除文档"></a>更新删除文档</h2><ol><li><p>删除和更新也都是写操作，但是 Elasticsearch 中的文档是不可变的，因此不能被删除或者改动以展示其变更；</p></li><li><p>磁盘上的每个段都有一个相应的.del 文件。当删除请求发送后，文档并没有真的被删除，而是在.del文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del 文件中被标记为删除的文档将不会被写入新段。</p></li><li><p>在新的文档被创建时，Elasticsearch 会为该文档指定一个版本号，当执行更新时，旧版本的文档在.del文件中被标记为删除，新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询，但是会在结果中被过滤掉.</p></li></ol><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>​    倒排索引是搜索引擎的核心。搜索引擎的主要目标是在查找发生搜索条件的文档时提供快速搜索。ES中的倒排索引其实就是 lucene 的倒排索引，区别于传统的正向索引，倒排索引会在存储数据时将关键词和 数据进行关联，保存到倒排表中，然后查询时，将查询内容进行分词后在倒排表中进行查询，最后匹配数据即可。</p><h2 id="文档写入原理"><a href="#文档写入原理" class="headerlink" title="文档写入原理"></a>文档写入原理</h2><p>​    <img src="https://note.youdao.com/yws/public/resource/06b6f48ef4e56cb429410a1f35176f14/xmlnote/WEBRESOURCE842c63d365ea11f99fec0334262f1bce/4891" alt="0"></p><ol><li><p>选择任意一个DataNode发送请求，例如：node2。此时，node2就成为一个coordinating node（协调节点）</p></li><li><p>计算得到文档要写入的分片</p><p><code>shard = hash(routing) % number_of_primary_shards</code></p><p>routing 是一个可变值，默认是文档的 _id</p></li><li><p>coordinating node会进行路由，将请求转发给对应的primary shard所在的DataNode（假设primary shard在node1、replica shard在node2）</p></li><li><p>node1节点上的Primary Shard处理请求，写入数据到索引库中，并将数据同步到Replica shard</p></li><li><p>Primary Shard和Replica Shard都保存好了文档，返回client</p></li></ol><h2 id="检索原理"><a href="#检索原理" class="headerlink" title="检索原理"></a>检索原理</h2><p>​    <img src="https://note.youdao.com/yws/public/resource/06b6f48ef4e56cb429410a1f35176f14/xmlnote/WEBRESOURCEd9d8a50b3e09e33d5f4367f98211d401/4890" alt="0"></p><ol><li><p> client发起查询请求，某个DataNode接收到请求，该DataNode就会成为协调节点（Coordinating Node）。</p></li><li><p> 协调节点（Coordinating Node）将查询请求广播到每一个数据节点，这些数据节点的分片会处理该查询请求。</p></li><li><p>每个分片进行数据查询，将符合条件的数据放在一个优先队列中，并将这些数据的文档ID、节点信息、分片信息返回给协调节点。</p></li><li><p>协调节点将所有的结果进行汇总，并进行全局排序。</p></li><li><p>协调节点向包含这些文档ID的分片发送get请求，对应的分片将文档数据返回给协调节点，最后协调节点将数据返回给客户端。</p></li></ol><h2 id="准实时索引实现"><a href="#准实时索引实现" class="headerlink" title="准实时索引实现"></a>准实时索引实现</h2><ol><li><p>溢写到文件系统缓存</p><p>当数据写入到ES分片时，会首先写入到内存中，然后通过内存的buffer生成一个segment，并刷到<strong>文件系统缓存</strong>中，数据可以被检索（注意不是直接刷到磁盘）。ES中默认1秒，refresh一次。</p></li><li><p>写translog保障容错</p><p>在写入到内存中的同时，也会记录translog日志，在refresh期间出现异常，会根据translog来进行数据恢复，等到文件系统缓存中的segment数据都刷到磁盘中，清空translog文件</p></li><li><p>flush到磁盘</p><p>ES默认每隔30分钟会将文件系统缓存的数据刷入到磁盘</p></li><li><p>segment合并</p><p>Segment太多时，ES定期会将多个segment合并成为大的segment，减少索引查询时IO开销，此阶段ES会真正的物理删除（之前执行过的delete的数据）</p></li></ol><p>​    <img src="https://note.youdao.com/yws/public/resource/06b6f48ef4e56cb429410a1f35176f14/xmlnote/WEBRESOURCE43a725c2701afe9abf580718839878c1/4892" alt="0"></p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 专题五 （Google浏览器插件ElasticSeach-head安装）</title>
      <link href="/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/"/>
      <url>/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>推荐使用 Google 浏览器插件 ElasticSearch Head，方便快捷。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h1 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h1><p>链接：<a href="https://pan.baidu.com/s/1ZLQn7E-AW6XE8tp_HH1xfg">https://pan.baidu.com/s/1ZLQn7E-AW6XE8tp_HH1xfg</a><br>提取码：frlq<br>–来自百度网盘超级会员V3的分享</p><h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1><p>打开Google浏览器，找到&lt;扩展程序&gt;</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212182023958.png" alt="image-20230212182023958"></p><p>点击加载已解压的扩展程序</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212182247565.png" alt="image-20230212182247565"></p><p>插件已加载完毕，点击扩展程序图标，选择加载的扩展程序</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212182502618.png" alt="image-20230212182502618"></p><h1 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h1><p>ElasticSearch Head 的界面如下，输入ElasticSearch服务地址，即可查看ElasticSearch集群信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212182553913.png" alt="image-20230212182553913"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> ELK </tag>
            
            <tag> ElasticSearch-head </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 专题六 （ELK + FileBeat 整合）</title>
      <link href="/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/"/>
      <url>/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ELK + FileBeat 整合，实现由 FileBeat 监控日志变化，并发送给 LogStash。由 LogStash 按照指定的规则进行数据清洗，在发送至 ElasticSearch 存储。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h1 id="LogStash输出到ES"><a href="#LogStash输出到ES" class="headerlink" title="LogStash输出到ES"></a>LogStash输出到ES</h1><p>如果我们需要将数据输出值ES而不是控制台的话，我们修改Logstash的output配置。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">       hosts =&gt; [ &quot;localhost:9200&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动ES集群"><a href="#启动ES集群" class="headerlink" title="启动ES集群"></a>启动ES集群</h2><p>启动 ES 集群时，请使用非root用户，同时关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /usr/local/es/elasticsearch-7.6.1/bin/elasticsearch 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="配置-LogStash"><a href="#配置-LogStash" class="headerlink" title="配置 LogStash"></a>配置 LogStash</h2><p>重新拷贝一份配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/es/logstash-7.6.1</span><br><span class="line">touch config/filebeat-elasticSearch.conf</span><br></pre></td></tr></table></figure><p>将output修改为Elasticsearch</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config/filebeat-elasticSearch.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">      port =&gt; 5044</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [ &quot;192.168.10.158:9200&quot;,&quot;192.168.10.158:9200&quot;,&quot;192.168.10.158:9200&quot;]</span><br><span class="line">&#125;</span><br><span class="line">stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动-LogStash"><a href="#启动-LogStash" class="headerlink" title="启动 LogStash"></a>启动 LogStash</h2><p>启动 LogStash 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/filebeat-elasticSearch.conf --config.reload.automatic</span><br></pre></td></tr></table></figure><p>启动成功</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Sending Logstash logs to /home/ELK/logStash/logstash-<span class="number">7</span><span class="variable">.6</span><span class="variable">.1</span>/logs which is now configured via log4j2<span class="variable">.properties</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">42</span>,<span class="number">027</span>][WARN ][logstash<span class="variable">.config</span><span class="variable">.source</span><span class="variable">.multilocal</span>] Ignoring the &#x27;pipelines<span class="variable">.yml</span>&#x27; file because modules <span class="keyword">or</span> command line options are specified</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">42</span>,<span class="number">106</span>][INFO ][logstash<span class="variable">.runner</span>          ] Starting Logstash &#123;<span class="string">&quot;logstash.version&quot;</span>=&gt;<span class="string">&quot;7.6.1&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">43</span>,<span class="number">224</span>][INFO ][org<span class="variable">.reflections</span><span class="variable">.Reflections</span>] Reflections took <span class="number">24</span> ms to scan <span class="number">1</span> urls, producing <span class="number">20</span> keys <span class="keyword">and</span> <span class="number">40</span> values</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">113</span>][INFO ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Elasticsearch pool URLs updated &#123;:changes=&gt;&#123;:removed=&gt;[], :added=&gt;[http:<span class="comment">//192.168.10.30:9200/, http://192.168.10.31:9200/, http://192.168.10.32:9200/]&#125;&#125;</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">244</span>][WARN ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Restored connection to ES <span class="keyword">instance</span> &#123;:url=&gt;<span class="string">&quot;http://192.168.10.30:9200/&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">280</span>][INFO ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] ES Output version determined &#123;:es_version=&gt;<span class="number">7</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">289</span>][WARN ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Detected a <span class="number">6</span><span class="variable">.x</span> <span class="keyword">and</span> above cluster: the `<span class="keyword">type</span>` <span class="keyword">event</span> field won&#x27;t be used to determine the document _type &#123;:es_version=&gt;<span class="number">7</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">332</span>][WARN ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Restored connection to ES <span class="keyword">instance</span> &#123;:url=&gt;<span class="string">&quot;http://192.168.10.31:9200/&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">360</span>][WARN ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Restored connection to ES <span class="keyword">instance</span> &#123;:url=&gt;<span class="string">&quot;http://192.168.10.32:9200/&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">407</span>][INFO ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] New Elasticsearch <span class="keyword">output</span> &#123;:<span class="keyword">class</span>=&gt;<span class="string">&quot;LogStash::Outputs::ElasticSearch&quot;</span>, :hosts=&gt;[<span class="string">&quot;//192.168.10.30:9200&quot;</span>, <span class="string">&quot;//192.168.10.31:9200&quot;</span>, <span class="string">&quot;//192.168.10.32:9200&quot;</span>]&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">455</span>][INFO ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Using <span class="keyword">default</span> mapping template</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">500</span>][WARN ][org<span class="variable">.logstash</span><span class="variable">.instrument</span><span class="variable">.metrics</span><span class="variable">.gauge</span><span class="variable">.LazyDelegatingGauge</span>][main] A gauge metric of an unknown <span class="keyword">type</span> (org<span class="variable">.jruby</span><span class="variable">.specialized</span><span class="variable">.RubyArrayOneObject</span>) has been create <span class="keyword">for</span> key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">505</span>][INFO ][logstash<span class="variable">.javapipeline</span>    ][main] Starting pipeline &#123;:pipeline_id=&gt;<span class="string">&quot;main&quot;</span>, <span class="string">&quot;pipeline.workers&quot;</span>=&gt;<span class="number">2</span>, <span class="string">&quot;pipeline.batch.size&quot;</span>=&gt;<span class="number">125</span>, <span class="string">&quot;pipeline.batch.delay&quot;</span>=&gt;<span class="number">50</span>, <span class="string">&quot;pipeline.max_inflight&quot;</span>=&gt;<span class="number">250</span>, <span class="string">&quot;pipeline.sources&quot;</span>=&gt;[<span class="string">&quot;/home/ELK/logStash/logstash-7.6.1/config/filebeat-elasticSearch.conf&quot;</span>], :thread=&gt;<span class="string">&quot;#&lt;Thread:0x74cf420a run&gt;&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">551</span>][INFO ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Attempting to install template &#123;:manage_template=&gt;&#123;<span class="string">&quot;index_patterns&quot;</span>=&gt;<span class="string">&quot;logstash-*&quot;</span>, <span class="string">&quot;version&quot;</span>=&gt;<span class="number">60001</span>, <span class="string">&quot;settings&quot;</span>=&gt;&#123;<span class="string">&quot;index.refresh_interval&quot;</span>=&gt;<span class="string">&quot;5s&quot;</span>, <span class="string">&quot;number_of_shards&quot;</span>=&gt;<span class="number">1</span>, <span class="string">&quot;index.lifecycle.name&quot;</span>=&gt;<span class="string">&quot;logstash-policy&quot;</span>, <span class="string">&quot;index.lifecycle.rollover_alias&quot;</span>=&gt;<span class="string">&quot;logstash&quot;</span>&#125;, <span class="string">&quot;mappings&quot;</span>=&gt;&#123;<span class="string">&quot;dynamic_templates&quot;</span>=&gt;[&#123;<span class="string">&quot;message_field&quot;</span>=&gt;&#123;<span class="string">&quot;path_match&quot;</span>=&gt;<span class="string">&quot;message&quot;</span>, <span class="string">&quot;match_mapping_type&quot;</span>=&gt;<span class="string">&quot;string&quot;</span>, <span class="string">&quot;mapping&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;text&quot;</span>, <span class="string">&quot;norms&quot;</span>=&gt;false&#125;&#125;&#125;, &#123;<span class="string">&quot;string_fields&quot;</span>=&gt;&#123;<span class="string">&quot;match&quot;</span>=&gt;<span class="string">&quot;*&quot;</span>, <span class="string">&quot;match_mapping_type&quot;</span>=&gt;<span class="string">&quot;string&quot;</span>, <span class="string">&quot;mapping&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;text&quot;</span>, <span class="string">&quot;norms&quot;</span>=&gt;false, <span class="string">&quot;fields&quot;</span>=&gt;&#123;<span class="string">&quot;keyword&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;keyword&quot;</span>, <span class="string">&quot;ignore_above&quot;</span>=&gt;<span class="number">256</span>&#125;&#125;&#125;&#125;&#125;], <span class="string">&quot;properties&quot;</span>=&gt;&#123;<span class="string">&quot;@timestamp&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;date&quot;</span>&#125;, <span class="string">&quot;@version&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;keyword&quot;</span>&#125;, <span class="string">&quot;geoip&quot;</span>=&gt;&#123;<span class="string">&quot;dynamic&quot;</span>=&gt;true, <span class="string">&quot;properties&quot;</span>=&gt;&#123;<span class="string">&quot;ip&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;ip&quot;</span>&#125;, <span class="string">&quot;location&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;geo_point&quot;</span>&#125;, <span class="string">&quot;latitude&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;half_float&quot;</span>&#125;, <span class="string">&quot;longitude&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;half_float&quot;</span>&#125;&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">578</span>][INFO ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Installing elasticsearch template to _template/logstash</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">45</span>,<span class="number">212</span>][INFO ][logstash<span class="variable">.inputs</span><span class="variable">.beats</span>    ][main] Beats inputs: Starting <span class="keyword">input</span> listener &#123;:address=&gt;<span class="string">&quot;0.0.0.0:5044&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">45</span>,<span class="number">227</span>][INFO ][logstash<span class="variable">.javapipeline</span>    ][main] Pipeline started &#123;<span class="string">&quot;pipeline.id&quot;</span>=&gt;<span class="string">&quot;main&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">45</span>,<span class="number">274</span>][INFO ][logstash<span class="variable">.agent</span>           ] Pipelines running &#123;:count=&gt;<span class="number">1</span>, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">45</span>,<span class="number">337</span>][INFO ][org<span class="variable">.logstash</span><span class="variable">.beats</span><span class="variable">.Server</span>][main] Starting server on port: <span class="number">5044</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">45</span>,<span class="number">508</span>][INFO ][logstash<span class="variable">.agent</span>           ] Successfully started Logstash API endpoint &#123;:port=&gt;<span class="number">9600</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><p>在浏览器中，打开 ElasticSearch-head 插件，输入 ElasticSearch 集群地址。连接后，可以看到如下信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212191043995.png" alt="image-20230212191043995"></p><p>点击&lt;**数据浏览**&gt;，查看 logstash-2023.02.12-000001 索引信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212191201068.png" alt="image-20230212191201068"></p><p>从输出返回结果，我们可以看到，日志确实已经保存到了Elasticsearch中，而且我们看到消息数据是封装在名为<strong>message</strong>中的，其他的数据也封装在一个个的字段中。我们其实更想要把消息解析成一个个的字段。例如：IP字段、时间、请求方式、请求URL、响应结果，这样。</p><h1 id="LogStash-过滤器"><a href="#LogStash-过滤器" class="headerlink" title="LogStash 过滤器"></a>LogStash 过滤器</h1><p>从日志文件中收集到的数据包含了很多有效信息，比如IP、时间等，</p><p>在Logstash中可以配置过滤器Filter对采集到的数据进行过滤处理，在Logstash中，有大量的插件供我们使用。</p><p>参考官网：</p><p><a href="https://www.elastic.co/guide/en/logstash/7.6/filter-plugins.html">https://www.elastic.co/guide/en/logstash/7.6/filter-plugins.html</a></p><p>查看 LogStash 已经安装的插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/es/logstash-7.6.1/</span><br><span class="line">bin/logstash-plugin list</span><br></pre></td></tr></table></figure><p>此处重点讲解 Grok 插件。</p><h1 id="Grok-插件"><a href="#Grok-插件" class="headerlink" title="Grok 插件"></a>Grok 插件</h1><p>Grok 是通过模式匹配的方式来识别日志中的数据。可以把 Grok 插件简单理解为升级版本的正则表达式。它拥有更多的模式，默认 LogStash 拥有120 个模式。如果这些模式不满足我们解析日志的需求，可以直接使用正则表达式来进行匹配。</p><p>官网：<a href="https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns">https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns</a></p><p>grok模式的语法是：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%&#123;SYNTAX:SEMANTIC&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>SYNTAX</strong>指的是Grok模式名称 ；<strong>SEMANTIC</strong>是给模式匹配到的文本字段名。例如：</p><p><code>%&#123;NUMBER:duration&#125; %&#123;IP:client&#125;  </code></p><p><code>duration</code> 表示：匹配一个数字，<code>client</code>表示匹配一个<code>IP</code>地址。             </p></blockquote><p>默认在Grok中，所有匹配到的的数据类型都是字符串，如果要转换成int类型（目前只支持int和float），可以这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%&#123;NUMBER:duration:int&#125;</span> <span class="string">%&#123;IP:client&#125;</span></span><br></pre></td></tr></table></figure><p>以下是常用的Grok模式</p><table><thead><tr><th>NUMBER</th><th>匹配数字（包含：小数）</th></tr></thead><tbody><tr><td>INT</td><td>匹配整形数字</td></tr><tr><td>POSINT</td><td>匹配正整数</td></tr><tr><td>WORD</td><td>匹配单词</td></tr><tr><td>DATA</td><td>匹配所有字符</td></tr><tr><td>IP</td><td>匹配IP地址</td></tr><tr><td>PATH</td><td>匹配路径</td></tr></tbody></table><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%88%AA%E5%9B%BE%20(3).png" alt="截图 (3)"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">grok</span> &#123;</span><br><span class="line">      <span class="string">match</span> <span class="string">=&gt;</span> &#123; <span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;IP:client&#125;</span> <span class="template-variable">%&#123;WORD:method&#125;</span> <span class="template-variable">%&#123;URIPATHPARAM:request&#125;</span> <span class="template-variable">%&#123;NUMBER:bytes&#125;</span> <span class="template-variable">%&#123;NUMBER:duration&#125;</span>&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配日志中的IP、日期</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">90</span><span class="variable">.224</span><span class="variable">.57</span><span class="variable">.84</span> - - [<span class="number">15</span>/Feb/<span class="number">2023</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">19</span> +<span class="number">0800</span>] <span class="string">&quot;POST /report HTTP/1.1&quot;</span> <span class="number">404</span> <span class="number">21</span> <span class="string">&quot;www.baidu.com&quot;</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4549.400 QQBrowser/9.7.12900&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Kibana-测试-Grok"><a href="#Kibana-测试-Grok" class="headerlink" title="Kibana 测试 Grok"></a>Kibana 测试 Grok</h2><p>在 Kibana 上测试 Grok 语法，可以看到 Grok 已经从日志中获取到了date及IP信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212211527995.png" alt="image-20230212211527995"></p><h2 id="配置-LogStash-1"><a href="#配置-LogStash-1" class="headerlink" title="配置 LogStash"></a>配置 LogStash</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config/filebeat-filter-console.conf</span><br></pre></td></tr></table></figure><p>配置如下类容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line"><span class="string">beats</span> &#123;</span><br><span class="line"><span class="string">port</span> <span class="string">=&gt;</span> <span class="number">5044</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line"><span class="string">grok</span> &#123;</span><br><span class="line"><span class="string">match</span> <span class="string">=&gt;</span> &#123; </span><br><span class="line"><span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;IP:ip&#125;</span> - - \[<span class="template-variable">%&#123;HTTPDATE:date&#125;</span>\]&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line"><span class="string">stdout</span> &#123;</span><br><span class="line"><span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">rubydebug</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 LogStash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/filebeat-filter-console.conf --config.reload.automatic</span><br></pre></td></tr></table></figure><h2 id="过滤结果"><a href="#过滤结果" class="headerlink" title="过滤结果"></a>过滤结果</h2><p>我们看到，经过Grok过滤器插件处理之后，我们已经获取到了ip和date两个字段。接下来，我们就可以继续解析其他的字段。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212205558456.png" alt="image-20230212205558456"></p><h2 id="解析所有字段"><a href="#解析所有字段" class="headerlink" title="解析所有字段"></a>解析所有字段</h2><p>将日志解析成以下字段</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td>client IP</td><td>浏览器端IP</td></tr><tr><td>timestamp</td><td>请求的时间戳</td></tr><tr><td>method</td><td>请求方式（GET/POST）</td></tr><tr><td>uri</td><td>请求的链接地址</td></tr><tr><td>status</td><td>服务器端响应状态</td></tr><tr><td>length</td><td>响应的数据长度</td></tr><tr><td>reference</td><td>从哪个URL跳转而来</td></tr><tr><td>browser</td><td>浏览器</td></tr></tbody></table><p>为了方便进行Grok开发，此处使用Kibana来进行调试，我们使用IP就可以把前面的IP字段匹配出来，使用HTTPDATE可以将后面的日期匹配出来。</p><p>为了方便测试，我们可以使用Kibana来进行Grok开发：</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%88%AA%E5%9B%BE%20(4).png" alt="截图 (4)"></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%88%AA%E5%9B%BE%20(5).png" alt="截图 (5)"></p><p>可以在Kibana中先把Grok的表达式写好，然后再放入到Logstash的配置文件中，这样可以大大提升调试的效率。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line"><span class="string">grok</span> &#123;</span><br><span class="line"><span class="string">match</span> <span class="string">=&gt;</span> &#123; </span><br><span class="line"><span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;IP:ip&#125;</span> - - \[<span class="template-variable">%&#123;HTTPDATE:date&#125;</span>\] \&quot;<span class="template-variable">%&#123;WORD:method&#125;</span> <span class="template-variable">%&#123;PATH:uri&#125;</span> <span class="template-variable">%&#123;DATA&#125;</span>\&quot; <span class="template-variable">%&#123;INT:status&#125;</span> <span class="template-variable">%&#123;INT:length&#125;</span> \&quot;<span class="template-variable">%&#123;DATA:reference&#125;</span>\&quot; \&quot;<span class="template-variable">%&#123;DATA:browser&#125;</span>\&quot;&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Kibaba 中测试结果如下</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212211306263.png" alt="image-20230212211306263"></p><h2 id="输入-ElasticSearch"><a href="#输入-ElasticSearch" class="headerlink" title="输入 ElasticSearch"></a>输入 ElasticSearch</h2><p>到目前为止，我们已经通过了Grok Filter可以将日志消息解析成一个一个的字段，那现在我们需要将这些字段保存到Elasticsearch中。我们看到了Logstash的输出中，有大量的字段，但如果我们只需要保存我们需要的8个，该如何处理呢？而且，如果我们需要将日期的格式进行转换，我们又该如何处理呢？</p><p><strong>过滤出来需要的字段</strong></p><p>要过滤出来我们需要的字段。我们需要使用mutate插件。mutate插件主要是作用在字段上，例如：它可以对字段进行重命名、删除、替换或者修改结构。</p><h1 id="mutate-插件"><a href="#mutate-插件" class="headerlink" title="mutate 插件"></a>mutate 插件</h1><p>用法如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mutate</span> &#123;</span><br><span class="line">    <span class="string">enable_metric</span> <span class="string">=&gt;</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    <span class="string">remove_field</span> <span class="string">=&gt;</span> [<span class="string">&quot;message&quot;</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;@timestamp&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;agent&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;ecs&quot;</span>, <span class="string">&quot;@version&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>enable_metric</strong></p><p><code>false</code>表示禁用默认输出</p><p><strong>remove_field</strong></p><p>从默认中移除不需要的字段</p></blockquote><h1 id="date-插件"><a href="#date-插件" class="headerlink" title="date 插件"></a>date 插件</h1><p>要将日期格式进行转换，我们可以使用Date插件来实现。该插件专门用来解析字段中的日期，官方说明文档：<a href="https://www.elastic.co/guide/en/logstash/7.6/plugins-filters-date.html">https://www.elastic.co/guide/en/logstash/7.6/plugins-filters-date.html</a></p><p>用法如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">date</span> &#123;</span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> [<span class="string">&quot;date&quot;</span>,<span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>]</span><br><span class="line">    <span class="string">target</span> <span class="string">=&gt;</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>将date字段转换为「年月日 时分秒」格式。默认字段经过date插件处理后，会输出到@timestamp字段，所以，我们可以通过修改target属性来重新定义输出字段。</p><h1 id="指定ES索引"><a href="#指定ES索引" class="headerlink" title="指定ES索引"></a>指定ES索引</h1><p>我们可以通过</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">elasticsearch</span> &#123;</span><br><span class="line">    <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.10.30:9200&quot;</span> ,<span class="string">&quot;192.168.10.31:9200&quot;</span> ,<span class="string">&quot;192.168.10.32:9200&quot;</span>]</span><br><span class="line">    <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index来指定索引名称，默认输出的index名称为：logstash-%{+yyyy.MM.dd}。</p><blockquote><p><strong>注意</strong></p><ol><li><p>要在index中使用时间格式化，filter的输出必须包含 @timestamp字段，否则将无法解析日期。</p></li><li><p>index名称中，不能出现大写字符</p></li></ol></blockquote><h1 id="融合测试"><a href="#融合测试" class="headerlink" title="融合测试"></a>融合测试</h1><p>现在使用 Grok、Mutate、Date 插件融合过滤日志信息，并指定 ElasticSearch 索引。</p><h2 id="配置-LogStash-2"><a href="#配置-LogStash-2" class="headerlink" title="配置 LogStash"></a>配置 LogStash</h2><p>在 config/ 目录下，创建 <code>filebeat-tomcat-weblog.conf</code> 配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">    <span class="string">beats</span> &#123;</span><br><span class="line">    <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">5044</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">grok</span> &#123;</span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> &#123; </span><br><span class="line">    <span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;IP:ip&#125;</span> - - \[<span class="template-variable">%&#123;HTTPDATE:date&#125;</span>\] \&quot;<span class="template-variable">%&#123;WORD:method&#125;</span> <span class="template-variable">%&#123;PATH:uri&#125;</span> <span class="template-variable">%&#123;DATA&#125;</span>\&quot; <span class="template-variable">%&#123;INT:status:int&#125;</span> <span class="template-variable">%&#123;INT:length:int&#125;</span> \&quot;<span class="template-variable">%&#123;DATA:reference&#125;</span>\&quot; \&quot;<span class="template-variable">%&#123;DATA:browser&#125;</span>\&quot;&quot;</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">mutate</span> &#123;</span><br><span class="line">    <span class="string">enable_metric</span> <span class="string">=&gt;</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    <span class="string">remove_field</span> <span class="string">=&gt;</span> [<span class="string">&quot;message&quot;</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;agent&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;ecs&quot;</span>, <span class="string">&quot;@version&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">date</span> &#123;</span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> [<span class="string">&quot;date&quot;</span>,<span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>]</span><br><span class="line">    <span class="string">target</span> <span class="string">=&gt;</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">    <span class="string">stdout</span> &#123;</span><br><span class="line">    <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">rubydebug</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">elasticsearch</span> &#123;</span><br><span class="line">    <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.10.30:9200&quot;</span> ,<span class="string">&quot;192.168.10.31:9200&quot;</span> ,<span class="string">&quot;192.168.10.32:9200&quot;</span>]</span><br><span class="line">    <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;tomcat_web_log_<span class="template-variable">%&#123;+YYYY-MM&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动-LogStash-1"><a href="#启动-LogStash-1" class="headerlink" title="启动 LogStash"></a>启动 LogStash</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/filebeat-tomcat-weblog.conf --config.test_and_exit</span><br><span class="line">bin/logstash -f config/filebeat-tomcat-weblog.conf --config.reload.automatic</span><br></pre></td></tr></table></figure><h2 id="收集结果"><a href="#收集结果" class="headerlink" title="收集结果"></a>收集结果</h2><p>数据过滤</p><p>从 LogStash 控制台上可以看到</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;length&quot;</span> =&gt; <span class="number">21</span>,</span><br><span class="line">     <span class="string">&quot;reference&quot;</span> =&gt; <span class="string">&quot;www.baidu.com&quot;</span>,</span><br><span class="line">          <span class="string">&quot;date&quot;</span> =&gt; <span class="number">2023</span>-<span class="number">02</span>-<span class="number">14</span>T16:<span class="number">27</span>:<span class="number">19</span><span class="variable">.000Z</span>,</span><br><span class="line">        <span class="string">&quot;method&quot;</span> =&gt; <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">           <span class="string">&quot;uri&quot;</span> =&gt; <span class="string">&quot;/report&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; <span class="number">2023</span>-<span class="number">02</span>-<span class="number">12</span>T13:<span class="number">45</span>:<span class="number">14</span><span class="variable">.339Z</span>,</span><br><span class="line">       <span class="string">&quot;browser&quot;</span> =&gt; <span class="string">&quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4549.400 QQBrowser/9.7.12900&quot;</span>,</span><br><span class="line">        <span class="string">&quot;status&quot;</span> =&gt; <span class="number">404</span>,</span><br><span class="line">            <span class="string">&quot;ip&quot;</span> =&gt; <span class="string">&quot;90.224.57.84&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已经过滤出了我们所定义的字段。</p><p>来到 ElasticSearch-Head 界面，可以查看到 ElasticSearch 已经收集到了我们所定义的字段</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212215052836.png" alt="image-20230212215052836"></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> ELK </tag>
            
            <tag> LogStash </tag>
            
            <tag> Grok 插件 </tag>
            
            <tag> Mutate 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 专题四 （FileBeat + LogStash 整合）</title>
      <link href="/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/"/>
      <url>/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用 FileBeat 进行数据实时监听，一旦发生变化时发送给 LogStash，LogStash 会按照指定的规则过滤输出日志信息。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h1 id="采集日志信息"><a href="#采集日志信息" class="headerlink" title="采集日志信息"></a>采集日志信息</h1><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>Tomcat 服务器运行过程中产生很多日志信息，通过LogStash采集并存储日志信息至ElasticSearch中。</p><p>Tomcat 日志文件如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost apache-tomcat-10.0.27]# tree logs/</span><br><span class="line">logs/</span><br><span class="line">├── catalina.2023-02-11.log</span><br><span class="line">├── catalina.out</span><br><span class="line">├── localhost.2023-02-11.log</span><br><span class="line">└── localhost_access_log.2023-02-11.txt</span><br><span class="line"></span><br><span class="line">0 directories, 4 files</span><br></pre></td></tr></table></figure><p>日志文件信息如下所示</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET / HTTP/1.1&quot; 200 11437</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /tomcat.css HTTP/1.1&quot; 200 5895</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /tomcat.svg HTTP/1.1&quot; 200 68761</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /bg-upper.png HTTP/1.1&quot; 200 3103</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /bg-nav.png HTTP/1.1&quot; 200 1401</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /asf-logo-wide.svg HTTP/1.1&quot; 200 27530</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /bg-button.png HTTP/1.1&quot; 200 713</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /bg-middle.png HTTP/1.1&quot; 200 1918</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /favicon.ico HTTP/1.1&quot; 200 21630</span><br></pre></td></tr></table></figure><p>这个日志其实由一个个的字段拼接而成</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td>client IP</td><td>浏览器端IP</td></tr><tr><td>timestamp</td><td>请求的时间戳</td></tr><tr><td>method</td><td>请求方式（GET/POST）</td></tr><tr><td>uri</td><td>请求的链接地址</td></tr><tr><td>status</td><td>服务器端响应状态</td></tr><tr><td>length</td><td>响应的数据长度</td></tr><tr><td>reference</td><td>从哪个URL跳转而来</td></tr><tr><td>browser</td><td>浏览器</td></tr></tbody></table><p>为了便于后期数据分析，需要将该日志信息解析成指定字段的filed的值并存储，便于后期分析。</p><h1 id="准备日志"><a href="#准备日志" class="headerlink" title="准备日志"></a>准备日志</h1><p>将Tomcat日志文件上传到指定的目录</p><h1 id="发送日志"><a href="#发送日志" class="headerlink" title="发送日志"></a>发送日志</h1><p>使用 FileBeats 将日志发送到 LogStash</p><p>之前，我们使用的FileBeat是通过FileBeat的Harvester组件监控日志文件，然后将日志以一定的格式保存到Elasticsearch中，而现在我们需要配置FileBeats将数据发送到Logstash再将数据发送至ElasticSearch。</p><h1 id="配置-FileBeat"><a href="#配置-FileBeat" class="headerlink" title="配置 FileBeat"></a>配置 FileBeat</h1><p>FileBeat相关信息按照如下格式配置即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#----------------------------- Logstash output ---------------------------------</span></span><br><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">  <span class="comment"># Boolean flag to enable or disable the output module.</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The Logstash hosts</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;localhost:5044&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>hosts配置的是Logstash监听的IP地址/机器名以及端口号</p></blockquote><p>进入fileBeat安装路径并准备FileBeat配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/es/filebeat-7.6.1-linux-x86_64</span><br><span class="line"><span class="built_in">touch</span> filebeat-logstash.yml</span><br><span class="line">vim filebeat-logstash.yml</span><br></pre></td></tr></table></figure><p>因为Tomcat的web log日志都是以IP地址开头的，所以我们需要修改下匹配字段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/tomcat/log/access*.*</span></span><br><span class="line">  <span class="attr">multiline.pattern:</span> <span class="string">&#x27;^\\d+\\.\\d+\\.\\d+\\.\\d+ &#x27;</span></span><br><span class="line">  <span class="attr">multiline.negate:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">multiline.match:</span> <span class="string">after</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">   <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">hosts:</span> [<span class="string">&quot;192.168.21.133:5044&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>注意该配置中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">multiline.pattern:</span> <span class="string">&#x27;^\\d+\\.\\d+\\.\\d+\\.\\d+ &#x27;</span></span><br><span class="line"><span class="attr">multiline.negate:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">multiline.match:</span> <span class="string">after</span></span><br></pre></td></tr></table></figure><p>表示以IP地址开头的行追加到上一行</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">multiline:</span></span><br><span class="line">    <span class="attr">pattern:</span> <span class="string">&#x27;^[0-2][0-9]:[0-5][0-9]:[0-5][0-9]&#x27;</span></span><br><span class="line">    <span class="attr">negate:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">match:</span> <span class="string">after</span></span><br></pre></td></tr></table></figure><p>上面配置的意思是：不以时间格式开头的行都合并到上一行的末尾（正则写的不好，忽略忽略）</p><ul><li><p>pattern：正则表达式</p></li><li><p>negate：true 或 false；默认是false，匹配pattern的行合并到上一行；true，不匹配pattern的行合并到上一行</p></li><li><p>match：after 或 before，合并到上一行的末尾或开头</p></li></ul><h1 id="启动-FileBeat"><a href="#启动-FileBeat" class="headerlink" title="启动 FileBeat"></a>启动 FileBeat</h1><p>启动FileBeat，并指定使用指定的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e -c filebeat-logstash.yml</span><br></pre></td></tr></table></figure><p>FileBeat将尝试建立与Logstash监听的IP和端口号进行连接。但此时，我们并没有开启并配置Logstash，所以FileBeat是无法连接到Logstash的。</p><h1 id="配置-LogStash"><a href="#配置-LogStash" class="headerlink" title="配置 LogStash"></a>配置 LogStash</h1><p>Logstash的配置文件和FileBeat类似，它也需要有一个input、和output。</p><p>基本格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment">#号表示添加注释</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">input表示要接收的数据</span></span><br><span class="line">input &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">file表示对接收到的数据进行过滤处理</span></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output表示将数据输出到其他位置</span></span><br><span class="line">output &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置从FileBeat接收数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/es/logstash-7.6.1</span><br><span class="line">vim config/filebeat-console.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">      port =&gt; 5044</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123;</span><br><span class="line">      codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示</strong></p><p>复制可能存在乱码，可以将复制内容先放到文本文档，再拷出来</p></blockquote><h1 id="验证-LogStash"><a href="#验证-LogStash" class="headerlink" title="验证 LogStash"></a>验证 LogStash</h1><p>测试 LogStash 配置是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/filebeat-console.conf --config.test_and_exit</span><br></pre></td></tr></table></figure><p>LogStash 测试启动成功</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sending Logstash logs to /home/ELK/logStash/logstash-<span class="number">7</span><span class="variable">.6</span><span class="variable">.1</span>/logs which is now configured via log4j2<span class="variable">.properties</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">35</span>:<span class="number">56</span>,<span class="number">635</span>][WARN ][logstash<span class="variable">.config</span><span class="variable">.source</span><span class="variable">.multilocal</span>] Ignoring the &#x27;pipelines<span class="variable">.yml</span>&#x27; file because modules <span class="keyword">or</span> command line options are specified</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">35</span>:<span class="number">57</span>,<span class="number">461</span>][INFO ][org<span class="variable">.reflections</span><span class="variable">.Reflections</span>] Reflections took <span class="number">58</span> ms to scan <span class="number">1</span> urls, producing <span class="number">20</span> keys <span class="keyword">and</span> <span class="number">40</span> values</span><br><span class="line">Configuration OK</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">35</span>:<span class="number">58</span>,<span class="number">004</span>][INFO ][logstash<span class="variable">.runner</span>          ] Using <span class="keyword">config</span><span class="variable">.test_and_exit</span> mode. Config Validation Result: OK. Exiting Logstash</span><br></pre></td></tr></table></figure><h1 id="启动-LogStash"><a href="#启动-LogStash" class="headerlink" title="启动 LogStash"></a>启动 LogStash</h1><p>启动 LogStash 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/filebeat-console.conf --config.reload.automatic</span><br></pre></td></tr></table></figure><p>启动成功</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sending Logstash logs to /home/ELK/logStash/logstash-<span class="number">7</span><span class="variable">.6</span><span class="variable">.1</span>/logs which is now configured via log4j2<span class="variable">.properties</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">56</span>,<span class="number">706</span>][WARN ][logstash<span class="variable">.config</span><span class="variable">.source</span><span class="variable">.multilocal</span>] Ignoring the &#x27;pipelines<span class="variable">.yml</span>&#x27; file because modules <span class="keyword">or</span> command line options are specified</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">56</span>,<span class="number">783</span>][INFO ][logstash<span class="variable">.runner</span>          ] Starting Logstash &#123;<span class="string">&quot;logstash.version&quot;</span>=&gt;<span class="string">&quot;7.6.1&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">57</span>,<span class="number">880</span>][INFO ][org<span class="variable">.reflections</span><span class="variable">.Reflections</span>] Reflections took <span class="number">25</span> ms to scan <span class="number">1</span> urls, producing <span class="number">20</span> keys <span class="keyword">and</span> <span class="number">40</span> values</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">58</span>,<span class="number">404</span>][WARN ][org<span class="variable">.logstash</span><span class="variable">.instrument</span><span class="variable">.metrics</span><span class="variable">.gauge</span><span class="variable">.LazyDelegatingGauge</span>][main] A gauge metric of an unknown <span class="keyword">type</span> (org<span class="variable">.jruby</span><span class="variable">.RubyArray</span>) has been create <span class="keyword">for</span> key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">58</span>,<span class="number">412</span>][INFO ][logstash<span class="variable">.javapipeline</span>    ][main] Starting pipeline &#123;:pipeline_id=&gt;<span class="string">&quot;main&quot;</span>, <span class="string">&quot;pipeline.workers&quot;</span>=&gt;<span class="number">2</span>, <span class="string">&quot;pipeline.batch.size&quot;</span>=&gt;<span class="number">125</span>, <span class="string">&quot;pipeline.batch.delay&quot;</span>=&gt;<span class="number">50</span>, <span class="string">&quot;pipeline.max_inflight&quot;</span>=&gt;<span class="number">250</span>, <span class="string">&quot;pipeline.sources&quot;</span>=&gt;[<span class="string">&quot;/home/ELK/logStash/logstash-7.6.1/config/filebeat-console.conf&quot;</span>], :thread=&gt;<span class="string">&quot;#&lt;Thread:0x3ec7886b run&gt;&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">59</span>,<span class="number">196</span>][INFO ][logstash<span class="variable">.inputs</span><span class="variable">.beats</span>    ][main] Beats inputs: Starting <span class="keyword">input</span> listener &#123;:address=&gt;<span class="string">&quot;0.0.0.0:5044&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">59</span>,<span class="number">217</span>][INFO ][logstash<span class="variable">.javapipeline</span>    ][main] Pipeline started &#123;<span class="string">&quot;pipeline.id&quot;</span>=&gt;<span class="string">&quot;main&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">59</span>,<span class="number">302</span>][INFO ][logstash<span class="variable">.agent</span>           ] Pipelines running &#123;:count=&gt;<span class="number">1</span>, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">59</span>,<span class="number">361</span>][INFO ][org<span class="variable">.logstash</span><span class="variable">.beats</span><span class="variable">.Server</span>][main] Starting server on port: <span class="number">5044</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">59</span>,<span class="number">630</span>][INFO ][logstash<span class="variable">.agent</span>           ] Successfully started Logstash API endpoint &#123;:port=&gt;<span class="number">9600</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="日志监听"><a href="#日志监听" class="headerlink" title="日志监听"></a>日志监听</h1><p>启动 FileBeat 后，可以看到控制台已经连接 LogStash 成功，同时正在监听日志文件</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">52</span>:<span class="number">00</span><span class="variable">.922</span>-<span class="number">0800</span>    INFO    pipeline/<span class="keyword">output</span><span class="variable">.go</span>:<span class="number">95</span>   Connecting to backoff(async(tcp:<span class="comment">//192.168.10.158:5044))</span></span><br><span class="line"><span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">52</span>:<span class="number">00</span><span class="variable">.923</span>-<span class="number">0800</span>    INFO    pipeline/<span class="keyword">output</span><span class="variable">.go</span>:<span class="number">105</span>  Connection to backoff(async(tcp:<span class="comment">//192.168.10.158:5044)) established</span></span><br><span class="line"><span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">52</span>:<span class="number">24</span><span class="variable">.920</span>-<span class="number">0800</span>    INFO    [monitoring]    log/log<span class="variable">.go</span>:<span class="number">145</span>  Non-zero metrics in the last <span class="number">30</span>s        &#123;<span class="string">&quot;monitoring&quot;</span>: &#123;<span class="string">&quot;metrics&quot;</span>: &#123;<span class="string">&quot;beat&quot;</span>:&#123;<span class="string">&quot;cpu&quot;</span>:&#123;<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">100</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">105</span>&#125;&#125;,<span class="string">&quot;total&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">110</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">122</span>&#125;,<span class="string">&quot;value&quot;</span>:<span class="number">110</span>&#125;,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">10</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">17</span>&#125;&#125;&#125;,<span class="string">&quot;handles&quot;</span>:&#123;<span class="string">&quot;limit&quot;</span>:&#123;<span class="string">&quot;hard&quot;</span>:<span class="number">4096</span>,<span class="string">&quot;soft&quot;</span>:<span class="number">1024</span>&#125;,<span class="string">&quot;open&quot;</span>:<span class="number">9</span>&#125;,<span class="string">&quot;info&quot;</span>:&#123;<span class="string">&quot;ephemeral_id&quot;</span>:<span class="string">&quot;82569f6e-16d4-4a5c-9372-06d83d5a5d04&quot;</span>,<span class="string">&quot;uptime&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">30073</span>&#125;&#125;,<span class="string">&quot;memstats&quot;</span>:&#123;<span class="string">&quot;gc_next&quot;</span>:<span class="number">8111376</span>,<span class="string">&quot;memory_alloc&quot;</span>:<span class="number">6627960</span>,<span class="string">&quot;memory_total&quot;</span>:<span class="number">14803392</span>,<span class="string">&quot;rss&quot;</span>:<span class="number">31338496</span>&#125;,<span class="string">&quot;runtime&quot;</span>:&#123;<span class="string">&quot;goroutines&quot;</span>:<span class="number">28</span>&#125;&#125;,<span class="string">&quot;filebeat&quot;</span>:&#123;<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;added&quot;</span>:<span class="number">2</span>,<span class="string">&quot;done&quot;</span>:<span class="number">2</span>&#125;,<span class="string">&quot;harvester&quot;</span>:&#123;<span class="string">&quot;files&quot;</span>:&#123;<span class="string">&quot;4f6bbc19-92bf-4434-a8ce-477369c614c0&quot;</span>:&#123;<span class="string">&quot;last_event_published_time&quot;</span>:<span class="string">&quot;2023-02-11T19:51:59.921Z&quot;</span>,<span class="string">&quot;last_event_timestamp&quot;</span>:<span class="string">&quot;2023-02-11T19:51:54.920Z&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;/home/ELK/tomcat/apache-tomcat-10.0.27/logs/localhost_access_log.2023-02-11.txt&quot;</span>,<span class="string">&quot;read_offset&quot;</span>:<span class="number">747</span>,<span class="string">&quot;size&quot;</span>:<span class="number">747</span>,<span class="string">&quot;start_time&quot;</span>:<span class="string">&quot;2023-02-11T19:51:54.919Z&quot;</span>&#125;&#125;,<span class="string">&quot;open_files&quot;</span>:<span class="number">1</span>,<span class="string">&quot;running&quot;</span>:<span class="number">1</span>,<span class="string">&quot;started&quot;</span>:<span class="number">1</span>&#125;&#125;,<span class="string">&quot;libbeat&quot;</span>:&#123;<span class="string">&quot;config&quot;</span>:&#123;<span class="string">&quot;module&quot;</span>:&#123;<span class="string">&quot;running&quot;</span>:<span class="number">0</span>&#125;&#125;,<span class="string">&quot;output&quot;</span>:&#123;<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;acked&quot;</span>:<span class="number">1</span>,<span class="string">&quot;batches&quot;</span>:<span class="number">1</span>,<span class="string">&quot;total&quot;</span>:<span class="number">1</span>&#125;,<span class="string">&quot;read&quot;</span>:&#123;<span class="string">&quot;bytes&quot;</span>:<span class="number">6</span>&#125;,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;logstash&quot;</span>,<span class="string">&quot;write&quot;</span>:&#123;<span class="string">&quot;bytes&quot;</span>:<span class="number">546</span>&#125;&#125;,<span class="string">&quot;pipeline&quot;</span>:&#123;<span class="string">&quot;clients&quot;</span>:<span class="number">1</span>,<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;active&quot;</span>:<span class="number">0</span>,<span class="string">&quot;filtered&quot;</span>:<span class="number">1</span>,<span class="string">&quot;published&quot;</span>:<span class="number">1</span>,<span class="string">&quot;retry&quot;</span>:<span class="number">1</span>,<span class="string">&quot;total&quot;</span>:<span class="number">2</span>&#125;,<span class="string">&quot;queue&quot;</span>:&#123;<span class="string">&quot;acked&quot;</span>:<span class="number">1</span>&#125;&#125;&#125;,<span class="string">&quot;registrar&quot;</span>:&#123;<span class="string">&quot;states&quot;</span>:&#123;<span class="string">&quot;current&quot;</span>:<span class="number">1</span>,<span class="string">&quot;update&quot;</span>:<span class="number">2</span>&#125;,<span class="string">&quot;writes&quot;</span>:&#123;<span class="string">&quot;success&quot;</span>:<span class="number">3</span>,<span class="string">&quot;total&quot;</span>:<span class="number">3</span>&#125;&#125;,<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;cpu&quot;</span>:&#123;<span class="string">&quot;cores&quot;</span>:<span class="number">2</span>&#125;,<span class="string">&quot;load&quot;</span>:&#123;<span class="string">&quot;1&quot;</span>:<span class="number">0</span><span class="variable">.26</span>,<span class="string">&quot;15&quot;</span>:<span class="number">0</span><span class="variable">.23</span>,<span class="string">&quot;5&quot;</span>:<span class="number">0</span><span class="variable">.4</span>,<span class="string">&quot;norm&quot;</span>:&#123;<span class="string">&quot;1&quot;</span>:<span class="number">0</span><span class="variable">.13</span>,<span class="string">&quot;15&quot;</span>:<span class="number">0</span><span class="variable">.115</span>,<span class="string">&quot;5&quot;</span>:<span class="number">0</span><span class="variable">.2</span>&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line"><span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">52</span>:<span class="number">54</span><span class="variable">.919</span>-<span class="number">0800</span>    INFO    [monitoring]    log/log<span class="variable">.go</span>:<span class="number">145</span>  Non-zero metrics in the last <span class="number">30</span>s        &#123;<span class="string">&quot;monitoring&quot;</span>: &#123;<span class="string">&quot;metrics&quot;</span>: &#123;<span class="string">&quot;beat&quot;</span>:&#123;<span class="string">&quot;cpu&quot;</span>:&#123;<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">100</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">3</span>&#125;&#125;,<span class="string">&quot;total&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">110</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">3</span>&#125;,<span class="string">&quot;value&quot;</span>:<span class="number">110</span>&#125;,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">10</span>&#125;&#125;,<span class="string">&quot;handles&quot;</span>:&#123;<span class="string">&quot;limit&quot;</span>:&#123;<span class="string">&quot;hard&quot;</span>:<span class="number">4096</span>,<span class="string">&quot;soft&quot;</span>:<span class="number">1024</span>&#125;,<span class="string">&quot;open&quot;</span>:<span class="number">9</span>&#125;,<span class="string">&quot;info&quot;</span>:&#123;<span class="string">&quot;ephemeral_id&quot;</span>:<span class="string">&quot;82569f6e-16d4-4a5c-9372-06d83d5a5d04&quot;</span>,<span class="string">&quot;uptime&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">60074</span>&#125;&#125;,<span class="string">&quot;memstats&quot;</span>:&#123;<span class="string">&quot;gc_next&quot;</span>:<span class="number">8111376</span>,<span class="string">&quot;memory_alloc&quot;</span>:<span class="number">6988704</span>,<span class="string">&quot;memory_total&quot;</span>:<span class="number">15164136</span>&#125;,<span class="string">&quot;runtime&quot;</span>:&#123;<span class="string">&quot;goroutines&quot;</span>:<span class="number">28</span>&#125;&#125;,<span class="string">&quot;filebeat&quot;</span>:&#123;<span class="string">&quot;harvester&quot;</span>:&#123;<span class="string">&quot;open_files&quot;</span>:<span class="number">1</span>,<span class="string">&quot;running&quot;</span>:<span class="number">1</span>&#125;&#125;,<span class="string">&quot;libbeat&quot;</span>:&#123;<span class="string">&quot;config&quot;</span>:&#123;<span class="string">&quot;module&quot;</span>:&#123;<span class="string">&quot;running&quot;</span>:<span class="number">0</span>&#125;&#125;,<span class="string">&quot;pipeline&quot;</span>:&#123;<span class="string">&quot;clients&quot;</span>:<span class="number">1</span>,<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;active&quot;</span>:<span class="number">0</span>&#125;&#125;&#125;,<span class="string">&quot;registrar&quot;</span>:&#123;<span class="string">&quot;states&quot;</span>:&#123;<span class="string">&quot;current&quot;</span>:<span class="number">1</span>&#125;&#125;,<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;load&quot;</span>:&#123;<span class="string">&quot;1&quot;</span>:<span class="number">0</span><span class="variable">.15</span>,<span class="string">&quot;15&quot;</span>:<span class="number">0</span><span class="variable">.22</span>,<span class="string">&quot;5&quot;</span>:<span class="number">0</span><span class="variable">.36</span>,<span class="string">&quot;norm&quot;</span>:&#123;<span class="string">&quot;1&quot;</span>:<span class="number">0</span><span class="variable">.075</span>,<span class="string">&quot;15&quot;</span>:<span class="number">0</span><span class="variable">.11</span>,<span class="string">&quot;5&quot;</span>:<span class="number">0</span><span class="variable">.18</span>&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line"><span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">53</span>:<span class="number">24</span><span class="variable">.921</span>-<span class="number">0800</span>    INFO    [monitoring]    log/log<span class="variable">.go</span>:<span class="number">145</span>  Non-zero metrics in the last <span class="number">30</span>s        &#123;<span class="string">&quot;monitoring&quot;</span>: &#123;<span class="string">&quot;metrics&quot;</span>: &#123;<span class="string">&quot;beat&quot;</span>:&#123;<span class="string">&quot;cpu&quot;</span>:&#123;<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">110</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">5</span>&#125;&#125;,<span class="string">&quot;total&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">120</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">6</span>&#125;,<span class="string">&quot;value&quot;</span>:<span class="number">120</span>&#125;,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">10</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">1</span>&#125;&#125;&#125;,<span class="string">&quot;handles&quot;</span>:&#123;<span class="string">&quot;limit&quot;</span>:&#123;<span class="string">&quot;hard&quot;</span>:<span class="number">4096</span>,<span class="string">&quot;soft&quot;</span>:<span class="number">1024</span>&#125;,<span class="string">&quot;open&quot;</span>:<span class="number">9</span>&#125;,<span class="string">&quot;info&quot;</span>:&#123;<span class="string">&quot;ephemeral_id&quot;</span>:<span class="string">&quot;82569f6e-16d4-4a5c-9372-06d83d5a5d04&quot;</span>,<span class="string">&quot;uptime&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">90073</span>&#125;&#125;,<span class="string">&quot;memstats&quot;</span>:&#123;<span class="string">&quot;gc_next&quot;</span>:<span class="number">8111376</span>,<span class="string">&quot;memory_alloc&quot;</span>:<span class="number">7316496</span>,<span class="string">&quot;memory_total&quot;</span>:<span class="number">15491928</span>&#125;,<span class="string">&quot;runtime&quot;</span>:&#123;<span class="string">&quot;goroutines&quot;</span>:<span class="number">28</span>&#125;&#125;,<span class="string">&quot;filebeat&quot;</span>:&#123;<span class="string">&quot;harvester&quot;</span>:&#123;<span class="string">&quot;open_files&quot;</span>:<span class="number">1</span>,<span class="string">&quot;running&quot;</span>:<span class="number">1</span>&#125;&#125;,<span class="string">&quot;libbeat&quot;</span>:&#123;<span class="string">&quot;config&quot;</span>:&#123;<span class="string">&quot;module&quot;</span>:&#123;<span class="string">&quot;running&quot;</span>:<span class="number">0</span>&#125;&#125;,<span class="string">&quot;pipeline&quot;</span>:&#123;<span class="string">&quot;clients&quot;</span>:<span class="number">1</span>,<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;active&quot;</span>:<span class="number">0</span>&#125;&#125;&#125;,<span class="string">&quot;registrar&quot;</span>:&#123;<span class="string">&quot;states&quot;</span>:&#123;<span class="string">&quot;current&quot;</span>:<span class="number">1</span>&#125;&#125;,<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;load&quot;</span>:&#123;<span class="string">&quot;1&quot;</span>:<span class="number">0</span><span class="variable">.09</span>,<span class="string">&quot;15&quot;</span>:<span class="number">0</span><span class="variable">.22</span>,<span class="string">&quot;5&quot;</span>:<span class="number">0</span><span class="variable">.33</span>,<span class="string">&quot;norm&quot;</span>:&#123;<span class="string">&quot;1&quot;</span>:<span class="number">0</span><span class="variable">.045</span>,<span class="string">&quot;15&quot;</span>:<span class="number">0</span><span class="variable">.11</span>,<span class="string">&quot;5&quot;</span>:<span class="number">0</span><span class="variable">.165</span>&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="日志收集"><a href="#日志收集" class="headerlink" title="日志收集"></a>日志收集</h1><p>来到 LogStash 的控制台，可以看到 tomcat 的日志已被收集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/home/ELK/logStash/logstash-7.6.1/vendor/bundle/jruby/2.5.0/gems/awesome_print-1.7.0/lib/awesome_print/formatters/base_formatter.rb:31: warning: constant ::Fixnum is deprecated</span><br><span class="line">&#123;</span><br><span class="line">       &quot;message&quot; =&gt; &quot;192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET / HTTP/1.1\&quot; 200 11437\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /tomcat.css HTTP/1.1\&quot; 200 5895\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /tomcat.svg HTTP/1.1\&quot; 200 68761\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /bg-upper.png HTTP/1.1\&quot; 200 3103\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /bg-nav.png HTTP/1.1\&quot; 200 1401\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /asf-logo-wide.svg HTTP/1.1\&quot; 200 27530\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /bg-button.png HTTP/1.1\&quot; 200 713\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /bg-middle.png HTTP/1.1\&quot; 200 1918\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /favicon.ico HTTP/1.1\&quot; 200 21630&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2023-02-12T03:51:54.920Z,</span><br><span class="line">           &quot;log&quot; =&gt; &#123;</span><br><span class="line">        &quot;offset&quot; =&gt; 0,</span><br><span class="line">          &quot;file&quot; =&gt; &#123;</span><br><span class="line">            &quot;path&quot; =&gt; &quot;/home/ELK/tomcat/apache-tomcat-10.0.27/logs/localhost_access_log.2023-02-11.txt&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">         &quot;flags&quot; =&gt; [</span><br><span class="line">            [0] &quot;multiline&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">          &quot;tags&quot; =&gt; [</span><br><span class="line">        [0] &quot;beats_input_codec_plain_applied&quot;</span><br><span class="line">    ],</span><br><span class="line">         &quot;input&quot; =&gt; &#123;</span><br><span class="line">        &quot;type&quot; =&gt; &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">         &quot;agent&quot; =&gt; &#123;</span><br><span class="line">        &quot;ephemeral_id&quot; =&gt; &quot;82569f6e-16d4-4a5c-9372-06d83d5a5d04&quot;,</span><br><span class="line">             &quot;version&quot; =&gt; &quot;7.6.1&quot;,</span><br><span class="line">                  &quot;id&quot; =&gt; &quot;902b638f-fcd1-44b2-8a81-5cfae937cbef&quot;,</span><br><span class="line">                &quot;type&quot; =&gt; &quot;filebeat&quot;,</span><br><span class="line">            &quot;hostname&quot; =&gt; &quot;localhost.localdomain&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">           &quot;ecs&quot; =&gt; &#123;</span><br><span class="line">        &quot;version&quot; =&gt; &quot;1.4.0&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">          &quot;host&quot; =&gt; &#123;</span><br><span class="line">        &quot;name&quot; =&gt; &quot;localhost.localdomain&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> LogStash </tag>
            
            <tag> FileBeat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 专题三 （LogStash 数据清洗与被压机制）</title>
      <link href="/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/"/>
      <url>/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>LogStash 一般用来数据清洗，即数据过滤。可以定制从日志中要过滤出的字段。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Logstash是一个开源的数据采集引擎。它可以动态地将不同来源的数据统一采集，并按照指定的数据格式进行处理后，将数据加载到其他的目的地。最开始，Logstash主要是针对日志采集，但后来Logstash开发了大量丰富的插件，所以，它可以做更多的海量数据的采集。</p><p>它可以处理各种类型的日志数据，例如：Apache的web log、Java的log4j日志数据，或者是系统、网络、防火墙的日志等等。它也可以很容易的和Elastic Stack的Beats组件整合，也可以很方便的和关系型数据库、NoSQL数据库、MQ等整合。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/wps1.jpeg" alt="wps1"></p><h1 id="经典架构"><a href="#经典架构" class="headerlink" title="经典架构"></a>经典架构</h1><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%88%AA%E5%9B%BE%20(1).png" alt="截图 (1)"></p><h1 id="对比-FileBeat"><a href="#对比-FileBeat" class="headerlink" title="对比 FileBeat"></a>对比 FileBeat</h1><ul><li><p>logstash是JVM跑的，资源消耗比较大</p></li><li><p>FileBeat是基于golang编写的，功能较少但资源消耗也比较小，更轻量级</p></li><li><p>logstash 和filebeat都具有日志收集功能，Filebeat更轻量，占用资源更少</p></li><li><p>logstash 具有filter功能，能过滤分析日志</p></li></ul><p>一般结构都是filebeat采集日志，然后发送到消息队列，redis，MQ中然后logstash去获取，利用filter功能过滤分析，然后存储到elasticsearch中。</p><p>FileBeat和Logstash配合，实现背压机制。</p><p><img src="C:\Users\Administrator\Downloads\wps3.jpeg" alt="wps3"></p><h1 id="Logstash-安装"><a href="#Logstash-安装" class="headerlink" title="Logstash 安装"></a>Logstash 安装</h1><h2 id="下载-Logstash"><a href="#下载-Logstash" class="headerlink" title="下载 Logstash"></a>下载 Logstash</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.elastic.co/cn/downloads/past-releases/logstash-7-6-1</span><br></pre></td></tr></table></figure><h2 id="解压-Logstash"><a href="#解压-Logstash" class="headerlink" title="解压 Logstash"></a>解压 Logstash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip logstash-7.6.1 -d /usr/local/es/</span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/es/logstash-7.6.1/</span><br><span class="line">bin/logstash -e <span class="string">&#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>-e 选项表示，直接把配置放在命令中，这样可以有效快速进行测试</p></blockquote><p>待 LogStash 启动完毕</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sending Logstash logs to /home/ELK/logStash/logstash-<span class="number">7</span><span class="variable">.6</span><span class="variable">.1</span>/logs which is now configured via log4j2<span class="variable">.properties</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">21</span>,<span class="number">419</span>][INFO ][logstash<span class="variable">.setting</span><span class="variable">.writabledirectory</span>] Creating directory &#123;:setting=&gt;<span class="string">&quot;path.queue&quot;</span>, :path=&gt;<span class="string">&quot;/home/ELK/logStash/logstash-7.6.1/data/queue&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">21</span>,<span class="number">686</span>][INFO ][logstash<span class="variable">.setting</span><span class="variable">.writabledirectory</span>] Creating directory &#123;:setting=&gt;<span class="string">&quot;path.dead_letter_queue&quot;</span>, :path=&gt;<span class="string">&quot;/home/ELK/logStash/logstash-7.6.1/data/dead_letter_queue&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">21</span>,<span class="number">943</span>][WARN ][logstash<span class="variable">.config</span><span class="variable">.source</span><span class="variable">.multilocal</span>] Ignoring the &#x27;pipelines<span class="variable">.yml</span>&#x27; file because modules <span class="keyword">or</span> command line options are specified</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">21</span>,<span class="number">954</span>][INFO ][logstash<span class="variable">.runner</span>          ] Starting Logstash &#123;<span class="string">&quot;logstash.version&quot;</span>=&gt;<span class="string">&quot;7.6.1&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">21</span>,<span class="number">974</span>][INFO ][logstash<span class="variable">.agent</span>           ] No persistent UUID file found. Generating <span class="keyword">new</span> UUID &#123;:uuid=&gt;<span class="string">&quot;ccfe7a60-a9ce-44b4-b4fc-503d8745082d&quot;</span>, :path=&gt;<span class="string">&quot;/home/ELK/logStash/logstash-7.6.1/data/uuid&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">23</span>,<span class="number">078</span>][INFO ][org<span class="variable">.reflections</span><span class="variable">.Reflections</span>] Reflections took <span class="number">42</span> ms to scan <span class="number">1</span> urls, producing <span class="number">20</span> keys <span class="keyword">and</span> <span class="number">40</span> values</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">23</span>,<span class="number">630</span>][WARN ][org<span class="variable">.logstash</span><span class="variable">.instrument</span><span class="variable">.metrics</span><span class="variable">.gauge</span><span class="variable">.LazyDelegatingGauge</span>][main] A gauge metric of an unknown <span class="keyword">type</span> (org<span class="variable">.jruby</span><span class="variable">.RubyArray</span>) has been create <span class="keyword">for</span> key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">23</span>,<span class="number">649</span>][INFO ][logstash<span class="variable">.javapipeline</span>    ][main] Starting pipeline &#123;:pipeline_id=&gt;<span class="string">&quot;main&quot;</span>, <span class="string">&quot;pipeline.workers&quot;</span>=&gt;<span class="number">2</span>, <span class="string">&quot;pipeline.batch.size&quot;</span>=&gt;<span class="number">125</span>, <span class="string">&quot;pipeline.batch.delay&quot;</span>=&gt;<span class="number">50</span>, <span class="string">&quot;pipeline.max_inflight&quot;</span>=&gt;<span class="number">250</span>, <span class="string">&quot;pipeline.sources&quot;</span>=&gt;[<span class="string">&quot;config string&quot;</span>], :thread=&gt;<span class="string">&quot;#&lt;Thread:0x63c93421 run&gt;&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">24</span>,<span class="number">342</span>][INFO ][logstash<span class="variable">.javapipeline</span>    ][main] Pipeline started &#123;<span class="string">&quot;pipeline.id&quot;</span>=&gt;<span class="string">&quot;main&quot;</span>&#125;</span><br><span class="line">The stdin plugin is now waiting <span class="keyword">for</span> <span class="keyword">input</span>:</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">24</span>,<span class="number">407</span>][INFO ][logstash<span class="variable">.agent</span>           ] Pipelines running &#123;:count=&gt;<span class="number">1</span>, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">24</span>,<span class="number">555</span>][INFO ][logstash<span class="variable">.agent</span>           ] Successfully started Logstash API endpoint &#123;:port=&gt;<span class="number">9600</span>&#125;</span><br></pre></td></tr></table></figure><p>然后，随便在控制台中输入内容，等待LogStash的输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello LogStash</span><br></pre></td></tr></table></figure><p>LogStash 输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2023-02-12T02:37:58.166Z,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;localhost.localdomain&quot;</span>,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;Hello LogStash&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> LogStash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>专题二 （FileBeat 日志收集）</title>
      <link href="/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
      <url>/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Beats 是一个开源代码的数据发送器。可以把 Beats 作为一种代理安装在服务器上，这样就可以比较方便地将数据发送到 Elasticsearch 或者 Logstash 中。Elastic Stack 提供了多种类型的 Beats 组件。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h1 id="Beats-类型"><a href="#Beats-类型" class="headerlink" title="Beats 类型"></a>Beats 类型</h1><table><thead><tr><th>数据类型</th><th>Beat 类型</th></tr></thead><tbody><tr><td>审计数据</td><td>AuditBeat</td></tr><tr><td>日志文件</td><td>FileBeat</td></tr><tr><td>云数据</td><td>FunctionBeat</td></tr><tr><td>可用性数据</td><td>HeartBeat</td></tr><tr><td>系统日志</td><td>JournalBeat</td></tr><tr><td>指标数据</td><td>MetricBeat</td></tr><tr><td>网络流量数据</td><td>PacketBeat</td></tr><tr><td>Windows 事件日志</td><td>WinlogBeat</td></tr></tbody></table><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/clipboard.png" alt="clipboard"></p><p>Beats 可以直接将数据发送到 Elasticsearch 或者发送到 LogStash，基于 LogStash 可以进一步对数据进行处理，然后将处理后的数据存入到 Elasticsearch，最后使用 Kibana 进行数据可视化。</p><h1 id="FileBeat简介"><a href="#FileBeat简介" class="headerlink" title="FileBeat简介"></a>FileBeat简介</h1><p>FileBeat 专门用于转发和手机日志数据的轻量级采集工具。它可以作为代理安装在服务器上，FileBeat 见识指定路径的日志文件，收集日志数据，并将收集到的日志转发到 Elasticsearch 或者 LogStash。</p><h1 id="FileBeat工作原理"><a href="#FileBeat工作原理" class="headerlink" title="FileBeat工作原理"></a>FileBeat工作原理</h1><p>启动FileBeat时，会启动一个或者多个输入（Input），这些Input监控指定的日志数据位置。FileBeat会针对每一个文件启动一个Harvester（收割机）。Harvester读取每一个文件的日志，将新的日志发送到libbeat，libbeat将数据收集到一起，并将数据发送给输出（Output）。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/clipboard%20(1).png" alt="clipboard (1)"></p><h1 id="安装-FIleBeat"><a href="#安装-FIleBeat" class="headerlink" title="安装 FIleBeat"></a>安装 FIleBeat</h1><p>安装FileBeat只需要将FileBeat Linux安装包上传到Linux系统，并将压缩包解压到系统就可以了。</p><p>FileBeat官方下载地址：</p><p><a href="https://www.elastic.co/cn/downloads/past-releases/filebeat-7-6-1">https://www.elastic.co/cn/downloads/past-releases/filebeat-7-6-1</a></p><p>上传FileBeat安装到Linux，并解压。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf filebeat-7.6.1-linux-x86_64.tar.gz -C /usr/local/es/</span><br></pre></td></tr></table></figure><h2 id="采集日志"><a href="#采集日志" class="headerlink" title="采集日志"></a>采集日志</h2><p>使用FileBeat采集MQ日志到ElasticSearch</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>在资料中有一个mq_server.log.tar.gz压缩包，里面包含了很多的MQ服务器日志，现在我们为了通过在Elasticsearch中快速查询这些日志，定位问题。我们需要用FileBeats将日志数据上传到Elasticsearch中。</p><p><strong>问题</strong></p><p>首先，我们要指定FileBeat采集哪些MQ日志，因为FileBeats中必须知道采集存放在哪儿的日志，才能进行采集。</p><p> 其次，采集到这些数据后，还需要指定FileBeats将采集到的日志输出到Elasticsearch，那么Elasticsearch的地址也必须指定。</p><h1 id="配置-FileBeats"><a href="#配置-FileBeats" class="headerlink" title="配置 FileBeats"></a>配置 FileBeats</h1><p>FileBeats配置文件主要分为两个部分。</p><ul><li>inputs    输入数据</li><li>output   输出数据</li></ul><h2 id="input-配置"><a href="#input-配置" class="headerlink" title="input 配置"></a>input 配置</h2><p>在 FileBeats 中，可以读取一个或多个数据源。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="comment"># &quot;-&quot; 表示可以配置多个</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span>  <span class="comment"># type表示采集的是读取每一行日志文件，还是可以配置stdin，表示从标准输入刘输入</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 启用该输入</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/log/*.log</span>  <span class="comment"># 采集日志路径</span></span><br><span class="line">    <span class="comment">#- c:\programdata\elasticsearch\logs\*</span></span><br></pre></td></tr></table></figure><h2 id="output-配置"><a href="#output-配置" class="headerlink" title="output 配置"></a>output 配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output.elasticsearch:</span>  <span class="comment"># 输出到 ElasticSearch</span></span><br><span class="line">  <span class="comment"># Array of hosts to connect to.</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;localhost:9200&quot;</span>]  <span class="comment"># ElasticSearch 的集群地址</span></span><br></pre></td></tr></table></figure><p>默认 FileBeat 会将日志数据放入到名称为 filebeat-%filebeat-%版本号%-yyyy.mm.dd 的索引中。</p><blockquote><p>FileBeats 中 filebeat.reference.yml 包含了 FileBeats 所有支持的配置选项</p></blockquote><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>创建配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/es/filebeat-7.6.1-linux-x86_64</span><br><span class="line">touch filebeat_mq_log.yml</span><br><span class="line">vim filebeat_mq_log.yml</span><br></pre></td></tr></table></figure><p>复制一下到配置文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/mq/log/server.log.*</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">    <span class="attr">hosts:</span> [<span class="string">&quot;192.168.21.130:9200&quot;</span>, <span class="string">&quot;192.168.21.131:9200&quot;</span>, <span class="string">&quot;192.168.21.132:9200&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="运行-FileBeat"><a href="#运行-FileBeat" class="headerlink" title="运行 FileBeat"></a>运行 FileBeat</h2><h3 id="启动-ES-集群"><a href="#启动-ES-集群" class="headerlink" title="启动 ES 集群"></a>启动 ES 集群</h3><p>在每个节点上执行以下命令，启动 Elasticsearch 集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> /usr/local/es/elasticsearch-7.6.1/bin/elasticsearch 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="运行-FileBeat-1"><a href="#运行-FileBeat-1" class="headerlink" title="运行 FileBeat"></a>运行 FileBeat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -c filebeat_mq_log.yml -e</span><br></pre></td></tr></table></figure><h3 id="上传日志"><a href="#上传日志" class="headerlink" title="上传日志"></a>上传日志</h3><p>将日志数据上传到 /var/mq/log，并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /var/mq/log</span><br><span class="line"><span class="built_in">cd</span> /var/mq/log</span><br><span class="line">tar -zxvf mq_server.log.tar.gz</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>通过 head 插件，我们可以看到 filebeat 采集了日志消息，并写入到 Elasticsearch 集群中。</p><h1 id="FileBeat-如何工作"><a href="#FileBeat-如何工作" class="headerlink" title="FileBeat 如何工作"></a>FileBeat 如何工作</h1><p>FileBeat 主要由 input 和 harvesters（收割机）组成。这两个组件协同工作，并将数据发送到指定的输出。</p><h2 id="inputs（输入）"><a href="#inputs（输入）" class="headerlink" title="inputs（输入）"></a>inputs（输入）</h2><p>input是负责管理Harvesters和查找所有要读取的文件的组件。如果输入类型是 log，input组件会查找磁盘上与路径描述的所有文件，并为每个文件启动一个Harvester，每个输入都独立地运行</p><h2 id="Harvesters（收割机）"><a href="#Harvesters（收割机）" class="headerlink" title="Harvesters（收割机）"></a>Harvesters（收割机）</h2><p>Harvesters负责读取单个文件的内容，它负责打开/关闭文件，并逐行读取每个文件的内容，将读取到的内容发送给输出每个文件都会启动一个Harvester，Harvester运行时，文件将处于打开状态。如果文件在读取时，被移除或者重命名，FileBeat将继续读取该文件。</p><h2 id="如何保持文件状态"><a href="#如何保持文件状态" class="headerlink" title="如何保持文件状态"></a>如何保持文件状态</h2><p>FileBeat保存每个文件的状态，并定时将状态信息保存在磁盘的「注册表」文件中，该状态记录Harvester读取的最后一次偏移量，并确保发送所有的日志数据。如果输出（Elasticsearch或者Logstash）无法访问，FileBeat会记录成功发送的最后一行，并在输出（Elasticsearch或者Logstash）可用时，继续读取文件发送数据。</p><p>在运行FileBeat时，每个input的状态信息也会保存在内存中，重新启动FileBeat时，会从「注册表」文件中读取数据来重新构建状态。</p><p>在/usr/local/es/filebeat-7.6.1-linux-x86_64/data目录中有一个Registry文件夹，里面有一个data.json，该文件中记录了Harvester读取日志的offset。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%88%AA%E5%9B%BE.png" alt="截图"></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> FileBeat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 专题一 （IK分词器源码升级改造实现热更新机制）</title>
      <link href="/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/"/>
      <url>/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> IK 分词器源码下载：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><blockquote><p>本案例以 ES7.6.1 和 Mysql 数据库 5.7 为例进行配置</p></blockquote><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h3 id="修改源码步骤"><a href="#修改源码步骤" class="headerlink" title="修改源码步骤"></a>修改源码步骤</h3><p>1 修改 maven 依赖的 es 版本号</p><p>使用工具打开 IK 源码后，打开 pom.xml 文件，修改 elasticsearch 版本号为 7.6.1</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.6.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 引入 MySQL 驱动到项目中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3 开始修改源码</p><p>在项目中找到 Dictionary 类，找到 Dictionary 单例类的初始化方法 initial 方法，在初始化方法中新启动一个线程，用来执行远程词库的热更新，在修改之前，先在 Dictionary 类同目录下新建一个类 HotDictReloadThread，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotDictReloadThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> ESPluginLoggerFactory.getLogger(</span><br><span class="line">        HotDictReloadThread.class.getName()</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initial</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;正在调用 HotDictReloadThread...&quot;</span>);</span><br><span class="line">            Dictionary.getSingleton().reLoadMainDict();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码含义为：获取字典单实例，并执行它的 reLoadMainDict 方法。</p><p>完成上述操作后，就开始修改 initial 方法，改动如下，创建上面新建的类并调用它的 initial 方法，从而执行 DIctionary 类的 reLoadMainDict 方法；改动代码如下，在字典实例初始化完成后新奇一个线程来执行字典的热更新操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新启动一个线程用来加载数据库</span></span><br><span class="line">pool.execute(() -&gt; <span class="keyword">new</span> <span class="title class_">HotDictReloadThread</span>().initial());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 词典初始化 由于IK Analyzer的词典采用Dictionary类的静态方法进行词典初始化</span></span><br><span class="line"><span class="comment"> * 只有当Dictionary类被实际调用时，才会开始载入词典， 这将延长首次分词操作的时间 该方法提供了一</span></span><br><span class="line"><span class="comment"> * 个在应用加载阶段就初始化字典的手段</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Dictionary</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">initial</span><span class="params">(Configuration cfg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Dictionary.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                singleton = <span class="keyword">new</span> <span class="title class_">Dictionary</span>(cfg);</span><br><span class="line">                singleton.loadMainDict();</span><br><span class="line">                singleton.loadSurnameDict();</span><br><span class="line">                singleton.loadQuantifierDict();</span><br><span class="line">                singleton.loadSuffixDict();</span><br><span class="line">                singleton.loadPrepDict();</span><br><span class="line">                singleton.loadStopWordDict();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 新启动一个线程用来加载数据库</span></span><br><span class="line">                pool.execute(() -&gt; <span class="keyword">new</span> <span class="title class_">HotDictReloadThread</span>().initial());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(cfg.isEnableRemoteDict())&#123;</span><br><span class="line">                    <span class="comment">// 建立监控线程</span></span><br><span class="line">                    <span class="keyword">for</span> (String location : singleton.getRemoteExtDictionarys()) &#123;</span><br><span class="line">                        <span class="comment">// 10 秒是初始延迟可以修改的 60是间隔时间 单位秒</span></span><br><span class="line">                        pool.scheduleAtFixedRate(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Monitor</span>(location), <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (String location : singleton.getRemoteExtStopWordDictionarys()) </span><br><span class="line">                    &#123;</span><br><span class="line">                        pool.scheduleAtFixedRate(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Monitor</span>(location), <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 reLoadMainDict 方法中，可以看到有 2 个方法：</p><ul><li>tmpDict.loadMainDict()    维护的是扩展词库</li><li>tmpDict.loadStopWordDict()维护的是停用词库</li></ul><p>先看对扩展词库的维护。</p><p>在方法 tmpDict.loadMainDict() 中，在最后一行加载远程自定义词库后面新增一个方法 this.loadMySQLExtDict()，用于加载 MySQL 词库，在加载 MySQL 词库之前，需要先准备下 MySQL 相关的配置以及 SQL 语句；在数据库中新建一张表，用户维护扩展词和停用词，表结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `es_lexicon`  (</span><br><span class="line">  `lexicon_id` bigint(8) NOT NULL AUTO_INCREMENT COMMENT &#x27;词库id&#x27;,</span><br><span class="line">  `lexicon_text` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT &#x27;词条关键词&#x27;,</span><br><span class="line">  `lexicon_type` int(1) NOT NULL DEFAULT 0 COMMENT &#x27;0扩展词库 1停用词库&#x27;,</span><br><span class="line">  `lexicon_status` int(1) NOT NULL DEFAULT 0 COMMENT &#x27;词条状态 0正常 1暂停使用&#x27;,</span><br><span class="line">  `del_flag` int(1) NOT NULL DEFAULT 0 COMMENT &#x27;作废标志 0正常 1作废&#x27;,</span><br><span class="line">  `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`lexicon_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &#x27;ES远程扩展词库表&#x27; ROW_FORMAT = Dynamic;</span><br></pre></td></tr></table></figure><p>然后我们在项目的根路径的config目录下新建配置文件jdbc-reload.properties，内容如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库地址</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=GMT&amp;autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useAffectedRows=true&amp;useSSL=false</span></span><br><span class="line"><span class="comment"># 数据库用户名</span></span><br><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"># 数据库查询扩展词库sql语句</span></span><br><span class="line"><span class="attr">jdbc.reload.sql</span>=<span class="string">select gel.lexicon_text as word from es_lexicon gel where gel.lexicon_type = 0 and gel.lexicon_status = 0 and gel.del_flag = 0 order by gel.lexicon_id desc </span></span><br><span class="line"><span class="comment"># 数据库查询停用词sql语句</span></span><br><span class="line"><span class="attr">jdbc.reload.stopword.sql</span>=<span class="string">select gel.lexicon_text as word from ges_lexicon gel where gel.lexicon_type = 1 and gel.lexicon_status = 0 and gel.del_flag = 0 order by gel.lexicon_id desc </span></span><br><span class="line"><span class="comment"># 数据库查询间隔时间 每隔10秒请求一次</span></span><br><span class="line"><span class="attr">jdbc.reload.interval</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure><p>完成了这些基础配置之后，我们再一同看看关于同步MySql词库的方法loadMySQLExtDict()；代码较长，粘贴如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从MySql中加载动态词库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadMySQLExtDict</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="type">Path</span> <span class="variable">file</span> <span class="operator">=</span> PathUtils.get(getDictRoot(), <span class="string">&quot;jdbc-reload.properties&quot;</span>);</span><br><span class="line">     props.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file.toFile()));</span><br><span class="line"></span><br><span class="line">     logger.info(<span class="string">&quot;[==========]jdbc-reload.properties&quot;</span>);</span><br><span class="line">     <span class="keyword">for</span>(Object key : props.keySet()) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;[==========]&quot;</span> + key + <span class="string">&quot;=&quot;</span> + props.getProperty(String.valueOf(key)));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     logger.info(<span class="string">&quot;[==========]query hot dict from mysql, &quot;</span> + props.getProperty(<span class="string">&quot;jdbc.reload.sql&quot;</span>) + <span class="string">&quot;......&quot;</span>);</span><br><span class="line"><span class="comment">//       Class.forName(props.getProperty(&quot;jdbc.className&quot;));</span></span><br><span class="line">     conn = DriverManager.getConnection(</span><br><span class="line">           props.getProperty(<span class="string">&quot;jdbc.url&quot;</span>),</span><br><span class="line">           props.getProperty(<span class="string">&quot;jdbc.user&quot;</span>),</span><br><span class="line">           props.getProperty(<span class="string">&quot;jdbc.password&quot;</span>));</span><br><span class="line">     stmt = conn.createStatement();</span><br><span class="line">     rs = stmt.executeQuery(props.getProperty(<span class="string">&quot;jdbc.reload.sql&quot;</span>));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">theWord</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;[==========]正在加载Mysql自定义IK扩展词库词条: &quot;</span> + theWord);</span><br><span class="line">        _MainDict.fillSegment(theWord.trim().toCharArray());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Thread.sleep(Integer.valueOf(String.valueOf(props.get(<span class="string">&quot;jdbc.reload.interval&quot;</span>))) * <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     logger.error(<span class="string">&quot;erorr&quot;</span>, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     <span class="keyword">if</span>(rs != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           logger.error(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           logger.error(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           logger.error(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，通过加载配置文件，获取数据库连接，执行扩展词sql，将结果集添加到扩展词库中；</p><p>同理，同步MySql停用词的逻辑也是一样的，这里我直接把代码粘贴过来；停用词方法调用顺序为tmpDict.loadStopWordDict()，在方法后面，新增一个方法调用this.loadMySQLStopwordDict()，新方法中处理通用词逻辑，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 从MySql中加载远程停用词库</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadMySQLStopwordDict</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="type">Path</span> <span class="variable">file</span> <span class="operator">=</span> PathUtils.get(getDictRoot(), <span class="string">&quot;jdbc-reload.properties&quot;</span>);</span><br><span class="line">     props.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file.toFile()));</span><br><span class="line"></span><br><span class="line">     logger.info(<span class="string">&quot;[==========]jdbc-reload.properties&quot;</span>);</span><br><span class="line">     <span class="keyword">for</span>(Object key : props.keySet()) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;[==========]&quot;</span> + key + <span class="string">&quot;=&quot;</span> + props.getProperty(String.valueOf(key)));</span><br><span class="line">     &#125;</span><br><span class="line">     logger.info(<span class="string">&quot;[==========]query hot stopword dict from mysql, &quot;</span> + props.getProperty(<span class="string">&quot;jdbc.reload.stopword.sql&quot;</span>) + <span class="string">&quot;......&quot;</span>);</span><br><span class="line"><span class="comment">//       Class.forName(props.getProperty(&quot;jdbc.className&quot;));</span></span><br><span class="line">     conn = DriverManager.getConnection(</span><br><span class="line">           props.getProperty(<span class="string">&quot;jdbc.url&quot;</span>),</span><br><span class="line">           props.getProperty(<span class="string">&quot;jdbc.user&quot;</span>),</span><br><span class="line">           props.getProperty(<span class="string">&quot;jdbc.password&quot;</span>));</span><br><span class="line">     stmt = conn.createStatement();</span><br><span class="line">     rs = stmt.executeQuery(props.getProperty(<span class="string">&quot;jdbc.reload.stopword.sql&quot;</span>));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">theWord</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;[==========]正在加载Mysql自定义IK停用词库词条: &quot;</span> + theWord);</span><br><span class="line">        _StopWords.fillSegment(theWord.trim().toCharArray());</span><br><span class="line">     &#125;</span><br><span class="line">     Thread.sleep(Integer.valueOf(String.valueOf(props.get(<span class="string">&quot;jdbc.reload.interval&quot;</span>))) * <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     logger.error(<span class="string">&quot;erorr&quot;</span>, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     <span class="keyword">if</span>(rs != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           logger.error(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           logger.error(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           logger.error(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成这些，整体代码改造完毕；在上述代码中，有很多的地方是可以进一步优化的，比如扩展词和停用词的大量重复代码，以及读取本地配置文件项可以做到只读取一次等，这个大家可以自行优化；</p><p>完成了这些之后，我们就可以开始打包插件了；直接使用maven package命令进行打包，在target/releases/elasticsearch-analysis-ik-7.8.0.zip文件，我们将Mysql驱动mysql-connector-java.jar也放到这个压缩包里面；</p><p><strong>安装插件</strong></p><p>完成上述步骤后，拿到elasticsearch-analysis-ik-7.8.0.zip插件，我们将其放在ES安装目录下的plugins目录下，新建一个ik文件夹，将其解压到ik文件夹下；目录结构大概如下，记得要有MySql驱动mysql-connector-java.jar</p><p><img src="https://pic1.zhimg.com/80/v2-73f17eaa457c573eaff75a112faca3b8_720w.webp" alt="img"></p><p>完成上述步骤后，我们就可以启动ES了，在启动过程中，可以看到关于IK热更新MySql词库相关的日志输出；在实际过程中，可能会报很多的异常，下面是我所遇到的一些问题以及解决方案；</p><p><strong>常见问题</strong></p><p><strong>1、异常1</strong>：java.sql.SQLException: Column ‘word’ not found.</p><p>此异常是因为编写sql时，查询的数据库字段需要起别名为 word，修改一下sql即可解决这个问题；</p><p><strong>2、异常2</strong>：Could not create connection to database server</p><p>此异常通常是因为引用的mysql驱动和mysql版本号不一致导致的，只需要替换成对应的版本号即可解决，另外，数据库连接我们不需要再额外的去配置显示加载，即不需要写 Class.forName(props.getProperty(“jdbc.className”));</p><p><strong>3、异常3</strong>：no suitable driver found for jdbc:mysql://…</p><p>此异常我们需要在环境的JDK安装目录的jre\lib\ext目录下添加mysql驱动mysql-connector-java.jar；比如我本地的是C:\Java\jdk_8u_231\jre\lib\ext 目录，服务器上是/data/jdk1.8.0_181/jre/lib/ext</p><p><strong>4、异常4</strong>：AccessControlException: access denied (“java.net.SocketPermission” “127.0.0.1:3306” “connect,resolve”)</p><p>这个异常，我们修改jdk安装路径下的C:\Java\jdk_8u_231\jre\lib\security目录下的文件<strong>java.policy</strong>，在下面新增一行即可解决</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permission java.net.SocketPermission &quot;*&quot;, &quot;connect,resolve&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-67909acb527460a226b09072e3f6d3bd_720w.webp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> ELK </tag>
            
            <tag> IK 分词器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK Beats 进阶专题</title>
      <link href="/2023/02/12/ELK/ELK%20Beats%20%E8%BF%9B%E9%98%B6%E4%B8%93%E9%A2%98/"/>
      <url>/2023/02/12/ELK/ELK%20Beats%20%E8%BF%9B%E9%98%B6%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本节为ELK（Elasticsearch、LogStash、Kibana）进阶实战</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小流量商品架构</title>
      <link href="/2023/02/12/%E5%B0%8F%E6%B5%81%E9%87%8F%E5%95%86%E5%93%81%E6%9E%B6%E6%9E%84/"/>
      <url>/2023/02/12/%E5%B0%8F%E6%B5%81%E9%87%8F%E5%95%86%E5%93%81%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%B0%8F%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84-%E5%AF%BC%E5%87%BA.png" alt="小流量架构-导出"></p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><ul><li><p>商品数量：1000</p></li><li><p>模板数量：1</p></li><li><p>静态页面：1000 * 机房（服务）数量</p></li><li><p>小米商城、华为商城等</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>亿级流量商品架构专题</title>
      <link href="/2023/02/12/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E5%95%86%E5%93%81%E6%9E%B6%E6%9E%84%E4%B8%93%E9%A2%98/"/>
      <url>/2023/02/12/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E5%95%86%E5%93%81%E6%9E%B6%E6%9E%84%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是亿级流量商品架构专题，基于Spring Alibaba Cloud微服务，结合了<code>ELK</code>日志收集系统、<code>Skywalking</code>链路追踪等热门技术框架。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="">小流量商品架构</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/11/hello-world/"/>
      <url>/2023/02/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>亿级流量架构</title>
      <link href="/2023/02/10/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E5%95%86%E5%93%81%E6%9E%B6%E6%9E%84/"/>
      <url>/2023/02/10/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E5%95%86%E5%93%81%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="小流量商品架构"><a href="#小流量商品架构" class="headerlink" title="小流量商品架构"></a>小流量商品架构</h1><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%B0%8F%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84-%E5%AF%BC%E5%87%BA.png" alt="小流量架构-导出"></p><p>适用范围：</p><ul><li><p>商品数量：1000</p></li><li><p>模板数量：1</p></li><li><p>静态页面：1000 * 机房（服务）数量</p></li><li><p>小米商城、华为商城等</p></li></ul><h2 id="页面静态化"><a href="#页面静态化" class="headerlink" title="页面静态化"></a>页面静态化</h2><p>使用<code>FreeMarker</code>模板引擎。基于模板和数据源生成输出文本（HTML网页、配置文件）。</p><p><code>pom</code> 引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMarkTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 第一步：创建一个Configuration对象，直接new一个对象。构造方法的参数就是freemarker对于的版本号。</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(Configuration.getVersion());</span><br><span class="line">        <span class="comment">// 第二步：设置模板文件所在的路径。</span></span><br><span class="line">        configuration.setDirectoryForTemplateLoading(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;G:\\tuling\\ftl&quot;</span>));</span><br><span class="line">        <span class="comment">// 第三步：设置模板文件使用的字符集。一般就是utf-8.</span></span><br><span class="line">        configuration.setDefaultEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 第四步：加载一个模板，创建一个模板对象。</span></span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> configuration.getTemplate(<span class="string">&quot;test.ftl&quot;</span>);</span><br><span class="line">        <span class="comment">// 第五步：创建一个模板使用的数据集，可以是pojo也可以是map。一般是Map。</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">dataModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//向数据集中添加数据</span></span><br><span class="line">        dataModel.put(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;monkey老师2021年6月6日21:21:08&quot;</span>);</span><br><span class="line">        <span class="comment">// 第六步：创建一个Writer对象，一般创建一FileWriter对象，指定生成的文件名。</span></span><br><span class="line">        <span class="type">Writer</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;G:\\tuling\\ftl\\test.html&quot;</span>));</span><br><span class="line">        <span class="comment">// 第七步：调用模板对象的process方法输出文件。</span></span><br><span class="line">        template.process(dataModel, out);</span><br><span class="line">        <span class="comment">// 第八步：关闭流。</span></span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="架构方案的问题"><a href="#架构方案的问题" class="headerlink" title="架构方案的问题"></a>架构方案的问题</h2><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p>数据新增分增量和全量数据，商品需要进行静态化。新增的商品静态化数据如何同步？</p><p>不同的应用部署在不同服务器甚至在不同的机房和国家。</p><p><strong>（1）通过网络同步的方式</strong></p><p>其中一台服务器静态话后，把文件同步到其它应用服务器上。比如 <code>linux</code> 的 <code>scp</code> 命令。</p><p>方法可行，但问题较多，有多少个节点就需要同步多少份，等于是商品数量 * 服务器。</p><p>不是最优。</p><h5 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h5><p>可以在每个应用使用定时任务，分别去执行数据可需要静态化的数据即可。</p><p>可以解决1中数据同步问题。因为所有的任务都是在本机运行，不需要数据同步。</p><p>弊端是无法避免不同的服务器跑的数据不能重复，也就是 <code>A</code> 和 <code>B</code> 定时任务都跑了一份商品。（比较直观的就是上锁）</p><h5 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h5><p>使用消息中间件来解决。订阅 <code>topic</code> 然后生成当前服务器静态化的页面。</p><h5 id="1-2-2-数据更新"><a href="#1-2-2-数据更新" class="headerlink" title="1.2.2 数据更新"></a>1.2.2 数据更新</h5><p>​    <code>FreeMarker</code> 生成的数据都是按模板生产好的。</p><ul><li><p>如果修改了模板，就需要重新生成静态化文件，牵一发而动全身</p></li><li><p>如果后台数据有变更，如何即使同步到其它服务器？</p></li></ul><h4 id="1-3-后台优化"><a href="#1-3-后台优化" class="headerlink" title="1.3 后台优化"></a>1.3 后台优化</h4><h5 id="1-3-1-引入缓存"><a href="#1-3-1-引入缓存" class="headerlink" title="1.3.1 引入缓存"></a>1.3.1 引入缓存</h5><p>将商品详情加入 <code>redis</code> 缓存，这样第二次请求同一个商品，无需再查数据库，直接从<code> redis</code> 缓存中获取，<strong>减少磁盘IO</strong>。</p><h6 id="redis-工具类"><a href="#redis-工具类" class="headerlink" title="redis 工具类"></a>redis 工具类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisOpsUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key,Object value)</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> timeout, TimeUnit unit)</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key,value,timeout,unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setIfAbsent</span><span class="params">(String key, Object value, <span class="type">long</span> timeout, TimeUnit unit)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().setIfAbsent(key,value,timeout,unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">get</span><span class="params">(String key,Class&lt;?&gt; T)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T)redisTemplate</span><br><span class="line">                .opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) redisTemplate</span><br><span class="line">                .opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate</span><br><span class="line">                .opsForValue().decrement(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key,<span class="type">long</span> delta)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate</span><br><span class="line">                .opsForValue().decrement(key,delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate</span><br><span class="line">                .opsForValue().increment(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key,<span class="type">long</span> delta)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate</span><br><span class="line">                .opsForValue().increment(key,delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品加入缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的商品</span></span><br><span class="line">...</span><br><span class="line">    redsiOpsUtil.set(商品ID, 商品信息);</span><br></pre></td></tr></table></figure><h6 id="缓存数据一致性"><a href="#缓存数据一致性" class="headerlink" title="缓存数据一致性"></a>缓存数据一致性</h6><p>（1）<strong>最终一致性方案</strong></p><p>设置超时时间来解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redisOpsUtil.set(RedisKeyPrefixConst.PRODUCT_DETAIL_CACHE+id,productInfo,<span class="number">360</span>,T</span><br><span class="line">imeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>（2）<strong>实时一致性方案</strong></p><p><strong>后续会讲到</strong>（交易 canal binlog）</p><h5 id="1-3-2-问题"><a href="#1-3-2-问题" class="headerlink" title="1.3.2 问题"></a>1.3.2 问题</h5><ol><li><p>提高请求的吞吐量，除了减少磁盘IO，还有网络IO。我们还可以发现，请求 redis 其实也会涉及到网络IO，我们所有的请求都需要走 6379 端口。</p></li><li><p>高并发</p><p>预期的 set 一次 redis，但实际是多次，并发问题。</p><p>分布式锁：redis、zookeeper</p></li><li><p>压缩（减少内存）</p><p>序列化转成字符串</p></li></ol><h4 id="1-4-加入分布式锁"><a href="#1-4-加入分布式锁" class="headerlink" title="1.4 加入分布式锁"></a>1.4 加入分布式锁</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;!‐‐加入redisson‐‐&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>原理</strong>：使用的 <code>setnx</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETNX key value</span><br></pre></td></tr></table></figure><p><code>setnx</code> 是 <code>SET if NOT EXISTS</code>（如果不存在，则 <code>SET</code>）的简写。</p><ul><li>不存在    <code>SET</code> 成功，则返回 <code>int 1</code></li><li>存在       <code>SET</code> 失败，则返回 <code>int 0</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">    config.useSingleServer()</span><br><span class="line">       .setAddress(<span class="string">&quot;redis://tlshop.com:6379&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示例</p><p>（1）<code>lock()</code> 粗暴上锁，但所有的线程都会去获取锁，需使用双检锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取缓存</span></span><br><span class="line">...</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(lockPath + id);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="comment">// 调用本方法，再次获取缓存 (双重检测)</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 业务代码</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>简单粗暴</li><li>等待时间为 0</li></ul><p><strong>缺点</strong></p><ul><li><p>所有线程都需要<strong>串行化</strong>获取锁（与高并发环境违背）</p></li><li><p>使用<strong>双检锁</strong>，需要访问<strong>两次</strong> redis 缓存（<strong>网络 IO</strong>）</p></li></ul><p><code>tryLock()</code> 尝试获得锁，如果上锁失败那么就从缓存中取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取缓存</span></span><br><span class="line">...</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(lockPath + id);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(lock.tryLock(<span class="number">0</span>, <span class="number">5</span>, SECONDS))&#123;</span><br><span class="line">        <span class="comment">// 业务代码</span></span><br><span class="line">    ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 递归调用本方法，获取缓存</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 判断当前是否有锁（tryLock 可能失败，没有获取到锁，故可能释放锁失败）</span></span><br><span class="line">    <span class="keyword">if</span> (lock.isLocked()) &#123;</span><br><span class="line">        <span class="comment">// 判断占有锁的是否为当前线程</span></span><br><span class="line">        <span class="keyword">if</span> (lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意点</strong></p><p><code>tryLock()</code>无参时，会存在默认的续命时间，线程会等待默认时间再次获取锁.</p><p>在此处，需要将续命时间设置为 <code>0</code>，同时将锁设置固定时间 <code>5</code> 秒，如果当前线程在 <code>5</code> 秒内未执行完，将由下一个线程执行。</p><p><strong>优点</strong></p><ul><li>只需要获取<strong>一次</strong> <code>redis</code> 缓存（<strong>网络 IO</strong>）</li><li>线程不需要串行化获取锁</li></ul><p><strong>缺点</strong></p><ul><li>使用 <strong>sleep</strong> ，总会有一个线程存在<strong>等待时间</strong></li></ul><p>缓存引用场景</p><ol><li>访问量大、<code>QPS</code>高、更新频率不是很高的业务</li><li>数据一致性要求不高</li></ol><h4 id="1-5-缓存不足"><a href="#1-5-缓存不足" class="headerlink" title="1.5 缓存不足"></a>1.5 缓存不足</h4><h5 id="1-5-1-缓存击穿（热点数据单个key）"><a href="#1-5-1-缓存击穿（热点数据单个key）" class="headerlink" title="1.5.1 缓存击穿（热点数据单个key）"></a>1.5.1 缓存击穿（热点数据单个key）</h5><p>对于一些设置过期时间的 <code>key</code>，如果这些 <code>key</code> 可能再某些时间点被超高并发的访问，是一种非常“热点”的数据。此时，需要考虑缓存被“击穿”的问题。</p><p>与<strong>缓存雪崩</strong>的区别：</p><p>这里针对某一个 <code>key</code> 的缓存，雪崩是多个 <code>key</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF-%E5%AF%BC%E5%87%BA.png" alt="缓存击穿-导出"></p><p><strong>解决方案</strong></p><ol><li><p><strong>加锁</strong></p><p>在未命中缓存时，通过加锁避免大量请求访问数据库。</p></li><li><p><strong>不允许过期</strong></p><p>物理不过期，也就是不设置过期时间。而是逻辑上定时在后台异步的更新数据。</p></li><li><p><strong>采用二级缓存</strong></p><p><code>L1</code> 缓存失效时间短，<code>L2</code> 缓存失效时间长。请求优先从 <code>L1</code> 缓存获取数据，如果未命中，则加锁。保证只有一个线程去数据库中读取数据，然后再更新到 <code>L1</code> 和 <code>L2</code> 中。其它线程依然再 <code>L2</code> 缓存获取数据。</p></li></ol><h5 id="1-5-2-缓存穿透（恶意攻击、访问不存在的数据）"><a href="#1-5-2-缓存穿透（恶意攻击、访问不存在的数据）" class="headerlink" title="1.5.2 缓存穿透（恶意攻击、访问不存在的数据）"></a>1.5.2 缓存穿透（恶意攻击、访问不存在的数据）</h5><p>缓存穿透是指查询一个一定不存在的数据，由于缓存时不命中时杯中写的，并且处于容错考虑，如果从存储层查询不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能 <code>DB</code> 就挂掉了。如果有人利用不存在的 <code>key</code> 频繁攻击我们的应用，这就是漏洞。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F-%E5%AF%BC%E5%87%BA.png" alt="缓存穿透-导出"></p><p><strong>解决方案</strong></p><p>有很多种方法可以有效解决缓存穿透问题</p><ol><li><p>布隆过滤器</p><p>最常用，将所有可能存在的数据哈希到一个足够大的 <code>BitMap</code> 中，一个一定不存在的数据会被 <code>BitMap</code> 拦截掉，从而避免了对底层存储系统的查询压力。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8-%E5%AF%BC%E5%87%BA.png" alt="布隆过滤器-导出"></p></li><li><p>缓存空数据</p><p>简单粗暴。如果一个查询返回的数据为空（不管是数据不存在还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过 <code>5</code> 分钟。</p></li></ol><h5 id="1-5-3-缓存雪崩（同一时间失效，并发量大）"><a href="#1-5-3-缓存雪崩（同一时间失效，并发量大）" class="headerlink" title="1.5.3 缓存雪崩（同一时间失效，并发量大）"></a>1.5.3 缓存雪崩（同一时间失效，并发量大）</h5><p>在设置缓存时，采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到 <code>DB</code>，<code>DB</code>瞬时压力过重雪崩。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9-%E5%AF%BC%E5%87%BA.png" alt="缓存雪崩-导出"></p><p><strong>解决方案</strong></p><ol><li><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕。大多数系统设计者考虑用加锁或者队列的方式保证缓存的单线程（进程）写，从而避免失效时大量的并发请求落到底层存储系统上。</p><p>这里分享一个简单方案就是：将缓存失效时间分散开。比如可以在原有的失效时间基础上增加一个随机值，比如<code>1~5分钟</code>随机。这样每个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p></li><li><p>事前</p><p>这种方案就是在发生雪崩前对缓存集群实现高可用，如果是使用 <code>Redis</code>，可以使用 <strong>主从 + 哨兵</strong>，<strong>Redis Cluster</strong> 来避免 <code>Redis</code> 全盘崩溃的情况。</p></li><li><p>事中</p><p>使用 Hystrix 进行<strong>限流 &amp; 降级</strong>。比如一秒来了 <code>5000</code> 个请求，可以设置假设只能有一秒 <code>2000</code> 个请求能通过这个组件，那么其他剩余的 3000 请求就会走限流逻辑。人啊后驱调用我们自己开发的降级组件（降级）。比如设置一些默认值等，以此来保护最后的 <code>MySQL</code> 不会被大量的请求给打死。</p></li><li><p>事后</p><p>开启 <strong>Redis 持久化</strong>机制，尽快恢复缓存集群</p></li></ol><h5 id="1-5-4-缓存和数据库双写一致性"><a href="#1-5-4-缓存和数据库双写一致性" class="headerlink" title="1.5.4 缓存和数据库双写一致性"></a>1.5.4 缓存和数据库双写一致性</h5><p>一致性问题是分布式常见问题，可以分为最终一致性和强一致性。数据库和缓存双写，就必然会存在不一致的问题。</p><h4 id="1-6-本地缓存"><a href="#1-6-本地缓存" class="headerlink" title="1.6 本地缓存"></a>1.6 本地缓存</h4><p>网站的性能好与坏，<strong>网络 IO</strong> 和<strong>磁盘 IO</strong> 这两部分影响是比较大的。</p><p>我们现在引入缓存的目的就是提网站的性能。其实本质是不走磁盘走内存减少<strong>磁盘 IO</strong> 来提高性能。</p><p>但是引入 <code>redis</code> 后，同时也增加了<strong>网络 IO</strong>。那么就用到了本地缓存。</p><p>本地缓存不推荐 <code>ConcurrentHashMap</code>。因为它没有过期机制，需要自己实现。</p><h4 id="1-7-Guava-缓存"><a href="#1-7-Guava-缓存" class="headerlink" title="1.7 Guava 缓存"></a>1.7 Guava 缓存</h4><p><code>pom</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>guava</code> 缓存作为<strong>一级缓存</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalCache</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String,PmsProductParam&gt; localCache = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        localCache = CacheBuilder.newBuilder()</span><br><span class="line">                <span class="comment">//设置本地缓存容器的初始容量</span></span><br><span class="line">                .initialCapacity(<span class="number">10</span>)</span><br><span class="line">                <span class="comment">//设置本地缓存的最大容量</span></span><br><span class="line">                .maximumSize(<span class="number">500</span>)</span><br><span class="line">                <span class="comment">//设置写缓存后多少秒过期</span></span><br><span class="line">                .expireAfterWrite(<span class="number">60</span>, TimeUnit.SECONDS).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLocalCache</span><span class="params">(String key,PmsProductParam object)</span>&#123;</span><br><span class="line">        localCache.put(key,object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PmsProductParam <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> localCache.getIfPresent(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置最大容量</li><li>初始化容量</li><li>缓存过期</li></ul><p>两层缓存：本地缓存 + <code>redis</code> 缓存</p><h4 id="1-8-布隆过滤器"><a href="#1-8-布隆过滤器" class="headerlink" title="1.8 布隆过滤器"></a>1.8 布隆过滤器</h4><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8-%E5%AF%BC%E5%87%BA.png" alt="布隆过滤器-导出"></p><h5 id="1-8-1-存储"><a href="#1-8-1-存储" class="headerlink" title="1.8.1 存储"></a>1.8.1 存储</h5><p>应用在加载时，将数据加入布隆过滤器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterConfig</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PmsProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BloomFilterHelper&lt;String&gt; <span class="title function_">initBloomFilterHelper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BloomFilterHelper</span>&lt;&gt;((Funnel&lt;String&gt;) (from, into) -&gt; into.putString(from, Charsets.UTF_8)</span><br><span class="line">                .putString(from, Charsets.UTF_8), <span class="number">1000000</span>, <span class="number">0.01</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 布隆过滤器bean注入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BloomRedisService <span class="title function_">bloomRedisService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">BloomRedisService</span> <span class="variable">bloomRedisService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BloomRedisService</span>();</span><br><span class="line">        bloomRedisService.setBloomFilterHelper(initBloomFilterHelper());</span><br><span class="line">        bloomRedisService.setRedisTemplate(template);</span><br><span class="line">        <span class="keyword">return</span> bloomRedisService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        List&lt;Long&gt; list = productService.getAllProductId();</span><br><span class="line">        log.info(<span class="string">&quot;加载产品到布隆过滤器当中,size:&#123;&#125;&quot;</span>,list.size());</span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">            list.stream().forEach(item-&gt;&#123;</span><br><span class="line">                <span class="comment">//LocalBloomFilter.put(item);</span></span><br><span class="line">                bloomRedisService().addByBloomFilter(RedisKeyPrefixConst.PRODUCT_REDIS_BLOOM_FILTER,item+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-8-2-拦截匹配"><a href="#1-8-2-拦截匹配" class="headerlink" title="1.8.2 拦截匹配"></a>1.8.2 拦截匹配</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BloomRedisService bloomRedisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">currentUrl</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">PathMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">        <span class="comment">//解析出pathvariable</span></span><br><span class="line">        Map&lt;String, String&gt; pathVariable = matcher.extractUriTemplateVariables(<span class="string">&quot;/pms/productInfo/&#123;id&#125;&quot;</span>, currentUrl);</span><br><span class="line">        <span class="comment">//布隆过滤器存储在redis中</span></span><br><span class="line">        <span class="keyword">if</span>(bloomRedisService.includeByBloomFilter(RedisKeyPrefixConst.PRODUCT_REDIS_BLOOM_FILTER,pathVariable.get(<span class="string">&quot;id&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 存储在本地jvm布隆过滤器中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*if(LocalBloomFilter.match(pathVariable.get(&quot;id&quot;)))&#123;</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 不在本地布隆过滤器当中，直接返回验证失败</span></span><br><span class="line"><span class="comment">         * 设置响应头</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(CommonResult.validateFailed(<span class="string">&quot;产品不存在!&quot;</span>));</span><br><span class="line">        response.getWriter().print(result);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-8-3-服务层"><a href="#1-8-3-服务层" class="headerlink" title="1.8.3 服务层"></a>1.8.3 服务层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomRedisService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BloomFilterHelper bloomFilterHelper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBloomFilterHelper</span><span class="params">(BloomFilterHelper bloomFilterHelper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bloomFilterHelper = bloomFilterHelper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRedisTemplate</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据给定的布隆过滤器添加值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">addByBloomFilter</span><span class="params">(String key, T value)</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(bloomFilterHelper != <span class="literal">null</span>, <span class="string">&quot;bloomFilterHelper不能为空&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] offset = bloomFilterHelper.murmurHashOffset(value);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : offset) &#123;</span><br><span class="line">            redisTemplate.opsForValue().setBit(key, i, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据给定的布隆过滤器判断值是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">includeByBloomFilter</span><span class="params">(String key, T value)</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(bloomFilterHelper != <span class="literal">null</span>, <span class="string">&quot;bloomFilterHelper不能为空&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] offset = bloomFilterHelper.murmurHashOffset(value);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : offset) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!redisTemplate.opsForValue().getBit(key, i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-8-4-工具类"><a href="#1-8-4-工具类" class="headerlink" title="1.8.4 工具类"></a>1.8.4 工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 算法过程：</span></span><br><span class="line"><span class="comment"> * 1. 首先需要k个hash函数，每个函数可以把key散列成为1个整数</span></span><br><span class="line"><span class="comment"> * 2. 初始化时，需要一个长度为n比特的数组，每个比特位初始化为0</span></span><br><span class="line"><span class="comment"> * 3. 某个key加入集合时，用k个hash函数计算出k个散列值，并把数组中对应的比特位置为1</span></span><br><span class="line"><span class="comment"> * 4. 判断某个key是否在集合时，用k个hash函数计算出k个散列值，并查询数组中对应的比特位，如果所有的比特位都是1，认为在集合中。</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterHelper</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numHashFunctions;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bitSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Funnel&lt;T&gt; funnel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BloomFilterHelper</span><span class="params">(Funnel&lt;T&gt; funnel, <span class="type">int</span> expectedInsertions, <span class="type">double</span> fpp)</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(funnel != <span class="literal">null</span>, <span class="string">&quot;funnel不能为空&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.funnel = funnel;</span><br><span class="line">        <span class="comment">// 计算bit数组长度</span></span><br><span class="line">        bitSize = optimalNumOfBits(expectedInsertions, fpp);</span><br><span class="line">        <span class="comment">// 计算hash方法执行次数</span></span><br><span class="line">        numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, bitSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] murmurHashOffset(T value) &#123;</span><br><span class="line">        <span class="type">int</span>[] offset = <span class="keyword">new</span> <span class="title class_">int</span>[numHashFunctions];</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">hash64</span> <span class="operator">=</span> Hashing.murmur3_128().hashObject(value, funnel).asLong();</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash1</span> <span class="operator">=</span> (<span class="type">int</span>) hash64;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash2</span> <span class="operator">=</span> (<span class="type">int</span>) (hash64 &gt;&gt;&gt; <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= numHashFunctions; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextHash</span> <span class="operator">=</span> hash1 + i * hash2;</span><br><span class="line">            <span class="keyword">if</span> (nextHash &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                nextHash = ~nextHash;</span><br><span class="line">            &#125;</span><br><span class="line">            offset[i - <span class="number">1</span>] = nextHash % bitSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算bit数组长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">optimalNumOfBits</span><span class="params">(<span class="type">long</span> n, <span class="type">double</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 设定最小期望长度</span></span><br><span class="line">            p = Double.MIN_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (-n * Math.log(p) / (Math.log(<span class="number">2</span>) * Math.log(<span class="number">2</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算hash方法执行次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">optimalNumOfHashFunctions</span><span class="params">(<span class="type">long</span> n, <span class="type">long</span> m)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(<span class="number">1</span>, (<span class="type">int</span>) Math.round((<span class="type">double</span>) m / n * Math.log(<span class="number">2</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-亿级流量商品架构"><a href="#2-亿级流量商品架构" class="headerlink" title="2. 亿级流量商品架构"></a>2. 亿级流量商品架构</h3><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84-%E5%AF%BC%E5%87%BA.png" alt="亿级流量架构-导出"></p><h4 id="2-1-动态化渲染"><a href="#2-1-动态化渲染" class="headerlink" title="2.1 动态化渲染"></a>2.1 动态化渲染</h4><p><code>OpenResty®</code> 是一个基于 <code>Nginx</code> 与 <code>Lua</code> 的高性能 <code>Web</code> 平台，其内部继承了大量精良的 <code>Lua</code> 库、第三方模块以及大多数的依赖项。用于方便搭建能够处理超高并发、扩展性极高的动态 <code>Web</code> 应用、<code>Web</code> 服务和动态网关。</p><p><code>Web</code> 开发人员和系统工程师可以使用 <code>Lua</code> 脚本语言调动 <code>Nginx</code> 支持的各种 <code>C</code> 以及 <code>Lua</code> 模块，快速构造出足以胜任 <code>10K</code> 乃至 <code>1000K</code> 以上单机并发连接的高性能 Web 应用系统。<code>OpenResty®</code> 的目标是让你的<code>Web</code>服务直接跑在 <code>Nginx</code> 服务内部，充分利用 <code>Nginx</code> 的非阻塞 <code>I/O</code> 模型，不仅仅对 <code>HTTP</code> 客户端请求,甚至于对远程后端诸如<code>MySQL</code>、<code>PostgreSQL</code>、<code>Memcached</code> 以及 <code>Redis</code> 等都进行一致的高性能响应。</p><p><code>OpenResty®</code>下载地址：<a href="http://openresty.org/cn/download.html">http://openresty.org/cn/download.html</a></p><h5 id="2-1-1-流量分发"><a href="#2-1-1-流量分发" class="headerlink" title="2.1.1 流量分发"></a>2.1.1 流量分发</h5><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%B5%81%E9%87%8F%E5%88%86%E5%8F%91-%E5%AF%BC%E5%87%BA.png" alt="流量分发-导出"></p><h6 id="引入OpenResty-HTTP-模块"><a href="#引入OpenResty-HTTP-模块" class="headerlink" title="引入OpenResty HTTP 模块"></a>引入<code>OpenResty HTTP</code> 模块</h6><p>流量分发的 <code>Nginx</code> 会发送 HTTP 请求到后端的应用层 <code>Nginx</code>，故需要先引用 <code>Lua http</code> 模块</p><p>下载地址：<a href="https://github.com/ledgetech/lua-resty-http/tree/master/lib/resty">https://github.com/ledgetech/lua-resty-http/tree/master/lib/resty</a></p><ul><li>http.lua</li><li>http_headers.lua</li></ul><p> <a href="software%5Clua-resty-http-master.zip">lua-resty-http-master.zip</a> </p><p>文件放置 <code>I:\openresty\openresty\lualib\resty\</code> 下。</p><p>在 <code>nginx.conf</code> 的 <code>http</code> 模块中加入支持 <code>Lua</code> 相关的包：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lua_package_path <span class="string">&#x27;../lualib/?.lua;;&#x27;</span>;</span><br><span class="line">lua_package_cpath <span class="string">&#x27;../lualib/?.so;;&#x27;</span>;</span><br><span class="line">include lua.conf;</span><br></pre></td></tr></table></figure><p><code>lua.conf </code>如下：（其实就是将<code>nginx.conf</code>中<code>http</code>模块的<code>server</code>单独提出来）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 300;</span><br><span class="line">    location /product &#123;</span><br><span class="line">        default_type &#x27;text/html;charset=UTF‐8&#x27;;</span><br><span class="line">        lua_code_cache on;</span><br><span class="line">        content_by_lua_file D:/ProgramData/nginx/dis.lua;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听 <code>300</code> 端口，如果请求路径是 <code>product</code>，那么就让它包含 <code>distribution.lua</code> 文件的内容，并开启 <code>lua</code> 缓存。</p><p><code>distribution.conf</code>如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> uri_args = ngx.req.get_uri_args()</span><br><span class="line"><span class="keyword">local</span> productId = uri_args[<span class="string">&quot;productId&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 流量分发接收服务器</span></span><br><span class="line"><span class="keyword">local</span> host = &#123;<span class="string">&quot;127.0.0.1:222&quot;</span>,<span class="string">&quot;127.0.0.1:333&quot;</span>&#125;</span><br><span class="line"><span class="keyword">local</span> hash = ngx.crc32_long(productId)</span><br><span class="line">hash = (hash % <span class="number">2</span>) + <span class="number">1</span></span><br><span class="line">backend = <span class="string">&quot;http://&quot;</span>..host[hash]</span><br><span class="line"><span class="keyword">local</span> method = uri_args[<span class="string">&quot;method&quot;</span>]</span><br><span class="line"><span class="keyword">local</span> requestBody = <span class="string">&quot;/&quot;</span>..method..<span class="string">&quot;?productId=&quot;</span>..productId</span><br><span class="line"><span class="keyword">local</span> http = <span class="built_in">require</span>(<span class="string">&quot;resty.http&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> httpc = http.new()</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> resp, err = httpc:request_uri(backend, &#123;</span><br><span class="line">method = <span class="string">&quot;GET&quot;</span>,</span><br><span class="line"><span class="built_in">path</span> = requestBody,</span><br><span class="line">keepalive=<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span></span><br><span class="line">ngx.say(<span class="string">&quot;request error :&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ngx.say(resp.body)</span><br><span class="line"></span><br><span class="line">httpc:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p>截取传过来的 <code>productId</code>，然后从配置的 <code>host</code>服务中 <code>hash</code> 去取其中一台服务，再通过服务请求拿到相应的数据，并对数据进行输出。</p><p><code>222</code> 和 <code>333</code> 的配置</p><p><code>lua.conf</code>如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lua_shared_dict my_cache 128m;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 222;</span><br><span class="line">    set $template_location &quot;/templates&quot;;</span><br><span class="line">    set $template_root &quot;I:/openresty/&quot;;</span><br><span class="line"></span><br><span class="line">    location /product &#123;</span><br><span class="line">    default_type &#x27;text/html;charset=UTF‐8&#x27;;</span><br><span class="line">    lua_code_cache on;</span><br><span class="line">    content_by_lua_file I:/openresty/product.lua;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-2-请求后台"><a href="#2-1-2-请求后台" class="headerlink" title="2.1.2 请求后台"></a>2.1.2 请求后台</h5><h6 id="引入OpenResty-Template模块"><a href="#引入OpenResty-Template模块" class="headerlink" title="引入OpenResty Template模块"></a>引入<code>OpenResty Template</code>模块</h6><p>模板渲染使用是 <code>OpenResty Template</code>模块</p><p>下载地址：<a href="https://opm.openresty.org/package/bungle/lua-resty-template/">https://opm.openresty.org/package/bungle/lua-resty-template/</a></p><ul><li>/template/<ul><li>html.lua</li><li>microbenchmark.lua</li><li>safe.lua</li></ul></li><li>template.lua</li></ul><h6 id="加入缓存"><a href="#加入缓存" class="headerlink" title="加入缓存"></a>加入缓存</h6><p><code>product.lua</code>如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取请求路径参数数组</span></span><br><span class="line"><span class="keyword">local</span> uri_args = ngx.req.get_uri_args()</span><br><span class="line"><span class="comment">-- 获取商品 ID</span></span><br><span class="line"><span class="keyword">local</span> productId = uri_args[<span class="string">&quot;productId&quot;</span>]</span><br><span class="line"><span class="comment">-- 定义 nginx 缓存</span></span><br><span class="line"><span class="keyword">local</span> cache_ngx = ngx.shared.my_cache</span><br><span class="line"><span class="comment">-- 拼接缓存 key</span></span><br><span class="line"><span class="keyword">local</span> productCacheKey = <span class="string">&quot;product_info_&quot;</span>..productId</span><br><span class="line"><span class="comment">-- 从缓存中获取 key 对应的商品信息</span></span><br><span class="line"><span class="keyword">local</span> productCache = cache_ngx:get(productCacheKey)</span><br><span class="line"><span class="comment">-- 缓存未命中，请求商品服务</span></span><br><span class="line"><span class="keyword">if</span> productCache == <span class="string">&quot;&quot;</span> <span class="keyword">or</span> productCache == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">local</span> http = <span class="built_in">require</span>(<span class="string">&quot;resty.http&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> httpc = http.new()</span><br><span class="line"><span class="keyword">local</span> resp, err = httpc:request_uri(<span class="string">&quot;http://127.0.0.1:8866&quot;</span>,&#123;</span><br><span class="line">method = <span class="string">&quot;GET&quot;</span>,</span><br><span class="line"><span class="built_in">path</span> = <span class="string">&quot;/pms/productInfo/&quot;</span>..productId</span><br><span class="line">&#125;)</span><br><span class="line">productCache = resp.body</span><br><span class="line"><span class="keyword">local</span> expireTime = <span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">600</span>,<span class="number">1200</span>)</span><br><span class="line">cache_ngx:set(productCacheKey, productCache, expireTime)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span>(<span class="string">&quot;cjson&quot;</span>)</span><br><span class="line"><span class="comment">-- 反序列化，获得商品 Json 字符串</span></span><br><span class="line"><span class="keyword">local</span> productCacheJSON =cjson.decode(productCache)</span><br><span class="line">ngx.say(productCache);</span><br><span class="line"><span class="comment">-- 解析商品信息</span></span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">    id = productCacheJSON.data.id,</span><br><span class="line">    name = productCacheJSON.data.name,</span><br><span class="line">    price = productCacheJSON.data.price,</span><br><span class="line">    pic = productCacheJSON.data.pic,</span><br><span class="line">    detailHtml = productCacheJSON.data.detailHtml</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">-- 获取模板文件</span></span><br><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">&quot;resty.template&quot;</span>)</span><br><span class="line"><span class="comment">-- 将 context 映射到 template 文件中</span></span><br><span class="line">template.render(<span class="string">&quot;product.html&quot;</span>, context)</span><br></pre></td></tr></table></figure><h6 id="HTML-模板"><a href="#HTML-模板" class="headerlink" title="HTML 模板"></a><code>HTML</code> 模板</h6><p>语法如下：（<code>&#123;* id *&#125;</code>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http</span>‐<span class="attr">equiv</span>=<span class="string">&quot;Content‐Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf‐8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">商品id: &#123;* id *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">商品名称: &#123;* name *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">商品价格: &#123;* price *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">商品库存: <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;*</span> <span class="attr">pic</span> *&#125;/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">商品描述: &#123;* detailHtml *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <a href="software%5Cproduct.html">product.html</a> </p><h6 id="关闭-nginx-命令"><a href="#关闭-nginx-命令" class="headerlink" title="关闭 nginx 命令"></a>关闭 <code>nginx</code> 命令</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">taskkill</span> /im nginx.exe /f</span><br></pre></td></tr></table></figure><h5 id="2-1-3-渲染图"><a href="#2-1-3-渲染图" class="headerlink" title="2.1.3 渲染图"></a>2.1.3 渲染图</h5><p>模板动态渲染图如下：</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%A8%A1%E6%9D%BF%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93.png" alt="模板动态渲染"></p><h4 id="2-2-多级缓存"><a href="#2-2-多级缓存" class="headerlink" title="2.2 多级缓存"></a>2.2 多级缓存</h4><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98-%E5%AF%BC%E5%87%BA.png" alt="多级缓存-导出"></p><h5 id="2-2-1-一级缓存"><a href="#2-2-1-一级缓存" class="headerlink" title="2.2.1 一级缓存"></a>2.2.1 一级缓存</h5><p>实现方式：<code>Lua</code> + <code>Nginx</code></p><p>特点：数据量小、访问量相对很高</p><h5 id="2-2-2-二级缓存"><a href="#2-2-2-二级缓存" class="headerlink" title="2.2.2 二级缓存"></a>2.2.2 二级缓存</h5><p>实现方式：<code>JVM</code>本地缓存（<code>GUAVA</code>）</p><p>特点：数据量很大、访问量相对高</p><h5 id="2-2-3-三级缓存"><a href="#2-2-3-三级缓存" class="headerlink" title="2.2.3 三级缓存"></a>2.2.3 三级缓存</h5><p>实现方式：<code>Redis</code></p><p>特点：数据量相对比较大、访问量相对不高</p><h5 id="2-2-4-热度问题"><a href="#2-2-4-热度问题" class="headerlink" title="2.2.4 热度问题"></a>2.2.4 热度问题</h5><p>如何保证最热的数据在最前面 ？</p><ul><li><p>设置各级缓存的内存大小，越靠前的缓存其容量越小</p></li><li><p>设置各级缓存的过期时间，越靠前的缓存其过期时间越小</p></li><li><p>使用 <code>LRU-K</code>(链表 <code>K</code>) 最近最热的一次数据连续访问 <code>3</code> 次以上，放入一级缓存</p></li></ul><h3 id="3-微服务拆分"><a href="#3-微服务拆分" class="headerlink" title="3. 微服务拆分"></a>3. 微服务拆分</h3><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230115213350295.png" alt="image-20230115213350295"></p><p>原图地址：<a href="https://www.processon.com/view/link/5e69e768e4b07fc7a6841488">https://www.processon.com/view/link/5e69e768e4b07fc7a6841488</a></p><h4 id="3-1-微服务拆分时机"><a href="#3-1-微服务拆分时机" class="headerlink" title="3.1 微服务拆分时机"></a>3.1 微服务拆分时机</h4><p>如下场景需要进行微服务拆分：</p><ul><li>代码维护困难，几百人同时开发一个模块，提交代码频繁出现大量冲突</li><li>模块耦合严重，相互依赖，小工嗯呢该修改也必须累计到大版本才能上线</li><li>很想扩展流程复杂，主要业务和次要业务耦合。例如：下单和支付业务需要扩容，而注册业务不需要要扩容</li></ul><p>微服务不仅仅是技术的升级，更是开发方式、组织架构、开发观念的转变。</p><h4 id="3-2-微服务拆分的一些通用原则"><a href="#3-2-微服务拆分的一些通用原则" class="headerlink" title="3.2 微服务拆分的一些通用原则"></a>3.2 微服务拆分的一些通用原则</h4><p><strong>单一服务内部功能高内聚低耦合</strong>：每个服务只完成自己职责内的任务，对于不是自己职责的功能交给其它服务来完成</p><p><strong>闭包原则（CCP）：</strong>微服务的闭包原则就是当我们需要改变一个微服务的时候，所有依赖都在这个微服务的组件内，不需要修改其他微服务</p><p><strong>服务自治、接口隔离原则：</strong>尽量消除对其他服务的强依赖，这样可以降低沟通成本，提升服务稳定性。服务通过标准的</p><p>接口隔离，隐藏内部实现细节。这使得服务可以独立开发、测试、部署、运行，以服务为单位持续交付。</p><p><strong>持续演进原则：</strong>在服务拆分的初期，你其实很难确定服务究竟要拆成什么样。应逐步划分，持续演进，避免服务数量的爆炸性增长。</p><p><strong>拆分的过程尽量避免影响产品的日常功能迭代：</strong>也就是说要一边做产品功能迭代，一边完成服务化拆分。比如优先剥离比较独立的边界服务（如短信服务等），从非核心的服务出发减少拆分对现有业务的影响，也给团队一个练习、试错的机会。同时当两个服务存在依赖关系时优先拆分被依赖的服务。</p><p><strong>服务接口的定义要具备可扩展性：</strong>比如微服务的接口因为升级把之前的三个参数改成了四个，上线后导致调用方大量报错，推荐做法服务接口的参数类型最好是封装类，这样如果增加参数就不必变更接口的签名<strong>避免环形依赖与双向依赖：</strong>尽量不要有服务之间的环形依赖或双向依赖，原因是存在这种情况说明我们的功能边界没有化分清楚或者有通用的功能没有下沉下来。</p><p><strong>阶段性合并：</strong>随着你对业务领域理解的逐渐深入或者业务本身逻辑发生了比较大的变化，亦或者之前的拆分没有考虑的很清楚，导致拆分后的服务边界变得越来越混乱，这时就要重新梳理领域边界，不断纠正拆分的合理性。</p><p><strong>自动化驱动：</strong>部署和运维的成本会随着服务的增多呈指数级增长，每个服务都需要部署、监控、日志分析等运维工作，成本会显著提升。因此，在服务划分之前，应该首先构建自动化的工具及环境。开发人员应该以自动化为驱动力，简化服务在创建、开发、测试、部署、运维上的重复性工作，通过工具实现更可靠的操作，避免微服务数量增多带来的开发、管理复杂度问题。</p><p><strong>拆分粒度控制</strong></p><p>思考： 拆分的粒度是不是越细越好？</p><p>目前很多传统的单体应用再向微服务架构进行升级改造，如果拆分粒度太细会增加运维复杂度，粒度过大又起不到效果，那么改造过程中如何平衡拆分粒度呢？平衡拆分粒度可以从两方面进行权衡，一是业务发展的复度，二是团队规模的人数人员和服务数量的不匹配，会导致维护成本增加，也会导致服务合并。</p><p>前期设计和开发阶段： 3个人负责一个微服务后期维护阶段：每个微服务可以安排2个人维护，每个人可以维护多个微服务</p><p><strong>功能维度拆分策略</strong></p><p>大的原则是基于业务复杂度拆分服务： 业务复杂度足够高，应该基于领域驱动拆分服务。业务复杂度较低，选择基于数据驱动拆分服务</p><p>基于数据驱动拆分服务： 自下而上的架构设计方法，通过分析需求，确定整体数据结构，根据表之间的关系拆分服务。</p><p>拆分步骤： 需求分析，抽象数据结构，划分服务，确定调用关系和业务流程验证。</p><p>基于领域驱动拆分服务： 自上而下的架构设计方法，通过和领域专家建立统一的语言，不断交流，确定关键业务场景，逐步确定边界上下文。领域驱动更强调业务实现效果，认为自下而上的设计可能会导致技术人员不能更好地理解业务方向，进而偏离业务目标。</p><p>拆分步骤：通过模型和领域专家建立统一语言，业务分析，寻找聚合，确定服务调用关系，业务流程验证和持续优化。</p><p>以电商的场景为例，交易链路划分的限界上下文如下图左半部分，根据一个限界上下文可以设计一个微服务，拆解出来的微服务如下图右侧部分。还有一种常见拆分场景，从已有单体架构中逐步拆分服务。</p><p>拆分步骤： 前后端分离，提取公共基础服务（如单点登录），不断从老系统抽取服务，垂直划分优先，适当水平切分以上几种拆分方式不是多选一，而是可以根据实际情况自由排列组合。<strong>同时拆分不仅仅是架构上的调整，也意味着要在组织结构上做出相应的适应性优化，以确保拆分后的服务由相对独立的团队负责维护。</strong></p><p><strong>非功能维度拆分策略</strong></p><p>主要考虑六点包括扩展性、复用性、高性能、高可用、安全性、异构性</p><p><strong>扩展性</strong></p><p>区分系统中变与不变的部分，不变的部分一般是成熟的、通用的服务功能，变的部分一般是改动比较多、满足业务迭代扩展性需要的功能，我们可以将不变的部分拆分出来，作为共用的服务，将变的部分独立出来满足个性化扩展需要同时根据二八原则，系统中经常变动的部分大约只占 20%，而剩下的 80% 基本不变或极少变化，这样的拆分也解决了发布频率过多而影响成熟服务稳定性的问题。</p><p><strong>复用性</strong></p><p>不同的业务里或服务里经常会出现重复的功能，比如每个服务都有鉴权、限流、安全及日志监控等功能，可以将这些通过的功能拆分出来形成独立的服务，也就是微服务里面的 API 网关。</p><p><strong>高性能</strong></p><p>将性能要求高或者性能压力大的模块拆分出来，避免性能压力大的服务影响其它服务。常见的拆分方式和具体的性能瓶颈有关，例如电商的抢购，性能压力最大的是入口的排队功能，可以将排队功能独立为一个服务。我们也可以基于读写分离来拆分，比如电商的商品信息，在 App 端主要是商详有大量的读取操作，但是写入端商家中心访问量确很少。因此可以对流量较大或较为核心的服务做读写分离，拆分为两个服务发布，一个负责读，另外一个负责写。</p><p>数据一致性是另一个基于性能维度拆分需要考虑的点，对于强一致的数据，属于强耦合，尽量放在同一个服务中（但是有时会因为各种原因需要进行拆分，那就需要有响应的机制进行保证），弱一致性通常可以拆分为不同的服务。</p><p><strong>高可用</strong></p><p>将可靠性要求高的核心服务和可靠性要求低的非核心服务拆分开来，然后重点保证核心服务的高可用。具体拆分的时候，核心服务可以是一个也可以是多个，只要最终的服务数量满足“三个火枪手”的原则就可以。</p><p><strong>安全性</strong></p><p>不同的服务可能对信息安全有不同的要求，因此把需要高度安全的服务拆分出来，进行区别部署，比如设置特定的 DMZ区域对服务进行分区部署，可以更有针对性地满足信息安全的要求，也可以降低对防火墙等安全设备吞吐量、并发性等方面的要求，降低成本，提高效率。</p><p><strong>异构性</strong></p><p>对于对开发语言种类有要求的业务场景，可以用不同的语言将其功能独立出来实现一个独立服务。<strong>拆分注意的风险</strong></p><p><strong>不打无准备之仗：</strong>开发团队是否具备足够的经验，能否驾驭微服务的技术栈，可能是第一个需要考虑的点。</p><p><strong>不断纠正：</strong>我们需要承认我们的认知是有限的，只能基于目前的业务状态和有限的对未来的预测来制定出一个相对合适</p><p>的拆分方案，而不是所谓的最优方案，任何方案都只能保证在当下提供了相对合适的粒度和划分原则，要时刻做好在未来的末一个时刻会变得不和时宜、需要再次调整的准备。</p><p><strong>要做行动派，而不是理论派：</strong>在具体怎么拆分上，也不要太纠结于是否合适，如果拆了之后发现真的不合适，在重新调整就好了。如果要灵活调整，可以针对服务化架构搭建起一套完成的能力体系，比如服务治理平台、数据迁移工具、数据双写等等</p><p><strong>服务只拆不合：</strong></p><p>拆相当于我们开发代码，合相当于重构代码。随着我们对应用程序领域的了解越来越深，它们需要随着时间的推移而变化。</p><p>人员和服务数量的不匹配，导致的维护成本增加，也是导致服务合并的一个重要原因。</p><p>如果微服务数量过多和资源不匹配，则可以考虑合并多个微服务到服务包，部署到一台服务器，这样可以节省服务运行时的基础资源消耗也降低了维护成本。需要注意的是，虽然服务包是运行在一个进程中，但是服务包内的服务依然要满足微服务定义，以便在未来某一天要重新拆开的时候可以很快就分离</p><h4 id="3-3-Spring-Cloud-技术栈选型"><a href="#3-3-Spring-Cloud-技术栈选型" class="headerlink" title="3.3 Spring Cloud 技术栈选型"></a>3.3 Spring Cloud 技术栈选型</h4><p><code>Spring Cloud Alibaba</code>官网：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki">https://github.com/alibaba/spring-cloud-alibaba/wiki</a></p><p>SpringCloud 的几大痛点：</p><ul><li><p>SpringCloud 部分组件停止维护和更新，给开发带来不便;</p></li><li><p>SpringCloud 部分环境搭建复杂，没有完善的可视化界面，我们需要大量的二次开发和定制</p></li><li><p>SpringCloud 配置复杂，难以上手，部分配置差别难以区分和合理应用</p></li></ul><p>SpringCloud Alibaba 的优势:</p><ul><li><p>阿里使用过的组件经历了考验，性能强悍，设计合理，现在开源出来大家用成套的产品搭配完善的可视化界面给开发运维带来极大的便利</p></li><li><p>搭建简单，学习曲线低。</p></li></ul><p>所以我们优先选择 Spring Cloud Alibaba 提供的微服务组件</p><p>Spring Cloud Alibaba 官方推荐版本选择：</p><table><thead><tr><th>Spring Cloud Alibaba Version</th><th>Spring Cloud Version</th><th>Spring Boot Version</th></tr></thead><tbody><tr><td>2022.0.0.0-RC*</td><td>Spring Cloud 2022.0.0</td><td>3.0.0</td></tr></tbody></table><table><thead><tr><th>Spring Cloud Alibaba Version</th><th>Spring Cloud Version</th><th>Spring Boot Version</th></tr></thead><tbody><tr><td>2021.0.4.0*</td><td>Spring Cloud 2021.0.4</td><td>2.6.11</td></tr><tr><td>2021.0.1.0</td><td>Spring Cloud 2021.0.1</td><td>2.6.3</td></tr><tr><td>2021.1</td><td>Spring Cloud 2020.0.1</td><td>2.4.2</td></tr></tbody></table><p>pom 引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> &lt;!‐‐ lookup parent from repository ‐‐&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tuling<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tuling‐mall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1‐SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>tuling‐mall<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">&lt;spring‐cloud.version&gt;Greenwich.SR3&lt;/spring‐cloud.version&gt;</span><br><span class="line">&lt;spring‐cloud‐alibaba.version&gt;2.1.2.RELEASE&lt;/spring‐cloud‐alibaba.version&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">&lt;!‐‐Spring Cloud 相关依赖‐‐&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐cloud‐dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring‐cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&lt;!‐‐Spring Cloud Alibaba 相关依赖‐‐&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐cloud‐alibaba‐dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring‐cloud‐alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-4-Nacos-服务高可用搭建（待完善）"><a href="#3-4-Nacos-服务高可用搭建（待完善）" class="headerlink" title="3.4 Nacos 服务高可用搭建（待完善）"></a>3.4 Nacos 服务高可用搭建<strong>（待完善）</strong></h4><h5 id="3-4-1-Nacos-UI"><a href="#3-4-1-Nacos-UI" class="headerlink" title="3.4.1 Nacos UI"></a>3.4.1 Nacos UI</h5><p>访问地址：<a href="http://192.168.10.148:8848/nacos/">http://192.168.10.148:8848/nacos/</a></p><p>用户名：nacos    密码：nacos</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/nacos-ui.png" alt="nacos-ui"></p><h4 id="3-5-服务发现"><a href="#3-5-服务发现" class="headerlink" title="3.5 服务发现"></a>3.5 服务发现</h4><p>将微服务注册到 <code>Nacos</code> 服务器</p><h5 id="3-5-1-引入依赖"><a href="#3-5-1-引入依赖" class="headerlink" title="3.5.1 引入依赖"></a>3.5.1 引入依赖</h5><p>需要注册的服务引入依赖，服务启动时自动注册到 <code>Nacos</code> 服务中心</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册中心 服务注册与发现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：**@EnableDiscoveryClient** <code>Spring Cloud</code> 已经实现了该注解的功能，无需在主程序上添加该注解。</p><h5 id="3-5-2-在-yml-中配置注册中心地址"><a href="#3-5-2-在-yml-中配置注册中心地址" class="headerlink" title="3.5.2 在 yml 中配置注册中心地址"></a>3.5.2 在 yml 中配置注册中心地址</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tulingmall-member</span><span class="comment"># 微服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">tl.nacos.com:8848</span><span class="comment"># Nacos 服务器地址</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">80a98d11‐492c‐4008‐85aa‐32d889e9b0d0</span> <span class="comment"># 环境隔离</span></span><br></pre></td></tr></table></figure><h5 id="3-5-3-环境隔离"><a href="#3-5-3-环境隔离" class="headerlink" title="3.5.3 环境隔离"></a>3.5.3 环境隔离</h5><p>服务使用命名空间进行分组。</p><p><code>namespace</code> 为 <code>Nacos UI</code> 页面创建的<strong>命名空间</strong>的 <code>ID</code> ：</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%88%86%E7%BB%84-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png" alt="分组-命名空间"></p><p>启动该服务，在 <code>Nacos UI</code> 上查看，该服务已存在对应的分组下：</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%9C%8D%E5%8A%A1%E5%88%86%E7%BB%84.png" alt="服务分组"></p><h4 id="3-6-RPC-调用"><a href="#3-6-RPC-调用" class="headerlink" title="3.6 RPC 调用"></a>3.6 RPC 调用</h4><h5 id="3-6-1-引入依赖"><a href="#3-6-1-引入依赖" class="headerlink" title="3.6.1 引入依赖"></a>3.6.1 引入依赖</h5><p><code>RPC</code> 使用的是 <code>Feign</code>，引入 <code>Feign</code> 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务远程调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-6-2-添加-EnableFeignClients注解"><a href="#3-6-2-添加-EnableFeignClients注解" class="headerlink" title="3.6.2 添加@EnableFeignClients注解"></a>3.6.2 添加<code>@EnableFeignClients</code>注解</h5><p>在消费端启动类上添加 <code>@EnableFeignClients</code>注解，开启 <code>OpenFeign</code> 远程调用功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TulingmallMemberApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(TulingmallMemberApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-6-3-编写调用接口（疑问）"><a href="#3-6-3-编写调用接口（疑问）" class="headerlink" title="3.6.3 编写调用接口（疑问）"></a>3.6.3 编写调用接口<strong>（疑问）</strong></h5><p>在消费端编写调用接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用远程服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * name 为远程要调用的 服务名</span></span><br><span class="line"><span class="comment"> * path 为远程要调用的服务前缀</span></span><br><span class="line"><span class="comment"> * url  为开发时用来写死访问地址（ip:port），用于测试（不会走负载均衡，直接调用对应节点）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;tulingmall‐coupons&quot;,path = &quot;/coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CouponsFeignService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/list&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">CommonResult&lt;List&lt;SmsCouponHistory&gt;&gt; <span class="title function_">list</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;useStatus&quot;, required = false)</span> Integer useStatus,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestHeader(&quot;memberId&quot;)</span> Long memberId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>疑问：<code>@FengiClient</code>注解中 path 的作用 ？</strong></p><h5 id="3-6-4-发起远程调用"><a href="#3-6-4-发起远程调用" class="headerlink" title="3.6.4 发起远程调用"></a>3.6.4 发起远程调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入远程服务</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CouponsFeignService couponsFeignService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/coupons&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">getCoupons</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(value = &quot;useStatus&quot;, required = false)</span> Integer useStatus,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestHeader(&quot;memberId&quot;)</span> Long memberId)</span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 通过openfeign从远程微服务tulingmall‐coupons获取优惠券信息</span></span><br><span class="line"><span class="keyword">return</span> couponsFeignService.list(useStatus, memberId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-6-5-OpenFeign-日志配置（待完善）"><a href="#3-6-5-OpenFeign-日志配置（待完善）" class="headerlink" title="3.6.5 OpenFeign 日志配置（待完善）"></a>3.6.5 OpenFeign 日志配置<strong>（待完善）</strong></h5><p>开启 OpenFeign 日志配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果日志不显示，可以在 yml 中通过 logging.level 设置日志级别</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">level:</span></span><br><span class="line"><span class="attr">com.tuling:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>微服务拆分，可将 <code>Feign</code> 独立拆分出去。</p><h4 id="3-7-配置中心"><a href="#3-7-配置中心" class="headerlink" title="3.7 配置中心"></a>3.7 配置中心</h4><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E5%AF%BC%E5%87%BA.png" alt="配置中心-导出"></p><h5 id="3-7-1-bootstrap-yml-和-application-yml"><a href="#3-7-1-bootstrap-yml-和-application-yml" class="headerlink" title="3.7.1 bootstrap.yml 和 application.yml"></a>3.7.1 bootstrap.yml 和 application.yml</h5><p><code>bootstrap.yml</code> 文件也是 <code>Springboot</code> 的默认配置文件，而且其加载的时间比<code>application.yml </code>更早。</p><p><code>application.yml</code> 和 <code>bootstrap.yml</code> 虽然都是 <code>Springboot</code> 的默认配置文件，但定位却不相同。</p><ul><li><code>bootstrap.yml</code>    可以理解成系统级别的一些参数配置，这些 参数一般是不会变动的。</li><li><code>application.yml</code>    可以用来定义应用级别的参数，如果搭配 <code>spring cloud config</code> 使用，<code>application.yml</code> 里边定义的问价你可以实现动态替换。</li></ul><p><strong>总结</strong>：</p><p>​        <code>bootstrap.yml</code> 文件相当于项目启动时的引导文件，内容相对固定。<code>application.yml</code> 文件是微服务的一些常规配置参数，变化比较频繁。<code>bootstrap.yml</code> 先于 <code>application.yml</code>。</p><p>编写 <code>bootstrap.yml</code> 配置文件，该文件中的配置无需随着环境而变更：</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">tulingmall‐member</span> <span class="comment">#微服务的名称</span></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">                <span class="attr">serverAddr:</span> <span class="number">192.168</span><span class="number">.65</span><span class="number">.232</span><span class="string">:8848</span> <span class="comment">#配置中心的地址</span></span><br><span class="line">                <span class="attr">namespace:</span> <span class="string">741b4a7b‐c610‐4f88‐8b83‐e9ec87e68319</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># dataid 为 yml 的文件扩展名配置方式</span></span><br><span class="line">                <span class="comment"># `$&#123;spring.application.name&#125;.$&#123;file‐extension:properties&#125;`</span></span><br><span class="line">                <span class="string">file‐extension:</span> <span class="string">yml</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 通用配置(拉取通用配置的ID)</span></span><br><span class="line">                <span class="string">shared‐dataids:</span> <span class="string">nacos.yml,mybatis.yml,actuator.yml,redis.yml</span></span><br><span class="line">                <span class="comment"># 刷新配置(动态改配置可以刷新)</span></span><br><span class="line">                <span class="string">refreshable‐dataids:</span> <span class="string">nacos.yml,mybatis.yml,actuator.yml,redis.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># profile 粒度的配置</span></span><br><span class="line"><span class="comment">#`$&#123;spring.application.name&#125;‐$&#123;profile&#125;.$&#123;file‐extension:properties&#125;`</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line"><span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h5 id="3-7-2-抽取公用配置"><a href="#3-7-2-抽取公用配置" class="headerlink" title="3.7.2 抽取公用配置"></a>3.7.2 抽取公用配置</h5><p>在 <code>Nacos UI</code> 界面，新增 <code>nacos.yml</code> 公共配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">tl.nacos.com:8848</span></span><br></pre></td></tr></table></figure><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%8A%BD%E5%8F%96%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AEnacos.png" alt="抽取公共配置nacos"></p><h5 id="3-7-3-定义-dev-应用配置"><a href="#3-7-3-定义-dev-应用配置" class="headerlink" title="3.7.3 定义 dev 应用配置"></a>3.7.3 定义 dev 应用配置</h5><p>在 <code>nacos UI</code> 界面，<code>dev</code> 命名空间下，定义<code>&#123;</code>服务名 + dev<code> &#125;.yml</code> 的配置文件</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE-dev.png" alt="应用配置-dev"></p><h4 id="3-8-服务网关-Gateway"><a href="#3-8-服务网关-Gateway" class="headerlink" title="3.8 服务网关 Gateway"></a>3.8 服务网关 Gateway</h4><p>定义一个新的 module，为 服务网关 gateway 模块</p><h5 id="3-8-1-引入父-pom"><a href="#3-8-1-引入父-pom" class="headerlink" title="3.8.1 引入父 pom"></a>3.8.1 引入父 pom</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tuling<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tuling-mall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-8-2-引入网关依赖"><a href="#3-8-2-引入网关依赖" class="headerlink" title="3.8.2 引入网关依赖"></a>3.8.2 引入网关依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-8-3-服务注册"><a href="#3-8-3-服务注册" class="headerlink" title="3.8.3 服务注册"></a>3.8.3 服务注册</h5><p>服务经过网关之后，需要找到下一个微服务，所以网关需要在 Nacos 上注册，以发现其它微服务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Nacos 服务注册与发现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Nacos 配置中心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：会和 spring-webmvc 的依赖冲突，需要排除 spring-webmvc</p><p>编写应用配置文件 application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tulingmall-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">tl.nacos.com:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">4a08c9666f5301bb648463f6d11a12f6</span> <span class="comment"># 环境隔离</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="comment"># 默认为 false，true 表示开启通过微服务创建路由的功能，即可以通过微服务名访问服务</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 是否开启网关</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          </span><br><span class="line">  <span class="comment"># 下一个服务路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 一个 ID 对应一个微服务，路由 ID，全局唯一</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">tulingmall-authcenter</span></span><br><span class="line">        <span class="comment"># 底层有全归过滤器，用来做负载均衡，从微服务里拉取对应微服务，再取出一个节点往下一个传递</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://tulingmall-authcenter</span></span><br><span class="line">          <span class="comment"># 断言，有个断言工厂，用来匹配路径</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="comment"># 当前访问路径里有 oauth 时，会来找这个微服务</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/oauth/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">tulingmall-member</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://tulingmall-member</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/sso/**,/member/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">tulingmall-coupons</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://tulingmall-coupons</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/coupon/**</span></span><br><span class="line">            </span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.springframework.cloud.gateway:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h4 id="3-9-接入-Skywalking"><a href="#3-9-接入-Skywalking" class="headerlink" title="3.9 接入 Skywalking"></a>3.9 接入 Skywalking</h4><h5 id="3-9-1-搭建-Skywalking-OAP-服务"><a href="#3-9-1-搭建-Skywalking-OAP-服务" class="headerlink" title="3.9.1 搭建 Skywalking OAP 服务"></a>3.9.1 搭建 <code>Skywalking OAP</code> 服务</h5><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/Skywalking-oap.png" alt="Skywalking-oap"></p><h5 id="3-9-2-微服务配置-Skywalking-Agent"><a href="#3-9-2-微服务配置-Skywalking-Agent" class="headerlink" title="3.9.2 微服务配置 Skywalking Agent"></a>3.9.2 微服务配置 Skywalking Agent</h5><p>使用 JVM 参数的方式启动微服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:G:\tuling\skywalking-agent\skywalking-agent.jar</span><br><span class="line">-Dskywalking.agent.service_name=tulingmall-member</span><br><span class="line">-Dskywalking.collector.backend_service=192.168.10.153:11800</span><br></pre></td></tr></table></figure><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/jvm%E5%8F%82%E6%95%B0%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AEskywalking-agent.png" alt="jvm参数方式配置skywalking-agent"></p><p>启动微服务，在 Skywalking UI 上可以查看对应服务</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/Skywalking%20%E6%9C%8D%E5%8A%A1%E6%9F%A5%E7%9C%8B.png" alt="Skywalking 服务查看"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
