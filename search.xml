<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dockerfile 自动构建 Docker 镜像</title>
      <link href="/2023/03/16/DevOps/docker/DockerFile/"/>
      <url>/2023/03/16/DevOps/docker/DockerFile/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><h3 id="Dockerfile自动构建-Docker-镜像"><a href="#Dockerfile自动构建-Docker-镜像" class="headerlink" title="Dockerfile自动构建 Docker 镜像"></a>Dockerfile自动构建 Docker 镜像</h3><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p><code>DockerFile</code> 中所用所有文件一定要和 <code>Dockerfile</code> 文件在同一级父目录下，可以为 <code>Dockerfile</code> 父目录的子目录</p><p><code>Dockerfile</code> 中相对路径默认都是 <code>Dockerfile</code> 所在目录</p><p><code>Dockerfile</code> 中一定要惜字如金，能写到一行的指令，一定要写到一行，原因是分层构建，联合挂在这一特性</p><p><code>Dockerfile</code> 中每一条指令视为一层</p><p><code>Dockerfile</code> 中指明大写（约定俗成）</p><h3 id="DockerFile-指令集"><a href="#DockerFile-指令集" class="headerlink" title="DockerFile 指令集"></a>DockerFile 指令集</h3><h4 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h4><p>指定基础镜像，并且必须是第一条指令。如果不以任何镜像为基础，那么写法为：<code>FROM scratch</code>。</p><p>同时意味着接下来缩写的指令将作为镜像的第一次开始。</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;image&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;image&gt;:&lt;tag&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;image&gt;:&lt;digest&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong></p><p>三种写法，其中 <code>&lt;tag&gt;</code> 和 <code>&lt;digest&gt;</code> 是可选，如果没有选择，那么默认值为 <code>latest</code></p></blockquote><h4 id="MASINTAINER"><a href="#MASINTAINER" class="headerlink" title="MASINTAINER"></a>MASINTAINER</h4><p>指定维护者信息（可选）</p><p><strong>语法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAINTAINER &lt;name&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong></p><p>新版本 <code>Docker</code> 使用 <code>LABEL</code> 指明</p></blockquote><hr><h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p>为镜像指明标签，一个 <code>Dockerfile</code> 可以有多个 <code>LABEL</code></p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span></span><br><span class="line"> 一个Dockerfile种可以有多个<span class="keyword">LABEL</span><span class="language-bash">，如下：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> <span class="string">&quot;com.example.vendor&quot;</span>=<span class="string">&quot;ACME Incorporated&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> com.example.label-with-value=<span class="string">&quot;foo&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> description=<span class="string">&quot;This text illustrates \</span></span></span><br><span class="line"><span class="string"><span class="language-bash">that label-values can span multiple lines.&quot;</span></span></span><br><span class="line"> 但是并不建议这样写，最好就写成一行，如太长需要换行的话则使用\符号</span><br><span class="line"></span><br><span class="line">如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> multi.label1=<span class="string">&quot;value1&quot;</span> \</span></span><br><span class="line"><span class="language-bash">multi.label2=<span class="string">&quot;value2&quot;</span> \</span></span><br><span class="line"><span class="language-bash">other=<span class="string">&quot;value3&quot;</span></span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong></p><p><code>LABEL</code> 会继承基础镜像中的 <code>LABEL</code>，如遇到相同的 <code>key</code>，则值覆盖</p></blockquote><hr><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>复制命令。把文件复制到镜像中，类似于 <code>SCP</code> 命令</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="language-bash"> &lt;src&gt;... &lt;dest&gt;</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> [<span class="string">&quot;&lt;src&gt;&quot;</span>,... <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong></p><ul><li><code>src</code> 为目录时，会自动把目录下的文件复制过去，目录本身不会被复制</li><li><code>src</code> 为多文件，<code>dest</code> 一定要是一个目录</li><li><code>src</code> 为 <code>URL</code>，那么 <code>ADD</code> 就类似于 <code>wget</code> 命令</li></ul></blockquote><hr><h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>复制命令</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> &lt;src&gt;... &lt;dest&gt;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> [<span class="string">&quot;&lt;src&gt;&quot;</span>,... <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong></p><p>与 <code>ADD</code> 的区别是，<code>COPY</code> 只能复制本地文件，其它用法一致</p></blockquote><hr><h4 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h4><p>向外暴露容器运行时的监听端口。但是 <code>EXPOSE</code> 不会使容器访问主机的端口。</p><p>容器与主机建立端口映射，必须在容器启动时加上 <code>-P</code> 参数</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;port&gt;/&lt;tcp/udp&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h4><p>设置环境变量</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;    // 一次设置一个</span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...// 一次设置多个</span><br></pre></td></tr></table></figure><p>使用变量方式</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$varName</span><br><span class="line">$&#123;varName&#125;       // <span class="number">1</span> 和 <span class="number">2</span> 相同</span><br><span class="line">$&#123;varName:-default value&#125;   // 当变量 varName 不存在时，使用默认值 value</span><br><span class="line">$&#123;varName:+default value&#125;   // 当变量 varName 存在时，使用默认值 value （不存在时，也是用默认值 value）</span><br></pre></td></tr></table></figure><hr><h4 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h4><p>运行指定命令</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &lt;<span class="built_in">command</span>&gt;// 直接跟 shell 命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]  // 函数调用</span></span><br></pre></td></tr></table></figure><hr><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>容器启动时默认命令或参数</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">command</span> param1 param2</span></span><br></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo <span class="variable">$HOME</span>&quot;</span> </span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;echo&quot;</span>, <span class="string">&quot;<span class="variable">$HOME</span>&quot;</span> ]</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong></p><p>参数一定要用双引号，不得使用单引号。原因：<code>Docker</code> 解析是一个 <code>JSON Array</code></p><p><code>RUN</code> &amp; <code>CMD</code></p><p><code>RUN</code> 是构建容器时就运行的命令以及提交运行结果</p><p><code>CMD</code> 是容器启动时执行的命令，在构建时并不运行</p></blockquote><hr><h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>容器启动时运行的启动命令</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]   // EXEC调用，可在 docker run 启动时传递参数</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> <span class="built_in">command</span> param1 param2// shell 命令</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong></p><p><code>CMD</code> &amp; <code>ENTRYPOINT</code></p><p>相同点：</p><p>​    只能写一条，多条最后一条生效</p><p>​    容器启动时才运行，运行时机相同</p><p>不同点：</p><p>​    <code>ENTRYPOINT</code> 不会被运行的 <code>command</code> 覆盖，但 <code>CMD</code> 则会被覆盖</p><p>​    如果在 <code>Dockerfile</code> 中同时写了 <code>ENTRYPOINT</code> 和 <code>CMD</code>， 并且 <code>CMD</code> 指令不是一个完整的可执行命令，那么<code>CMD</code> 指定的内容将会作为 <code>ENTRYPOINT</code> 的参数，见<code>示例1</code>。</p><p>​    如果在 <code>Dockerfile</code> 中同时写了 <code>ENTRYPOINT</code> 和 <code>CMD</code>，并且 <code>CMD</code> 是一个完整的可执行命令，那么 <code>CMD</code>会相互覆盖，谁在最后谁生效，见<code>示例2</code>。</p></blockquote><p><strong>示例1：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;top&quot;</span>, <span class="string">&quot;-b&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;-c&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><strong>实例2：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;top&quot;</span>, <span class="string">&quot;-b&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">ls</span> -al</span></span><br></pre></td></tr></table></figure><hr><h4 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h4><p>挂载功能，可将宿主机目录挂载到容器中。持久化 <code>Docker</code> 容器中的数据</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/data&quot;</span>]// [<span class="string">&quot;/data&quot;</span>] 可以是一个 JsonArray，也可以是多个值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/var/log/&quot;</span>]</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /var/log</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /var/log /var/db</span></span><br></pre></td></tr></table></figure><hr><h4 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h4><p>设置启动容器的用户。可以使用户名或 <code>UID</code></p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> daemo</span><br><span class="line"><span class="keyword">USER</span> UID</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p>如果设置了容器以 <code>daemon</code> 用户去运行，那么<code>RUN</code>、<code>CMD</code> 和 <code>ENTRYPOINT</code> 都会以这个用户去运行，使用这个命令一定要确认容器中拥有这个用户，并且拥有足够权限</p></blockquote><hr><h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>设置工作目录。对<code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code>、<code>COPY</code>、<code>ADD</code> 生效。如果不存在则会创建，也可以设置多次。</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /a</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> b</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> c</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">pwd</span></span></span><br><span class="line">// /a/b/c</span><br></pre></td></tr></table></figure><p><code>WORKDIR</code> 可以解析环境变量</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> DIRPATH /path</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$DIRPATH</span>/<span class="variable">$DIRNAME</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">pwd</span></span></span><br><span class="line">// /path/$DIRNAME</span><br></pre></td></tr></table></figure><hr><h4 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h4><p>设置变量命令。<code>ARG</code> 命令定义了一个变量，在 <code>Docker build</code> 创建镜像的时候，使用 <code>--build-arg=</code> 来指定参数。</p><p>如果用户在 build 镜像时，制定了一个参数没有定义在 <code>Dockerfile</code> 中，那么将会有一个 <code>Warning</code>，提示如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Warning] One <span class="keyword">or</span> more build-args [foo] were <span class="keyword">not</span> consumed.</span><br></pre></td></tr></table></figure><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> busybox</span><br><span class="line"><span class="keyword">ARG</span> user1</span><br><span class="line"><span class="keyword">ARG</span> buildno</span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> user1=someuser// 设置默认值</span><br><span class="line"><span class="keyword">ARG</span> buildno=<span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h4 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h4><p>可以理解为声明周期钩子。这个命令只对当前镜像的子镜像生效。</p><p>例如：在子镜像中的 <code>Dockerfile</code> 中添加：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ls</span> -al</span></span><br></pre></td></tr></table></figure><p><code>ls -al</code> 命令不会在子镜像构建或启动时执行</p><p>而其父镜像基于该子镜像构建时，那么 <code>ls -al</code> 命令将会被执行</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ONBUILD</span> [INSTRUCTION]</span><br></pre></td></tr></table></figure><hr><h4 id="STOPSIGNAL"><a href="#STOPSIGNAL" class="headerlink" title="STOPSIGNAL"></a>STOPSIGNAL</h4><p>当容器停止时，给系统发送指令，默认 <code>15</code></p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">STOPSIGNAL</span> signal</span><br></pre></td></tr></table></figure><hr><h4 id="HEALTHCHECK"><a href="#HEALTHCHECK" class="headerlink" title="HEALTHCHECK"></a>HEALTHCHECK</h4><p>容器健康状况检查命令</p><p><strong>语法：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> [OPTIONS] CMD <span class="built_in">command</span>// 在容器内部运行一个命令来检查容器的健康状况</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> NONE   // 在基础镜像中取消健康检查命令</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong></p><ul><li><p><code>–interval=DURATION</code> 两次检查默认的时间间隔为<code>30秒</code></p></li><li><p><code>–timeout=DURATION</code> 健康检查命令运行超时时长，默认<code>30秒</code></p></li><li><p><code>–retries=N</code> 当连续失败指定次数后，则容器被认为是不健康的，状态为<code>unhealthy</code>，默认次数是<code>3</code></p></li></ul><p><code>HEALTHCHECK</code> 命令只能出现一次，如果出现了多次，只有最后一个生效。</p><p><code>CMD</code> 后边的命令的返回值决定了本次健康检查是否成功，具体的返回值如下：</p><ul><li><p><code>0</code>  <code>success</code> - 表示容器是健康的</p></li><li><p><code>1</code>  <code>unhealthy</code> - 表示容器已经不能工作了</p></li><li><p><code>2</code>  <code>reserved</code> - 保留值</p></li></ul></blockquote><p><strong>示例</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> --interval=5m --<span class="built_in">timeout</span>=3s \// 两次检查间隔5分钟，超时时间3秒</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> curl -f http://localhost/ || <span class="built_in">exit</span> 1// 健康检查命令</span></span><br></pre></td></tr></table></figure><h3 id="单阶段构建镜像"><a href="#单阶段构建镜像" class="headerlink" title="单阶段构建镜像"></a>单阶段构建镜像</h3><p>现在都是前后端分离，这里也是进行前后端分开构建镜像说明。</p><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>构建一个镜像，需要寻找合适的基底镜像。前端使用 <code>Vue</code>，那么就要了解 <code>Vue</code> 运行所需要的环境。</p><p><code>Vue</code> 需要使用 <code>Node.js</code> 进行解析，那么就需要安装 <code>Node.js</code> 的环境。安装 <code>Node.js</code> 很慢，而且安装不一定安装得完全。考虑到最终上线，还是要使用容器进行创建，所以去下载一个 <code>Node.js</code> 的环境。这里使用的是<code>node:16.15.0</code> 版本。</p><h5 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h5><p>将 <code>Node.js</code> 镜像下载到本地</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull node：<span class="number">16.15</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>下载完毕后，运行一个 <code>Node.js</code> 的环境。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name webserver-vue -p <span class="number">8080</span>:<span class="number">8080</span> node:<span class="number">16.15</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h5 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h5><p>查看容器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls</span><br></pre></td></tr></table></figure><p>进入到容器内</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -id webserver-vue bash</span><br></pre></td></tr></table></figure><p>需要在容器里运行 <code>Vue</code> 的代码，由研发提供代码，怎么去获取代码？到 <code>Gitlab</code> 管理仓库下载</p><p>在容器里使用 <code>Git</code> 进行下载到本地</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/hloins/webserver-vue.git</span></span><br></pre></td></tr></table></figure><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><p>可以得到一个 <code>webserver-vue</code> 的目录，进入到 <code>webserver-vue</code> 目录</p><p>要运行 <code>Vue</code> 项目，首先需要安装依赖，将依赖包安装到本地</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h5 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h5><p>启动 <code>Vue</code> 项目</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h5 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h5><p>启动成功后，浏览器访问 <code>8080</code> 端口，可以看到  <code>Vue</code> 项目已经启动成功。</p><h5 id="Dockerfile-构建"><a href="#Dockerfile-构建" class="headerlink" title="Dockerfile 构建"></a>Dockerfile 构建</h5><p>首先清空容器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f `docker ps -a -q`<span class="comment">// 清空容器</span></span><br><span class="line">    </span><br><span class="line">docker ps -a<span class="comment">// 查看已清空</span></span><br></pre></td></tr></table></figure><p>创建工作目录</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/docker-images/webserver-vue</span><br></pre></td></tr></table></figure><p>在该目录编写 <code>Dockerfile</code> （<strong>注意首字母大写，且没有后缀</strong>）</p><p>所有的 <code>Dockerfile</code> 都叫 <code>Dockerfile</code>。区分不同镜像的 <code>Dockerfile</code>，按上级目录名称进行区分</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">16.15</span>.<span class="number">0</span><span class="comment"># 基底镜像</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> git <span class="built_in">clone</span> https://gitee.com/mirschao/webserver-vue.git    <span class="comment"># 下载代码</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> webserver-vue                                           <span class="comment"># 工作目录</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install                                                 <span class="comment"># 安装依赖</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span>                                                     <span class="comment"># 暴露端口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;serve&quot;</span>]                                     <span class="comment"># 启动指令(容器启动时运行)</span></span></span><br></pre></td></tr></table></figure><p>触发构建</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/docker-images/webserver</span><br><span class="line">$ docker build -t webserver:v1<span class="number">.0</span> .     <span class="comment">// 指定自定义镜像的名称 和 tag，使用当前目录下的 Dockerfile 进行构建</span></span><br></pre></td></tr></table></figure><p>运行镜像</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name webserver-vue-porject -p <span class="number">8080</span>:<span class="number">8080</span> webserver-vue:v1<span class="number">.0</span></span><br></pre></td></tr></table></figure><p>查看容器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>访问项目</p><p>浏览器访问<code>8080</code>端口，访问运行的项目</p><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><p>这里以 <code>Python</code> 为例。以下有两个版本的 <code>Python</code>，正式版（921M）包含 <code>Python</code> 的所有功能，<code>alpine</code>简版包含<code>Python</code> 运行的基础功能。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED      SIZE</span><br><span class="line">python       alpine    <span class="number">7</span>bc17fb245bd   <span class="number">4</span> days ago   <span class="number">51</span><span class="variable">.7MB</span></span><br><span class="line">python       latest    a8405b7e74cf   <span class="number">4</span> days ago   <span class="number">921</span>MB</span><br></pre></td></tr></table></figure><p>在构建项目时，所使用的基底镜像越大，那么构建出来的项目包也就越大。所以通常使用简版的 <code>alpine</code> 的基底。需要哪些功能，在自行安装即可。</p><h5 id="准备环境-1"><a href="#准备环境-1" class="headerlink" title="准备环境"></a>准备环境</h5><p>加载 <code>Python</code> 运行环境，启动容器并向外暴露 <code>8000</code> 端口</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># docker run -itd --name webserver-backend -p 8000:8000 python:alpine</span></span><br><span class="line"><span class="number">79b</span>53ab8eae25c4fbff70e87b97c0e83ae05c8cc1d1f5957a05083b7ac8ee921</span><br></pre></td></tr></table></figure><h5 id="下载代码-1"><a href="#下载代码-1" class="headerlink" title="下载代码"></a>下载代码</h5><p>进入容器。使用 <code>alpine</code> 版本，进入容器需要使用 <code>sh</code> 命令</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># docker exec -it webserver-backend sh</span></span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p>使用 <code>bash</code> 命令，会提示没有该命令，如下报错</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># docker exec -it webserver-backend bash</span></span><br><span class="line">OCI runtime exec failed: exec failed: unable to start container process: exec: <span class="string">&quot;bash&quot;</span>: executable file <span class="keyword">not</span> found in $PATH: unknown</span><br></pre></td></tr></table></figure></blockquote><p>使用 <code>Git</code> 下载代码</p><p>需要在容器外下载好代码，再拷贝进容器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># git clone https:<span class="comment">//gitee.com/mirschao/webserver-backend.git</span></span></span><br><span class="line"></span><br><span class="line"># 拷贝至容器 webserver-backend 根目录</span><br><span class="line">[root@localhost soft]<span class="meta"># docker cp webserver-backend webserver-backend:/</span></span><br><span class="line">Preparing to copy...</span><br><span class="line">Copying to container - <span class="number">32.77</span>kB</span><br><span class="line">Copying to container - <span class="number">65.54</span>kB</span><br><span class="line">Copying to container - <span class="number">98.3</span>kB</span><br><span class="line">Copying to container - <span class="number">111.1</span>kB</span><br><span class="line">Successfully copied <span class="number">111.1</span>kB to webserver-backend:/</span><br></pre></td></tr></table></figure><p>进入容器查看拷贝的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost soft]<span class="meta"># docker exec -it webserver-backend sh</span></span><br><span class="line">/ <span class="meta"># cd webserver-backend</span></span><br><span class="line">/webserver-backend <span class="meta"># ls -l</span></span><br><span class="line">total <span class="number">28</span></span><br><span class="line">-rw-r--r--    <span class="number">1</span> root     root           <span class="number">231</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">13</span> Dockerfile</span><br><span class="line">-rw-r--r--    <span class="number">1</span> root     root         <span class="number">11357</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">13</span> LICENSE</span><br><span class="line">-rw-r--r--    <span class="number">1</span> root     root            <span class="number">35</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">13</span> README.md</span><br><span class="line">-rwxr-xr-x    <span class="number">1</span> root     root           <span class="number">672</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">13</span> manage.py</span><br><span class="line">-rw-r--r--    <span class="number">1</span> root     root            <span class="number">14</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">13</span> requirements.txt</span><br><span class="line">drwxr-xr-x    <span class="number">2</span> root     root            <span class="number">89</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">13</span> webserverbackend</span><br></pre></td></tr></table></figure><p>主要关注 <code>requirements.txt</code> 文件，这里存储了一些需要的依赖包</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/webserver-backend <span class="meta"># cat requirements.txt</span></span><br><span class="line">Django==<span class="number">4.0</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p>项目如果需要其它的依赖包，可以写入到 <code>requirements.txt</code> 文件里，然后在这里安装。</p></blockquote><h5 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h5><p><code>python</code> 安装工具 <code>pip</code> </p><p>（<code>java</code> 的安装命令是 <code>mvn</code>， <code>go</code> 安装命令是 <code>go install</code>， <code>vue</code> 是 <code>npm install</code>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -i 使用哪个加速镜像-r 指定使用哪个文件安装里面的依赖</span><br><span class="line">pip install -i https:<span class="comment">//mirrors.ustc.edu.cn/pypi/web/simple -r requirements.txt</span></span><br></pre></td></tr></table></figure><p>安装如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/webserver-backend <span class="meta"># pip install -i https:<span class="comment">//mirrors.ustc.edu.cn/pypi/web/simple -r requirements.txt</span></span></span><br><span class="line">Looking in indexes: https:<span class="comment">//mirrors.ustc.edu.cn/pypi/web/simple</span></span><br><span class="line">Collecting Django==<span class="number">4.0</span><span class="number">.4</span></span><br><span class="line">  Downloading https:<span class="comment">//mirrors.bfsu.edu.cn/pypi/web/packages/66/90/bce00eb942fbc47b0774ac78910ee4e6f719572aad56dc238823e5d0ee54/Django-4.0.4-py3-none-any.whl (8.0 MB)</span></span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class="number">8.0</span>/<span class="number">8.0</span> MB <span class="number">1.8</span> MB/s eta <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Collecting asgiref&lt;<span class="number">4</span>,&gt;=<span class="number">3.4</span><span class="number">.1</span></span><br><span class="line">  Downloading https:<span class="comment">//mirrors.bfsu.edu.cn/pypi/web/packages/8f/29/38d10a47b322a77b2d12c2b79c789f52956f733cb701d4d5157c76b5f238/asgiref-3.6.0-py3-none-any.whl (23 kB)</span></span><br><span class="line">Collecting sqlparse&gt;=<span class="number">0.2</span><span class="number">.2</span></span><br><span class="line">  Downloading https:<span class="comment">//mirrors.bfsu.edu.cn/pypi/web/packages/97/d3/31dd2c3e48fc2060819f4acb0686248250a0f2326356306b38a42e059144/sqlparse-0.4.3-py3-none-any.whl (42 kB)</span></span><br><span class="line">     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ <span class="number">42.8</span>/<span class="number">42.8</span> kB <span class="number">3.2</span> MB/s eta <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">Installing collected packages: sqlparse, asgiref, Django</span><br><span class="line">Successfully installed Django<span class="number">-4.0</span><span class="number">.4</span> asgiref<span class="number">-3.6</span><span class="number">.0</span> sqlparse<span class="number">-0.4</span><span class="number">.3</span></span><br><span class="line">WARNING: Running pip as the <span class="string">&#x27;root&#x27;</span> user can result in broken permissions <span class="keyword">and</span> conflicting behaviour with the system package manager. It is recommended to use a <span class="keyword">virtual</span> environment instead: https:<span class="comment">//pip.pypa.io/warnings/venv</span></span><br><span class="line"></span><br><span class="line">[notice] A <span class="keyword">new</span> release of pip available: <span class="number">22.3</span><span class="number">.1</span> -&gt; <span class="number">23.0</span><span class="number">.1</span></span><br><span class="line">[notice] To update, run: pip install --upgrade pip</span><br><span class="line">/webserver-backend #</span><br></pre></td></tr></table></figure><h5 id="启动项目-1"><a href="#启动项目-1" class="headerlink" title="启动项目"></a>启动项目</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/webserver-backend <span class="meta"># python manage.py runserver 0.0.0.0:8000</span></span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line"><span class="function">System check identified no <span class="title">issues</span> <span class="params">(<span class="number">0</span> silenced)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">You have 18 unapplied <span class="title">migration</span><span class="params">(s)</span>. Your project may <span class="keyword">not</span> work properly until you apply the migrations <span class="keyword">for</span> <span class="title">app</span><span class="params">(s)</span>: admin, auth, contenttypes, sessions.</span></span><br><span class="line"><span class="function">Run <span class="string">&#x27;python manage.py migrate&#x27;</span> to apply them.</span></span><br><span class="line"><span class="function">March <span class="number">19</span>, <span class="number">2023</span> - <span class="number">01</span>:<span class="number">48</span>:<span class="number">02</span></span></span><br><span class="line"><span class="function">Django version <span class="number">4.0</span><span class="number">.4</span>, using settings <span class="string">&#x27;webserverbackend.settings&#x27;</span></span></span><br><span class="line"><span class="function">Starting development server at http://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8000</span>/</span></span><br><span class="line"><span class="function">Quit the server with CONTROL-C.</span></span><br></pre></td></tr></table></figure><h5 id="访问项目-1"><a href="#访问项目-1" class="headerlink" title="访问项目"></a>访问项目</h5><p>浏览器访问地址 <code>192.168.10.165:8000</code>，可以看到如下页面，项目启动成功。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230319095123365.png" alt="image-20230319095123365"></p><h5 id="Dockerfile-构建-1"><a href="#Dockerfile-构建-1" class="headerlink" title="Dockerfile 构建"></a>Dockerfile 构建</h5><p>后端需要将 <code>Dockerfile</code> 一起提交至 <code>Gitlab</code> 仓库，和前端不同。</p><p>下载好代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># git clone https:<span class="comment">//gitee.com/mirschao/webserver-backend.git</span></span></span><br></pre></td></tr></table></figure><p>查看代码文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost webserver-backend]<span class="meta"># ll</span></span><br><span class="line">total <span class="number">28</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root   <span class="number">231</span> Mar <span class="number">18</span> <span class="number">18</span>:<span class="number">13</span> Dockerfile</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">11357</span> Mar <span class="number">18</span> <span class="number">18</span>:<span class="number">13</span> LICENSE</span><br><span class="line">-rwxr-xr-x. <span class="number">1</span> root root   <span class="number">672</span> Mar <span class="number">18</span> <span class="number">18</span>:<span class="number">13</span> manage.py</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root    <span class="number">35</span> Mar <span class="number">18</span> <span class="number">18</span>:<span class="number">13</span> README.md</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root    <span class="number">14</span> Mar <span class="number">18</span> <span class="number">18</span>:<span class="number">13</span> requirements.txt</span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root    <span class="number">89</span> Mar <span class="number">18</span> <span class="number">18</span>:<span class="number">13</span> webserverbackend</span><br></pre></td></tr></table></figure><p><code>Dockerfile</code> 是以当前父级目录为根目录</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:alpine3.<span class="number">15</span><span class="comment"># 基底镜像</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> webserverbackend<span class="comment"># 工作目录</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . ./webserverbackend<span class="comment"># 拷贝代码</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -i https://mirrors.ustc.edu.cn/pypi/web/simple -r requirements.txt<span class="comment"># 安装依赖</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span>   <span class="comment"># 暴露端口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;manager.py&quot;</span>, <span class="string">&quot;runserver&quot;</span>, <span class="string">&quot;0.0.0.0:8000&quot;</span>]<span class="comment"># 启动指令</span></span></span><br></pre></td></tr></table></figure><p>触发构建</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t webserver-backend:v1<span class="number">.0</span> .</span><br></pre></td></tr></table></figure><p>运行镜像</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name test-webserver-backend<span class="number">-1.1</span> -p <span class="number">8082</span>:<span class="number">8000</span> webserver0backend:v1<span class="number">.0</span></span><br></pre></td></tr></table></figure><h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker log -f webserver-backend</span><br></pre></td></tr></table></figure><h3 id="多阶段构建镜像"><a href="#多阶段构建镜像" class="headerlink" title="多阶段构建镜像"></a>多阶段构建镜像</h3><p>主要应用在编程语言在编译过程中，会产生中间产物，而产物作为上线的依据。</p><p>以前端 <code>Vue</code> 项目为例</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%9E%84%E5%BB%BA-%E5%AF%BC%E5%87%BA.png" alt="多阶段构建-导出"></p><p>制作 <code>Vue</code> 项目的镜像，<code>Vue</code> 项目编译阶段需要使用 <code>Node.js</code>，生成的是静态文件。而在生产环境运行时，只需将静态文件放入 <code>Nginx</code> 中即可，并不需要 <code>Node.js</code>。那么在制作镜像时就没有必要以 <code>Node.js</code> 为基底镜像，而是使用的是 <code>Nginx</code> 作为基底镜像。这样可以缩小制作出来的镜像大小，<strong>符合制作出来的镜像尽量小的原则</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost soft]<span class="meta"># docker image ls</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">python       alpine    <span class="number">7b</span>c17fb245bd   <span class="number">5</span> days ago     <span class="number">51.7</span>MB</span><br><span class="line">python       latest    a8405b7e74cf   <span class="number">5</span> days ago     <span class="number">921</span>MB</span><br><span class="line">nginx        latest    <span class="number">904b</span>8cb13b93   <span class="number">2</span> weeks ago    <span class="number">142</span>MB</span><br><span class="line">node         <span class="number">16.15</span><span class="number">.0</span>   <span class="number">9</span>d200cd667d5   <span class="number">9</span> months ago   <span class="number">907</span>MB</span><br></pre></td></tr></table></figure><h4 id="下载代码-2"><a href="#下载代码-2" class="headerlink" title="下载代码"></a>下载代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost soft]<span class="meta"># git clone https:<span class="comment">//gitee.com/mirschao/webserver-vue.git</span></span></span><br><span class="line">Cloning into <span class="string">&#x27;webserver-vue&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: <span class="number">38</span>, done.</span><br><span class="line">remote: Counting objects: <span class="number">100</span>% (<span class="number">38</span>/<span class="number">38</span>), done.</span><br><span class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">32</span>/<span class="number">32</span>), done.</span><br><span class="line">remote: Total <span class="number">38</span> (delta <span class="number">6</span>), reused <span class="number">0</span> (delta <span class="number">0</span>), pack-reused <span class="number">0</span></span><br><span class="line">Unpacking objects: <span class="number">100</span>% (<span class="number">38</span>/<span class="number">38</span>), done.</span><br></pre></td></tr></table></figure><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM node:<span class="number">16.15</span><span class="number">.0</span></span><br><span class="line"># FROM node:<span class="number">16.15</span><span class="number">.0</span> AS basic</span><br><span class="line">COPY ./ /app</span><br><span class="line">WORKDIR /app</span><br><span class="line">RUN npm install &amp;&amp; npm run build</span><br><span class="line"></span><br><span class="line">FROM nginx:<span class="number">1.21</span></span><br><span class="line">RUN mkdir /app</span><br><span class="line">COPY --from=<span class="number">0</span> /app/dist /app# <span class="number">0</span> 代表第一个基底镜像(推荐)【从之前的镜像拷贝产物】</span><br><span class="line"># COPY basic:/app/dist /app# 别名为 basic 的基底镜像</span><br><span class="line">COPY nginx.conf /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><h4 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h4><p>nginx.conf</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">user nginx;</span><br><span class="line">worker_process <span class="number">1</span>;</span><br><span class="line">error_log     /var/log/nginx/error.log warn;</span><br><span class="line">pid           /var/run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include          /etc/nginx/mime.types;</span><br><span class="line">    default_type     application/octet-strean;</span><br><span class="line">    log_format    main   <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &#x27;</span>;</span><br><span class="line">    acess_log        /var/log/nginx/access.log main;</span><br><span class="line">    sendfile             on;</span><br><span class="line">    keepalive_timeout    <span class="number">65</span>;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen           <span class="number">80</span>;</span><br><span class="line">        server_name      localhost;</span><br><span class="line">        location / &#123;                                <span class="comment">// 使用的是 location 根</span></span><br><span class="line">            root         /app;                      <span class="comment">// java 根设置在了根目录下的 /app</span></span><br><span class="line">            index        index.html;                <span class="comment">// 主页文件</span></span><br><span class="line">            try_files    $uri $uri/ /index.html;    <span class="comment">// 尝试使用用户的uri地址访问主页，try_files</span></span><br><span class="line">                                                    <span class="comment">// Vue中经常使用，从根目录下开始匹配用户的 uri</span></span><br><span class="line">        &#125;</span><br><span class="line">        error_page       <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /<span class="number">50</span>x.html; <span class="comment">// 错误页面</span></span><br><span class="line">        location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">            root         /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h4><p>将 <code>Dockerfile</code> 放入下载的代码目录下，进行镜像制作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost webserver-vue]<span class="meta"># docker build -t vue-project:v1.0 .</span></span><br></pre></td></tr></table></figure><h4 id="启动项目-2"><a href="#启动项目-2" class="headerlink" title="启动项目"></a>启动项目</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name vue-project -p <span class="number">80</span>:<span class="number">80</span> vue-project:v1<span class="number">.0</span></span><br></pre></td></tr></table></figure><p>在自定义 <code>Dockerfile</code> 时，并未对外暴露 <code>80</code> 端口，但这边使用了 <code>80</code> 端口，是因为在基底镜像 <code>Nginx</code> 中已经暴露了该端口。</p><p>在<a href="https://hub.docker.com/">dockerhub</a>上查找 <code>Nginx-1.21</code>镜像版本</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230319114515520.png" alt="image-20230319114515520"></p><p>找到 <code>1.21</code> 版本，查看它的 <code>Dockerfile</code> 文件，可以看到已经暴露了 <code>80</code> 端口</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230319114737663.png" alt="image-20230319114737663"></p><p>在更改基底镜像时，基底镜像原有的配置是不会被更改的。除非使用相同的 <code>EXPOSE</code> 去覆盖它。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dockerfile </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins pipeline 流水线</title>
      <link href="/2023/03/12/DevOps/Jenkins/Jenkins%20pipeline%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
      <url>/2023/03/12/DevOps/Jenkins/Jenkins%20pipeline%E6%B5%81%E6%B0%B4%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><h3 id="Jenkins-自动化集成架构图"><a href="#Jenkins-自动化集成架构图" class="headerlink" title="Jenkins 自动化集成架构图"></a>Jenkins 自动化集成架构图</h3><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/Jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%B6%E6%9E%84%E5%9B%BE-%E5%AF%BC%E5%87%BA.png" alt="Jenkins自动化架构图-导出"></p><h3 id="Git-插件安装"><a href="#Git-插件安装" class="headerlink" title="Git 插件安装"></a>Git 插件安装</h3><p>在 <code>Jenkins</code> 插件管理页面，搜索 <code>Git</code>，选择第一个进行安装</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312102933186.png" alt="image-20230312102933186"></p><p><code>Jenkins</code>所在的服务器也需要同时安装<code>Git</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install git -y 安装</span><br><span class="line">git --version 安装后查看版本</span><br><span class="line">    </span><br><span class="line">[root@jenkins plugins]<span class="meta"># git --version</span></span><br><span class="line">git version <span class="number">1.8</span><span class="number">.3</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="创建密码凭据"><a href="#创建密码凭据" class="headerlink" title="创建密码凭据"></a>创建密码凭据</h3><p>来到全局凭据管理页面，创建新的凭据</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312103322930.png" alt="image-20230312103322930"></p><p>选择<code>Username with password</code>，输入搭好的<code>GitLab</code>的用户名和密码</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312104623710.png" alt="image-20230312104623710"></p><p>点击创建，之后在项目中就可以使用该凭据</p><h3 id="创建免密凭据"><a href="#创建免密凭据" class="headerlink" title="创建免密凭据"></a>创建免密凭据</h3><h4 id="生成公私钥"><a href="#生成公私钥" class="headerlink" title="生成公私钥"></a>生成公私钥</h4><p>（1）在<code>Jenkins</code>所在服务器上，使用 <code>root</code> 用户生成公私钥</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins .ssh]<span class="meta"># ssh-keygen -t rsa</span></span><br><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.</span><br><span class="line"><span class="function">Enter file in which to save the <span class="title">key</span> <span class="params">(/root/.ssh/id_rsa)</span>:</span></span><br><span class="line"><span class="function">Enter passphrase (empty for no passphrase):</span></span><br><span class="line"><span class="function">Enter same passphrase again:</span></span><br><span class="line"><span class="function">Your identification has been saved in /root/.ssh/id_rsa.</span></span><br><span class="line"><span class="function">Your public key has been saved in /root/.ssh/id_rsa.pub.</span></span><br><span class="line"><span class="function">The key fingerprint is:</span></span><br><span class="line"><span class="function">SHA256:q2ZBTiWdBGrfQXntPTjcxD0vUEM7KGAf3EuNvw2iPUY root@jenkins.com</span></span><br><span class="line"><span class="function">The key<span class="string">&#x27;s randomart image is:</span></span></span><br><span class="line"><span class="string"><span class="function">+---[RSA 2048]----+</span></span></span><br><span class="line"><span class="string"><span class="function">|      .+=+.o *+. |</span></span></span><br><span class="line"><span class="string"><span class="function">|     ..o=oo.*.++.|</span></span></span><br><span class="line"><span class="string"><span class="function">|    o  o..o+.Oo o|</span></span></span><br><span class="line"><span class="string"><span class="function">|   . .o. . .E B..|</span></span></span><br><span class="line"><span class="string"><span class="function">|     +. S  + o * |</span></span></span><br><span class="line"><span class="string"><span class="function">|      o  .. + . .|</span></span></span><br><span class="line"><span class="string"><span class="function">|       ..  . .   |</span></span></span><br><span class="line"><span class="string"><span class="function">|      o.         |</span></span></span><br><span class="line"><span class="string"><span class="function">|     o.          |</span></span></span><br><span class="line"><span class="string"><span class="function">+----[SHA256]-----+</span></span></span><br><span class="line"><span class="string"><span class="function">[root@jenkins .ssh]#</span></span></span><br></pre></td></tr></table></figure><p>（2）到<code>/root/.ssh/</code>目录下，查看生成的私钥</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins .ssh]<span class="meta"># cat id_rsa</span></span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">Proc-Type: <span class="number">4</span>,ENCRYPTED</span><br><span class="line">DEK-Info: AES<span class="number">-128</span>-CBC,<span class="number">5</span>D90BC33F6EE4E4CB1167A16984868B3</span><br><span class="line"></span><br><span class="line">Jo9NHa2yvmxLV6cSo64lDgwJeOokACwQMzzsKtoQnJOcc4BUs/kGRj1dle5IanbW</span><br><span class="line">k47AYRR6ARSFtQaTRi+AfuZ2Yft5Q5iZLcTVzOqSvQWfq/z71Zb0d453faAC7L7k</span><br><span class="line">TgfFCHaFc2ZxnmcHskJcUDbrfpu7eytsbSjNinTsIGdDjdqnbjJYIi4gTZ7G5uhE</span><br><span class="line">jkyivB+ZqNMyqhENQLqGks5AlzFuxkFMWM+d0cHQ3N0WZ/<span class="number">1</span>o8kqJAfgyhe6JUtk2</span><br><span class="line">Opqp7oEig89itgw5578msGNXVPqSwCvMgEHaCavS8wwwXc6RJ51WMsGzYnAMrViu</span><br><span class="line">GR640ECWbRLST277++<span class="number">82</span>Hjc+m8szOlmNTfFV29s2fRGW12hMjrmf0sA0Ju++n5P2</span><br><span class="line"><span class="number">8</span>xFaRvzDTDe5uJ8WbERDTSN4qL10dCKuA0SDLCc6wGwv6/oSDUDyNsJGgAUyggIO</span><br><span class="line">KIeAqXWs1BkM+U3npmrRzZCnct0bOlyJvmBZ+V8CylugDg0CjenG3euefFkKi6M4</span><br><span class="line">Le8Of2r7U4zfNUlw2yNk0btwmrisJWingsNoBLHgQMnIbhKwh2BMfMEcH8zLUenj</span><br><span class="line">rg1BITolVKZhzP+B4+a7sviOWp/Iar8rEAdBABukjpoE6saPLiIl4Ps0kn9nQUHJ</span><br><span class="line">KMURaR/<span class="number">1L</span>JgWXpT/M6Kmqkt6fFHn2bKz781beMNe0vzq9kPtuDP93MpYQs6bhd1F</span><br><span class="line">OD7EkgCr0y1gK5nCzPgmTDe5PGBnkWjIqLrQbi9BHBeDiiDJS/Y1oXRPdFmH/<span class="number">211</span></span><br><span class="line">UmBDUIVAWMjJ7/<span class="number">0</span>Ts1U6egvjzxfYT/L1uYaIe8knMMYn5xr+aManm4vb/nbswyW6</span><br><span class="line">P60Ir1k<span class="comment">//ZQMVJROTB3ZxX0zN8eWJVmAiAPtQRvfUTUstVvksURkXCtSvCRqHIP6</span></span><br><span class="line">LLMdBa0HvdmA4ew3qq7B29GLhE+KXF9xqtO1OrJIaj9hzzJPdqpwVu3FGf5eXIeO</span><br><span class="line">Qoy9Hd/I30gm5jvrGFVrClZsh3afW1kDQppa9kTTEMp9nzr/zC4gOPFeJfOAHjOO</span><br><span class="line">GHXh8OeuKTU0RIjLKNjSWtDCIb+Z7zWs3nuwxQukac0ptFSFIITIiZ+ic4a01fNG</span><br><span class="line">/MsLVlzHQC7FjvICrx8NMCgFjfZCP28HxR2ow3TWT6ZHqY+pFaBlSsZtWRv0i+HQ</span><br><span class="line"><span class="number">5</span>WsbLXgIFXngs1sUyPu/rE+kQAWOdgUSGueGa6t6qvJ0HC8bu3LMrxhjHqr/oJJ5</span><br><span class="line">moohfc8ND6zXmChW8SNXk0LC53IhNov+<span class="number">3</span>JCmjSc1Hd0YV3Vn5/fUXVLySJ+XW7xW</span><br><span class="line">YlLIdt/ZY/YHOqM8ng6GsOLuJ2UtnOvvLWGgpjS12fL9bCtP5+O9AvnX3dtbwG1K</span><br><span class="line">f5XYFtwFBd2U7M0KZbQXJ9oETAyR3gHoTT9Iz997n/fb0ftPyHEGSy1FGzoMa7Aq</span><br><span class="line">OG8LBcVGmM2JlWwRv8TxIkyZVRSwEAyAySYnzWiSY4Vma8m/CNcvbJQ65/F3gCnK</span><br><span class="line">Gaq+CTULpBRpYat14Qk7ISdA5SL9vvWwkyUZ1IAYwppDnGnPOT2ipijfP76xYuNv</span><br><span class="line">fwirwxFdIXS8iKJEbjAAOfilO39y3x3THUC6TXEXgN/<span class="number">6</span>+br6OLcTEmjOQETxsbaW</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><h4 id="Jenkins-配置-SSH-私钥凭据"><a href="#Jenkins-配置-SSH-私钥凭据" class="headerlink" title="Jenkins 配置 SSH 私钥凭据"></a>Jenkins 配置 SSH 私钥凭据</h4><p>（1）在 <code>Jenkins</code>添加一个新的凭据，类型为<code>SSH Username with private key</code>，并添加私钥</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312110711606.png" alt="image-20230312110711606"></p><p>（2）凭据添加成功</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312112520802.png" alt="image-20230312112520802"></p><h4 id="GitLab-添加-SSH-公钥"><a href="#GitLab-添加-SSH-公钥" class="headerlink" title="GitLab 添加 SSH 公钥"></a>GitLab 添加 SSH 公钥</h4><p>（1）到<code>/root/.ssh/</code>目录下，查看生成的公钥</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins .ssh]<span class="meta"># cat /root/.ssh/id_rsa.pub</span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1Qe/<span class="number">8</span>WIKCwGm7LIAdMWUiobabBDQd0OZMUWJyYI9lr6zuovEFjac9Mrhwk/qo+PexTUx8gSgB+A7fYTlvtzmroHpcQkwrCoHKqWkSUo4EPS/pNVbEtAYgVKE0+<span class="number">447</span>zdXXlwzB2be+TeoPhbLatHLP19I8nkpQnaXsrfZsZeWZiH8Nktu2ZMzndhzq/dSZHlBfPBANz4G3XeRNbkNQtA0flRxxJ2tshcDcIMkD21Px6o0Mj/CTfX0W0spwj0uLCHCo0ZQh4e5KjD1rrKWkQ30go+hUHgHpsfEbTGl4FtdQpLeYyI9yHarh5e8DerIgubr179DJnpujB+<span class="number">2</span>RxlDae56d root@jenkins.com</span><br></pre></td></tr></table></figure><p>（2）复制公钥，在<code>GitLab</code>管理页面添加免密登录</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312112108216.png" alt="image-20230312112108216"></p><p>（3）秘钥添加成功</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312112151024.png" alt="image-20230312112151024"></p><h3 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h3><p>在 <code>Jenkins</code> 服务器上，安装 <code>Maven</code>，用来编译和打包项目</p><p><a href="https://maven.apache.org/download.cgi">Maven官网下载地址</a></p><p>（1）<code>Maven</code>压缩包上传至 <code>Jenkins</code> 服务器，解压后拷贝到<code>/opt/maven</code>目录下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 解压</span><br><span class="line">tar -zxvf apache-maven<span class="number">-3.8</span><span class="number">.3</span>-bin.tar.gz</span><br><span class="line"></span><br><span class="line"># 创建目录</span><br><span class="line">mkdir -p /opt/maven</span><br><span class="line">    </span><br><span class="line"># 移动文件</span><br><span class="line">mv apache-maven<span class="number">-3.8</span><span class="number">.3</span><span class="comment">/* /opt/maven    </span></span><br></pre></td></tr></table></figure><p>（2）配置环境变量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 配置环境变量</span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> JAVA_HOME=/usr/lib/jvm/java<span class="number">-11</span>-openjdk<span class="number">-11.0</span><span class="number">.18</span><span class="number">.0</span><span class="number">.10</span><span class="number">-1.</span>el7_9.x86_64</span><br><span class="line"><span class="keyword">export</span> MAVEN_HOME=/opt/maven</span><br><span class="line"><span class="keyword">export</span> PATH=$PATH:$JAVA_HOME/bin:$MAVEN_HOME/bin</span><br><span class="line">    </span><br><span class="line"># 配置生效</span><br><span class="line">source /etc/profile</span><br><span class="line">    </span><br><span class="line"># 查看 Maven 版本</span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure><p>（3）查看<code>Maven</code>版本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins opt]<span class="meta"># mvn -v</span></span><br><span class="line">Apache Maven <span class="number">3.8</span><span class="number">.3</span> (ff8e977a158738155dc465c6a97ffaf31982d739)</span><br><span class="line">Maven home: /opt/maven</span><br><span class="line">Java version: <span class="number">11.0</span><span class="number">.18</span>, vendor: Red Hat, Inc., runtime: /usr/lib/jvm/java<span class="number">-11</span>-openjdk<span class="number">-11.0</span><span class="number">.18</span><span class="number">.0</span><span class="number">.10</span><span class="number">-1.</span>el7_9.x86_64</span><br><span class="line">Default locale: en_US, platform encoding: UTF<span class="number">-8</span></span><br><span class="line">OS name: <span class="string">&quot;linux&quot;</span>, version: <span class="string">&quot;3.10.0-1160.el7.x86_64&quot;</span>, arch: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;unix&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Jenkins-关联-JDK-Maven"><a href="#Jenkins-关联-JDK-Maven" class="headerlink" title="Jenkins 关联 JDK Maven"></a>Jenkins 关联 JDK Maven</h3><p>（1）在全局工具配置页面，配置关联 <code>JDK</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312115125140.png" alt="image-20230312115125140"></p><p>（2）配置关联 <code>Maven</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312115551617.png" alt="image-20230312115551617"></p><p>（3）添加 <code>Jenkins</code> 全局变量</p><ul><li><code>JAVA_HOME</code></li><li><code>M2_HOME</code></li><li><code>PATH+EXTRA</code></li></ul><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312115944039.png" alt="image-20230312115944039"></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312115959729.png" alt="image-20230312115959729"></p><h3 id="配置Maven-的仓库地址"><a href="#配置Maven-的仓库地址" class="headerlink" title="配置Maven 的仓库地址"></a>配置<code>Maven</code> 的仓库地址</h3><p>（1）创建本地仓库目录</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/repo</span><br></pre></td></tr></table></figure><p>（2）修改 <code>Maven</code> 的 <code>settings.xml</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vi /opt/maven/conf/settings.xml</span><br><span class="line">    </span><br><span class="line"># 设置本地仓库目录</span><br><span class="line">&lt;localRepository&gt;/root/repo&lt;/localRepository&gt;</span><br><span class="line">    </span><br><span class="line"># 设置阿里云镜像</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">   &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">   &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">   &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">   &lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><h3 id="安装-Pipeline-插件"><a href="#安装-Pipeline-插件" class="headerlink" title="安装 Pipeline 插件"></a>安装 Pipeline 插件</h3><p>在 <code>Jenkins</code> 插件管理页面，搜索 <code>pipeline</code>，选择第一个进行安装</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312102432748.png" alt="image-20230312102432748"></p><p>等待安装完成</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312102502960.png" alt="image-20230312102502960"></p><h3 id="安装-Maven-integration-插件"><a href="#安装-Maven-integration-插件" class="headerlink" title="安装 Maven integration 插件"></a>安装 Maven integration 插件</h3><p>在 <code>Jenkins</code> 插件管理页面，搜索 <code>Maven integration</code>，选择第一个进行安装</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312121031427.png" alt="image-20230312121031427"></p><h3 id="创建流水线项目"><a href="#创建流水线项目" class="headerlink" title="创建流水线项目"></a>创建流水线项目</h3><p>在<code>GitLab</code>项目管理页面，创建新的空白项目</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312122351357.png" alt="image-20230312122351357"></p><h4 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h4><p>输入项目名称并选择流水线</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312121754256.png" alt="image-20230312121754256"></p><h4 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h4><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312123855826.png" alt="image-20230312123855826"></p><h4 id="配置构建参数"><a href="#配置构建参数" class="headerlink" title="配置构建参数"></a>配置构建参数</h4><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312124209208.png" alt="image-20230312124209208"></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312124232213.png" alt="image-20230312124232213"></p><h4 id="编写-Jenkins-脚本"><a href="#编写-Jenkins-脚本" class="headerlink" title="编写 Jenkins 脚本"></a>编写 <code>Jenkins</code> 脚本</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// git凭证id(在jenkins的全局凭证配置中可获取)</span></span><br><span class="line">def  git_auth = <span class="string">&#x27;a3e0fe22-1263-4e56-8648-0xxx6642e&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// git仓库地址</span></span><br><span class="line">def git_url = <span class="string">&#x27;git@gitlab.xxxx.com:ha/sense-platform/xxxx.git&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目运行的端口</span></span><br><span class="line">def port = <span class="number">3005</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// docker镜像对外暴露的端口</span></span><br><span class="line">def containerport = <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构建版本的名</span></span><br><span class="line">def tag = <span class="string">&#x27;latest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Harbor私服地址</span></span><br><span class="line">def harbor_url = <span class="string">&#x27;10.240.xxx.xxx:1180&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Harbor的项目名称</span></span><br><span class="line">def harbor_project_name = <span class="string">&#x27;sense&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Harbor的凭证</span></span><br><span class="line">def harbor_auth = <span class="string">&#x27;2008c9e0-2f8d-4f39-a9d7-980685xxxxxcab&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义镜像名称（构建成功的镜像名）</span></span><br><span class="line">def imageName = <span class="string">&quot;$&#123;project_name&#125;:$&#123;tag&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123;</span><br><span class="line">        <span class="comment">//根据自己的Jenkinssonarqube-scanner环境修改 （全局工具配置SonarQube Scanner）</span></span><br><span class="line">        scannerHome=tool <span class="string">&#x27;SonarQubeScanner&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages&#123;</span><br><span class="line">        <span class="built_in">stage</span>(<span class="string">&#x27;Pull the source code&#x27;</span>) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                <span class="built_in">checkout</span>([$<span class="keyword">class</span>: <span class="string">&#x27;GitSCM&#x27;</span>,</span><br><span class="line">                branches: [[name: <span class="string">&quot;*/$&#123;branch&#125;&quot;</span>]],</span><br><span class="line">                extensions: [],</span><br><span class="line">                userRemoteConfigs: [[</span><br><span class="line">                            credentialsId: <span class="string">&quot;$&#123;git_auth&#125;&quot;</span>,</span><br><span class="line">                            url: <span class="string">&quot;$&#123;git_url&#125;&quot;</span></span><br><span class="line">                        ]]</span><br><span class="line">                    ])</span><br><span class="line">                echo <span class="string">&#x27;拉取代码成功&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stage</span>(<span class="string">&#x27;Check the source code&#x27;</span>) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                <span class="comment">//引入Jenkinssonarqube环境 （全局工具管理SonarQube servers）</span></span><br><span class="line">                <span class="built_in">withSonarQubeEnv</span>(<span class="string">&#x27;SonarQubeServer&#x27;</span>)&#123;</span><br><span class="line">                    sh <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                        $&#123;scannerHome&#125;/bin/sonar-scanner</span></span><br><span class="line"><span class="string">                    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                echo <span class="string">&#x27;源码审查完毕&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">stage</span>(<span class="string">&#x27;Quality Gate&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">              script &#123;</span><br><span class="line">                  Integer waitSeconds = <span class="number">10</span></span><br><span class="line">                  Integer timeOutMinutes = <span class="number">10</span></span><br><span class="line">                  Integer maxRetry = (timeOutMinutes * <span class="number">60</span>) / waitSeconds as Integer</span><br><span class="line">                  <span class="keyword">for</span> (Integer i = <span class="number">0</span>; i &lt; maxRetry; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                      <span class="built_in">timeout</span>(time: waitSeconds, unit: <span class="string">&#x27;SECONDS&#x27;</span>) &#123;</span><br><span class="line">                        def qg = <span class="built_in">waitForQualityGate</span>()</span><br><span class="line">                        <span class="keyword">if</span> (qg.status != <span class="string">&#x27;OK&#x27;</span>) &#123;</span><br><span class="line">                          error <span class="string">&quot;Sonar quality gate status: $&#123;qg.status&#125;&quot;</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          i = maxRetry</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125; <span class="built_in">catch</span> (Throwable e) &#123;</span><br><span class="line">                      <span class="keyword">if</span> (i == maxRetry - <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> e</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">               echo <span class="string">&#x27;成功获取扫描结果&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stage</span>(<span class="string">&#x27;Compile and build the image&#x27;</span>) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                <span class="comment">// 多了个dockerfile:build，就是激活插件生成镜像</span></span><br><span class="line">                sh <span class="string">&#x27;cd Code &amp;&amp; mvn clean package dockerfile:build&#x27;</span></span><br><span class="line">                echo <span class="string">&#x27;编译，构建镜像成功&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stage</span>(<span class="string">&#x27;Label the image&#x27;</span>) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                <span class="comment">//给镜像打标签</span></span><br><span class="line">                sh <span class="string">&quot;docker tag $&#123;imageName&#125;  $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;imageName&#125;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stage</span>(<span class="string">&#x27;Upload the image to the warehouse&#x27;</span>) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//登录Harbor，并上传镜像</span></span><br><span class="line">                <span class="built_in">withCredentials</span>([<span class="built_in">usernamePassword</span>(</span><br><span class="line">                        credentialsId: <span class="string">&quot;$&#123;harbor_auth&#125;&quot;</span>,</span><br><span class="line">                        passwordVariable: <span class="string">&#x27;password&#x27;</span>,  <span class="comment">// 就是这样的，不用替换，在jk中配置的</span></span><br><span class="line">                        usernameVariable: <span class="string">&#x27;username&#x27;</span>)])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//登录</span></span><br><span class="line">                    sh <span class="string">&quot;docker login -u $&#123;username&#125; -p $&#123;password&#125; $&#123;harbor_url&#125;&quot;</span></span><br><span class="line">                    <span class="comment">//上传镜像</span></span><br><span class="line">                    sh <span class="string">&quot;docker push $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;imageName&#125;&quot;</span></span><br><span class="line">                    echo <span class="string">&#x27;镜像上传成功&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stage</span>(<span class="string">&#x27;Remove the mirror&#x27;</span>) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                <span class="comment">//删除本地镜像</span></span><br><span class="line">                sh <span class="string">&quot;docker rmi -f $&#123;imageName&#125;&quot;</span></span><br><span class="line">                <span class="comment">// 刪除打标签的镜像</span></span><br><span class="line">                sh <span class="string">&quot;docker rmi -f $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;imageName&#125;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stage</span>(<span class="string">&quot;Remote deployment&quot;</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">            <span class="comment">//=====以下为远程调用进行项目部署========</span></span><br><span class="line">                <span class="built_in">sshPublisher</span>(</span><br><span class="line">                        publishers: [</span><br><span class="line">                            <span class="built_in">sshPublisherDesc</span>(</span><br><span class="line">                                configName: <span class="string">&#x27;10.240.131.123&#x27;</span>,</span><br><span class="line">                                transfers: [</span><br><span class="line">                                    <span class="built_in">sshTransfer</span>(</span><br><span class="line">                                        cleanRemote: <span class="literal">false</span>,</span><br><span class="line">                                        excludes: <span class="string">&#x27;&#x27;,</span></span><br><span class="line"><span class="string">                                        // 参数说明  harbor仓库的url、harbor服务暴露的端口、项目名、容器标签、主机端口、容器端口、占位参</span></span><br><span class="line"><span class="string">                                        execCommand: &quot;/opt/jenkins_shell/deploy.sh $harbor_url $harbor_project_name $project_name $tag $port $containerport placeholderparameter&quot;,</span></span><br><span class="line"><span class="string">                                        execTimeout: 360000,</span></span><br><span class="line"><span class="string">                                        flatten: false,</span></span><br><span class="line"><span class="string">                                        makeEmptyDirs: false,</span></span><br><span class="line"><span class="string">                                        noDefaultExcludes: false,</span></span><br><span class="line"><span class="string">                                        patternSeparator: &#x27;</span>[, ]+<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">                                        remoteDirectory: &#x27;</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">                                        remoteDirectorySDF: false,</span></span><br><span class="line"><span class="string">                                        removePrefix: &#x27;</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">                                        sourceFiles: &#x27;</span>&#x27;</span><br><span class="line">                                )],</span><br><span class="line">                                usePromotionTimestamp: <span class="literal">false</span>,</span><br><span class="line">                                useWorkspaceInPromotion: <span class="literal">false</span>,</span><br><span class="line">                                verbose: <span class="literal">false</span></span><br><span class="line">                            )])</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            <span class="built_in">emailext</span>(</span><br><span class="line">                subject: <span class="string">&#x27;构建通知：$&#123;PROJECT_NAME&#125; - Build # $&#123;BUILD_NUMBER&#125; -$&#123;BUILD_STATUS&#125;!&#x27;</span>,</span><br><span class="line">                body: <span class="string">&#x27;$&#123;FILE,path=&quot;./Code/Email.html&quot;&#125;&#x27;</span>,</span><br><span class="line">                to: <span class="string">&#x27;Timli@apjcorp.com&#x27;</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选择脚本位置"><a href="#选择脚本位置" class="headerlink" title="选择脚本位置"></a>选择脚本位置</h4><h3 id="安装Publish-Over-SSH-插件"><a href="#安装Publish-Over-SSH-插件" class="headerlink" title="安装Publish Over SSH 插件"></a>安装<code>Publish Over SSH</code> 插件</h3><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312204127518.png" alt="image-20230312204127518"></p><h4 id="配置Publish-Over-SSH"><a href="#配置Publish-Over-SSH" class="headerlink" title="配置Publish Over SSH"></a>配置<code>Publish Over SSH</code></h4><p>在系统管理的全局配置里，找到 Publish Over SSH 插件配置位置</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312204919916.png" alt="image-20230312204919916"></p><p>点击新增，新增发布项目的目标服务器。即要发布到哪一台远程服务器</p><h4 id="配置SSH-Server"><a href="#配置SSH-Server" class="headerlink" title="配置SSH Server"></a>配置<code>SSH Server</code></h4><p>这里配置的是远程目标服务器，即要发布到的服务器</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312210603583.png" alt="image-20230312210603583"></p><p>点击高级，配置好密码。其它不用关心</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312210749305.png" alt="image-20230312210749305"></p><p>如果远程服务器存在跳板机，在如下位置填写代理服务器</p><h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312210918006.png" alt="image-20230312210918006">连接测试</h4><p>点击<code>Test Configuration</code>，测试能否接通远程服务器。显示 <code>Success</code>，即连接成功</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312211514177.png" alt="image-20230312211514177"></p><h3 id="流水线-Pipeline"><a href="#流水线-Pipeline" class="headerlink" title="流水线 Pipeline"></a>流水线 Pipeline</h3><p>流水线既能作为任务的本身，也能作为 <code>Jenkinsfile</code></p><p>使用流水线可以让我们的任务从<code>UI</code>手动操作，转换为代码化，像 <code>docker</code> 的 <code>dockerfile</code> 一样，从 <code>shell</code> 命令到配置文件。更适合大型项目，可以让团队其他开发者同时参与进来，也可以编辑开发 <code>Jenkins Web UI</code> 不能完成的更复杂的构建逻辑，作为开发者可读性也更好。</p><h4 id="完整语法"><a href="#完整语法" class="headerlink" title="完整语法"></a>完整语法</h4><p>5个必备组成部分</p><ul><li><code>pipeline</code>     整条流水线</li><li><code>agent</code>          执行执行器</li><li><code>stages</code>        所有阶段</li><li><code>stage</code>          某一阶段（可多个）</li><li><code>steps</code>          阶段内的每一步，可执行命令</li></ul><p>示例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># pipeline 外部可以设置常量</span></span><br><span class="line"></span><br><span class="line"># 一整条流水线</span><br><span class="line">pipeline &#123;</span><br><span class="line">    # 执行当前流水线任务时，指定在哪一台机器上运行（any 表示由 Jenkins 自己进行分配）</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    # 执行任务阶段</span><br><span class="line">    stages &#123;</span><br><span class="line">        # 每一个子阶段</span><br><span class="line">        <span class="built_in">stage</span>(<span class="string">&#x27;Hello&#x27;</span>) &#123;</span><br><span class="line">            # 每一步</span><br><span class="line">            steps &#123;</span><br><span class="line">                # 执行命令</span><br><span class="line">                echo <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装-Blue-Ocean-插件"><a href="#安装-Blue-Ocean-插件" class="headerlink" title="安装 Blue Ocean 插件"></a>安装 <code>Blue Ocean</code> 插件</h3><p><code>Blue Ocean</code> 全新的流水线控制<code>UI</code>，可重复执行某阶段代码</p><p>安装 <code>Blue Ocean</code> 可视化界面</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312221907937.png" alt="image-20230312221907937"></p><p>返回首页，可以看到已经安装成功</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312223625763.png" alt="image-20230312223625763"></p><p>打开 <code>Blue Ocean</code>界面</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312223736591.png" alt="image-20230312223736591"></p><p>选择一个项目，查看构建记录。可以重复执行某阶段代码</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312223838854.png" alt="image-20230312223838854"></p><h3 id="编写-Pipeline-脚本"><a href="#编写-Pipeline-脚本" class="headerlink" title="编写 Pipeline 脚本"></a>编写 <code>Pipeline</code> 脚本</h3><p>脚本的主要部分如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="built_in">stage</span>(<span class="string">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;拉取成功&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stage</span>(<span class="string">&#x27;执行构建&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&quot;mvn --version&quot;</span></span><br><span class="line">                sh <span class="string">&quot;mvn clean package -X&quot;</span></span><br><span class="line">                echo <span class="string">&#x27;构建完成&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stage</span>(<span class="string">&#x27;把 jar 包构建为 docker 镜像并运行&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;运行成功&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用<code>流水线语法</code>的片段生成器，生成<code>Pipeline</code>的脚本片段</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312224644632.png" alt="image-20230312224644632"></p><h3 id="Pipeline-自动化部署到-Docker"><a href="#Pipeline-自动化部署到-Docker" class="headerlink" title="Pipeline 自动化部署到 Docker"></a><code>Pipeline</code> 自动化部署到 <code>Docker</code></h3><h4 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h4><p>使用 <code>流水线语法</code>，生成 <code>Git</code> 拉取远程仓库代码的  <code>Pipeline</code>脚本片段</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312225132722.png" alt="image-20230312225132722"></p><p>生成的<code>Git</code>拉取代码的脚本片段如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch: <span class="string">&#x27;main&#x27;</span>, credentialsId: <span class="string">&#x27;350b53fe-2913-45b8-af9e-f3f46574e825&#x27;</span>, url: <span class="string">&#x27;http://192.168.10.161:9091/butterfly/spring-boot-blank-demo.git&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="编译代码"><a href="#编译代码" class="headerlink" title="编译代码"></a>编译代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn --version</span><br><span class="line">mvn clean package -X</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p><code>sh &quot;mvn --version&quot;</code><br><code>sh &quot;mvn clean package -X&quot;</code></p><p>该两行命令是单独执行的，如果第一条命令是进入到指定目录，第二条命令执行时不会停留到第一条的指定目录</p><p>如果需要第二条命令在第一条命令的上下文继续执行，可以使用三双引号<code>&quot;&quot;&quot;</code>一次执行多条命令：</p><p><code>sh &quot;&quot;&quot;</code></p><p>​    <code>cd /root</code></p><p>​    <code>...</code></p><p><code>&quot;&quot;&quot;</code></p></blockquote><h4 id="发布项目"><a href="#发布项目" class="headerlink" title="发布项目"></a>发布项目</h4><p>项目包的工作空间 <code>workspace</code></p><p>找到流水线项目 <code>mytest</code>，可以看到编译成功后的<code>jar</code>包</p><p><code>spring-boot-blank-demo-0.0.1-SNAPSHOT.jar</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins target]<span class="meta"># pwd</span></span><br><span class="line">/var/lib/jenkins/workspace/mytest/target</span><br><span class="line">[root@jenkins target]<span class="meta"># ll</span></span><br><span class="line">total <span class="number">8660</span></span><br><span class="line">drwxr-xr-x <span class="number">3</span> jenkins jenkins      <span class="number">47</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">34</span> classes</span><br><span class="line">drwxr-xr-x <span class="number">3</span> jenkins jenkins      <span class="number">25</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">34</span> generated-sources</span><br><span class="line">drwxr-xr-x <span class="number">3</span> jenkins jenkins      <span class="number">30</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">34</span> generated-test-sources</span><br><span class="line">drwxr-xr-x <span class="number">2</span> jenkins jenkins      <span class="number">28</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">34</span> maven-archiver</span><br><span class="line">drwxr-xr-x <span class="number">3</span> jenkins jenkins      <span class="number">35</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">34</span> maven-status</span><br><span class="line">-rw-r--r-- <span class="number">1</span> jenkins jenkins <span class="number">8862942</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">34</span> spring-boot-blank-demo<span class="number">-0.0</span><span class="number">.1</span>-SNAPSHOT.jar</span><br><span class="line">-rw-r--r-- <span class="number">1</span> jenkins jenkins    <span class="number">2837</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">34</span> spring-boot-blank-demo<span class="number">-0.0</span><span class="number">.1</span>-SNAPSHOT.jar.original</span><br><span class="line">drwxr-xr-x <span class="number">2</span> jenkins jenkins     <span class="number">132</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">34</span> surefire</span><br><span class="line">drwxr-xr-x <span class="number">2</span> jenkins jenkins     <span class="number">169</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">34</span> surefire-reports</span><br><span class="line">drwxr-xr-x <span class="number">3</span> jenkins jenkins      <span class="number">17</span> Mar <span class="number">19</span> <span class="number">01</span>:<span class="number">34</span> test-classes</span><br></pre></td></tr></table></figure><h5 id="清理测试服务器"><a href="#清理测试服务器" class="headerlink" title="清理测试服务器"></a>清理测试服务器</h5><p>主要清理之前所发布的文件，及之前发布成功运行的容器和镜像</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230319231201053.png" alt="image-20230319231201053"></p><p>生成的流水线脚本如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sshPublisher(publishers<span class="punctuation">:</span> <span class="punctuation">[</span>sshPublisherDesc(configName<span class="punctuation">:</span> &#x27;ProjectServer&#x27;<span class="punctuation">,</span> transfers<span class="punctuation">:</span> <span class="punctuation">[</span>sshTransfer(cleanRemote<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> excludes<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span> execCommand<span class="punctuation">:</span> &#x27;&#x27;&#x27;rm -fr *</span><br><span class="line">docker stop demo</span><br><span class="line">docker rm demo</span><br><span class="line">docker rmi demo<span class="punctuation">:</span>v1<span class="number">.0</span>&#x27;&#x27;&#x27;<span class="punctuation">,</span> execTimeout<span class="punctuation">:</span> <span class="number">120000</span><span class="punctuation">,</span> flatten<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> makeEmptyDirs<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> noDefaultExcludes<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> patternSeparator<span class="punctuation">:</span> &#x27;<span class="punctuation">[</span><span class="punctuation">,</span> <span class="punctuation">]</span>+&#x27;<span class="punctuation">,</span> remoteDirectory<span class="punctuation">:</span> &#x27;/soft&#x27;<span class="punctuation">,</span> remoteDirectorySDF<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> removePrefix<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span> sourceFiles<span class="punctuation">:</span> &#x27;&#x27;)<span class="punctuation">]</span><span class="punctuation">,</span> usePromotionTimestamp<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> useWorkspaceInPromotion<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> verbose<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span>)<span class="punctuation">]</span>)</span><br></pre></td></tr></table></figure><h5 id="发布Jar包"><a href="#发布Jar包" class="headerlink" title="发布Jar包"></a>发布Jar包</h5><p>将编译好的 <code>jar</code> 包，发布到测试服务器。编写<code>Publish Over SSH</code> 的流水线脚本片段来实现</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230319225649978.png" alt="image-20230319225649978"></p><blockquote><p><strong>注意</strong></p><p><code>Publish Over SSH</code> 发布的默认目录是目标服务器的 <code>/root/</code>。<code>Remote directory</code> 配置的目录都是在 <code>/root/</code> 之下，即其父级目录。</p></blockquote><h5 id="发布-Dockerfile"><a href="#发布-Dockerfile" class="headerlink" title="发布 Dockerfile"></a>发布 Dockerfile</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> spring-boot-blank-demo-1.0.jar app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9999</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230319230445193.png" alt="image-20230319230445193"></p><blockquote><p><strong>说明</strong></p><p>找到 <code>Dockerfile</code> 的位置，才能制作镜像</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/soft</span><br><span class="line">docker build -t demo:v1<span class="number">.0</span> .</span><br><span class="line">docker run -d -p <span class="number">9999</span>:<span class="number">8080</span> --name demo demo:v1<span class="number">.0</span></span><br></pre></td></tr></table></figure></blockquote><p>以上两部分生成的流水线脚本片段如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sshPublisher(publishers<span class="punctuation">:</span> <span class="punctuation">[</span>sshPublisherDesc(configName<span class="punctuation">:</span> &#x27;ProjectServer&#x27;<span class="punctuation">,</span> transfers<span class="punctuation">:</span> <span class="punctuation">[</span>sshTransfer(cleanRemote<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> excludes<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span> execCommand<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span> execTimeout<span class="punctuation">:</span> <span class="number">120000</span><span class="punctuation">,</span> flatten<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> makeEmptyDirs<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> noDefaultExcludes<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> patternSeparator<span class="punctuation">:</span> &#x27;<span class="punctuation">[</span><span class="punctuation">,</span> <span class="punctuation">]</span>+&#x27;<span class="punctuation">,</span> remoteDirectory<span class="punctuation">:</span> &#x27;/soft&#x27;<span class="punctuation">,</span> remoteDirectorySDF<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> removePrefix<span class="punctuation">:</span> &#x27;/target&#x27;<span class="punctuation">,</span> sourceFiles<span class="punctuation">:</span> &#x27;**<span class="comment">/*demo*.jar&#x27;), sshTransfer(cleanRemote: false, excludes: &#x27;&#x27;, execCommand: &#x27;&#x27;&#x27;cd /root/soft</span></span><br><span class="line"><span class="comment">docker build -t demo:v1.0 .</span></span><br><span class="line"><span class="comment">docker run -d -p 9999:8080 --name demo demo:v1.0&#x27;&#x27;&#x27;, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: &#x27;[, ]+&#x27;, remoteDirectory: &#x27;/soft&#x27;, remoteDirectorySDF: false, removePrefix: &#x27;&#x27;, sourceFiles: &#x27;Dockerfile&#x27;)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])</span></span><br></pre></td></tr></table></figure><p>发布后，可以在测试服务器上查看所发布的文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost soft]<span class="meta"># pwd</span></span><br><span class="line">/root/soft</span><br><span class="line">[root@localhost soft]<span class="meta"># ll</span></span><br><span class="line">total <span class="number">17252</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root      <span class="number">128</span> Mar <span class="number">19</span> <span class="number">07</span>:<span class="number">44</span> Dockerfile</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">17660667</span> Mar <span class="number">19</span> <span class="number">07</span>:<span class="number">44</span> spring-boot-blank-demo<span class="number">-1.0</span>.jar</span><br></pre></td></tr></table></figure><h5 id="完整-Pipeline-script"><a href="#完整-Pipeline-script" class="headerlink" title="完整 Pipeline script"></a>完整 Pipeline script</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">pipeline <span class="punctuation">&#123;</span></span><br><span class="line">    agent any</span><br><span class="line">    </span><br><span class="line">    tools <span class="punctuation">&#123;</span></span><br><span class="line">        maven <span class="string">&quot;maven3.8.3&quot;</span>      <span class="comment">// 指定接下来要使用的工具</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    stages <span class="punctuation">&#123;</span></span><br><span class="line">        stage(&#x27;Pull code&#x27;) <span class="punctuation">&#123;</span></span><br><span class="line">            steps <span class="punctuation">&#123;</span></span><br><span class="line">                git branch<span class="punctuation">:</span> &#x27;main&#x27;<span class="punctuation">,</span> credentialsId<span class="punctuation">:</span> &#x27;<span class="number">350</span>b53fe<span class="number">-2913</span><span class="number">-45</span>b8-af9e-f3f46574e825&#x27;<span class="punctuation">,</span> url<span class="punctuation">:</span> &#x27;http<span class="punctuation">:</span><span class="comment">//192.168.10.161:9091/butterfly/spring-boot-blank-demo.git&#x27;// 拉取代码</span></span><br><span class="line">                echo &#x27;Pull code success!&#x27;</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        stage(&#x27;Build&#x27;) <span class="punctuation">&#123;</span></span><br><span class="line">            steps <span class="punctuation">&#123;</span></span><br><span class="line">                sh <span class="string">&quot;mvn --version&quot;</span></span><br><span class="line">                sh <span class="string">&quot;mvn clean package -X&quot;</span>     <span class="comment">// mvn 命令在执行时，需要在当前目录下有pom.xml文件</span></span><br><span class="line">                echo &#x27;Build success!&#x27;</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        stage(&#x27;clean image&#x27;) <span class="punctuation">&#123;</span></span><br><span class="line">            steps <span class="punctuation">&#123;</span></span><br><span class="line">                sshPublisher(publishers<span class="punctuation">:</span> <span class="punctuation">[</span>sshPublisherDesc(configName<span class="punctuation">:</span> &#x27;ProjectServer&#x27;<span class="punctuation">,</span> transfers<span class="punctuation">:</span> <span class="punctuation">[</span>sshTransfer(cleanRemote<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> excludes<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span> execCommand<span class="punctuation">:</span> &#x27;&#x27;&#x27;rm -fr *</span><br><span class="line">docker stop demo</span><br><span class="line">docker rm demo</span><br><span class="line">docker rmi demo<span class="punctuation">:</span>v1<span class="number">.0</span>&#x27;&#x27;&#x27;<span class="punctuation">,</span> execTimeout<span class="punctuation">:</span> <span class="number">120000</span><span class="punctuation">,</span> flatten<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> makeEmptyDirs<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> noDefaultExcludes<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> patternSeparator<span class="punctuation">:</span> &#x27;<span class="punctuation">[</span><span class="punctuation">,</span> <span class="punctuation">]</span>+&#x27;<span class="punctuation">,</span> remoteDirectory<span class="punctuation">:</span> &#x27;/soft&#x27;<span class="punctuation">,</span> remoteDirectorySDF<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> removePrefix<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span> sourceFiles<span class="punctuation">:</span> &#x27;&#x27;)<span class="punctuation">]</span><span class="punctuation">,</span> usePromotionTimestamp<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> useWorkspaceInPromotion<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> verbose<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span>)<span class="punctuation">]</span>)</span><br><span class="line">                </span><br><span class="line">            echo &#x27;Clean complete!&#x27;</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">        stage(&#x27;Publish jar&#x27;) <span class="punctuation">&#123;</span></span><br><span class="line">            steps <span class="punctuation">&#123;</span></span><br><span class="line">                sshPublisher(publishers<span class="punctuation">:</span> <span class="punctuation">[</span>sshPublisherDesc(configName<span class="punctuation">:</span> &#x27;ProjectServer&#x27;<span class="punctuation">,</span> transfers<span class="punctuation">:</span> <span class="punctuation">[</span>sshTransfer(cleanRemote<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> excludes<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span> execCommand<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span> execTimeout<span class="punctuation">:</span> <span class="number">120000</span><span class="punctuation">,</span> flatten<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> makeEmptyDirs<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> noDefaultExcludes<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> patternSeparator<span class="punctuation">:</span> &#x27;<span class="punctuation">[</span><span class="punctuation">,</span> <span class="punctuation">]</span>+&#x27;<span class="punctuation">,</span> remoteDirectory<span class="punctuation">:</span> &#x27;/soft&#x27;<span class="punctuation">,</span> remoteDirectorySDF<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> removePrefix<span class="punctuation">:</span> &#x27;/target&#x27;<span class="punctuation">,</span> sourceFiles<span class="punctuation">:</span> &#x27;**<span class="comment">/*demo*.jar&#x27;), sshTransfer(cleanRemote: false, excludes: &#x27;&#x27;, execCommand: &#x27;&#x27;&#x27;cd /root/soft</span></span><br><span class="line"><span class="comment">docker build -t demo:v1.0 .</span></span><br><span class="line"><span class="comment">docker run -d -p 9999:8080 --name demo demo:v1.0&#x27;&#x27;&#x27;, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: &#x27;[, ]+&#x27;, remoteDirectory: &#x27;/soft&#x27;, remoteDirectorySDF: false, removePrefix: &#x27;&#x27;, sourceFiles: &#x27;Dockerfile&#x27;)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])</span></span><br><span class="line"><span class="comment">                echo &#x27;Publish jar success!&#x27;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h5><p>点击保存后，开始构建项目，如下所示，发布了 <code>jar</code> 包和 <code>Dockerfile</code> 两个文件</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230319231514732.png" alt="image-20230319231514732"></p><h4 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h4><p>本流程是自动化构建，自动制作镜像和运行容器。项目的访问端口为 <code>8080</code>，绑定到容器暴露的端口是 <code>9999</code>。在浏览器访问 <code>192.168.10.165:9999/helloworld</code>，可以看到能够正常访问自动化部署好的容器项目</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230319232055605.png" alt="image-20230319232055605"></p><h3 id="使用-Jenkinsfile-创建多分支"><a href="#使用-Jenkinsfile-创建多分支" class="headerlink" title="使用 Jenkinsfile 创建多分支"></a>使用 Jenkinsfile 创建多分支</h3><p>在创建多分支流水线任务时，前提条件是：每个分支下已经存在 <code>Jenkinsfile</code></p><h4 id="创建多分支流水线任务"><a href="#创建多分支流水线任务" class="headerlink" title="创建多分支流水线任务"></a>创建多分支流水线任务</h4><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230319234748932.png" alt="image-20230319234748932"></p><h4 id="配置流水线"><a href="#配置流水线" class="headerlink" title="配置流水线"></a>配置流水线</h4><p>点击 <code>增加源</code>，选择 <code>Git</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230319234924556.png" alt="image-20230319234924556"></p><h4 id="扫描日志"><a href="#扫描日志" class="headerlink" title="扫描日志"></a>扫描日志</h4><p>点击保存后，查看多分支流水线扫描的日志。可以看到，<code>master</code> 和 <code>main</code> 两个分支下的 <code>Jenkinsfile</code> 已经扫描到</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230320000433347.png" alt="image-20230320000433347"></p><h4 id="单独构建"><a href="#单独构建" class="headerlink" title="单独构建"></a>单独构建</h4><p>查看多分支流水线，可以看到，已经出现了这两个分支。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230320000646817.png" alt="image-20230320000646817"></p><p>此时可以分开进行分支单独构建</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230320001404117.png" alt="image-20230320001404117"></p><p>分别构建成功</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230320001239976.png" alt="image-20230320001239976"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pipeline </tag>
            
            <tag> Jenkins自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab 部署</title>
      <link href="/2023/03/01/DevOps/GitLab/GitLab%E9%83%A8%E7%BD%B2/"/>
      <url>/2023/03/01/DevOps/GitLab/GitLab%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="GitLab-安装"><a href="#GitLab-安装" class="headerlink" title="GitLab 安装"></a><code>GitLab</code> 安装</h3><h4 id="设置-GitLab-的-yum-源"><a href="#设置-GitLab-的-yum-源" class="headerlink" title="设置 GitLab 的 yum 源"></a>设置 <code>GitLab</code> 的 yum 源</h4><p>（使用清华镜像源安装 <code>GitLab</code>）</p><ul><li><code>GitLab-ce</code>    社区版</li><li><code>GitLab-ee</code>    企业版（收费）</li></ul><p>在 <code>/etc/yum.repos.d/</code>下新建<code>gitlab-ce.repo</code>，添加如下配置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">vim gitlab-ce.repo</span><br><span class="line"> </span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=gitlab-ce</span><br><span class="line">baseurl=https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</span></span><br><span class="line">gpgcheck=<span class="number">0</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure><h4 id="安装-GitLab"><a href="#安装-GitLab" class="headerlink" title="安装 GitLab"></a>安装 <code>GitLab</code></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 直接安装最新版</span><br><span class="line">yum install -y gitlab-ce</span><br></pre></td></tr></table></figure><p>出现如下<code>banner</code>，表示安装成功</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301223719822.png" alt="image-20230301223719822"></p><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">setenfore <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="修改GitLab配置"><a href="#修改GitLab配置" class="headerlink" title="修改GitLab配置"></a>修改<code>GitLab</code>配置</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line">    </span><br><span class="line"># 修改 IP, 端口任意设置</span><br><span class="line">external_url <span class="string">&#x27;http://192.168.10.161:9091&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="重载配置文件"><a href="#重载配置文件" class="headerlink" title="重载配置文件"></a>重载配置文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p>修改好配置文件后，要使用 <code>gitlab-ctl reconfigure</code> 命令重载一下配置文件，否则不生效即可启动<code>Gitlab</code>。注意，启动过程较长，需要耐心等待。</p></blockquote><p>查看<code>GitLab</code>状态</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost .ssh]<span class="meta"># gitlab-ctl status</span></span><br><span class="line">run: alertmanager: (pid <span class="number">3975</span>) <span class="number">3077</span>s; run: log: (pid <span class="number">1698</span>) <span class="number">4041</span>s</span><br><span class="line">run: gitaly: (pid <span class="number">3983</span>) <span class="number">3077</span>s; run: log: (pid <span class="number">1714</span>) <span class="number">4043</span>s</span><br><span class="line">run: gitlab-exporter: (pid <span class="number">3994</span>) <span class="number">3076</span>s; run: log: (pid <span class="number">1688</span>) <span class="number">4041</span>s</span><br><span class="line">run: gitlab-kas: (pid <span class="number">3996</span>) <span class="number">3076</span>s; run: log: (pid <span class="number">1693</span>) <span class="number">4041</span>s</span><br><span class="line">run: gitlab-workhorse: (pid <span class="number">4002</span>) <span class="number">3075</span>s; run: log: (pid <span class="number">1713</span>) <span class="number">4043</span>s</span><br><span class="line">run: logrotate: (pid <span class="number">4009</span>) <span class="number">3075</span>s; run: log: (pid <span class="number">1722</span>) <span class="number">4043</span>s</span><br><span class="line">run: nginx: (pid <span class="number">4015</span>) <span class="number">3074</span>s; run: log: (pid <span class="number">1686</span>) <span class="number">4041</span>s</span><br><span class="line">run: node-exporter: (pid <span class="number">4022</span>) <span class="number">3074</span>s; run: log: (pid <span class="number">1715</span>) <span class="number">4043</span>s</span><br><span class="line">run: postgres-exporter: (pid <span class="number">4031</span>) <span class="number">3073</span>s; run: log: (pid <span class="number">1708</span>) <span class="number">4041</span>s</span><br><span class="line">run: postgresql: (pid <span class="number">4036</span>) <span class="number">3073</span>s; run: log: (pid <span class="number">1691</span>) <span class="number">4041</span>s</span><br><span class="line">run: prometheus: (pid <span class="number">4121</span>) <span class="number">3073</span>s; run: log: (pid <span class="number">1703</span>) <span class="number">4041</span>s</span><br><span class="line">run: puma: (pid <span class="number">4127</span>) <span class="number">3072</span>s; run: log: (pid <span class="number">1702</span>) <span class="number">4041</span>s</span><br><span class="line">run: redis: (pid <span class="number">4132</span>) <span class="number">3072</span>s; run: log: (pid <span class="number">1687</span>) <span class="number">4041</span>s</span><br><span class="line">run: redis-exporter: (pid <span class="number">4140</span>) <span class="number">3071</span>s; run: log: (pid <span class="number">1716</span>) <span class="number">4043</span>s</span><br><span class="line">run: sidekiq: (pid <span class="number">4145</span>) <span class="number">3071</span>s; run: log: (pid <span class="number">1701</span>) <span class="number">4041</span>s</span><br></pre></td></tr></table></figure><h3 id="GitLab安装目录"><a href="#GitLab安装目录" class="headerlink" title="GitLab安装目录"></a><code>GitLab</code>安装目录</h3><ul><li><p><code>gitlab</code>组件日志路径：<code>/var/log/gitlab</code></p></li><li><p><code>gitlab</code>配置路径：<code>/etc/gitlab/</code>  路径下有<code>gitlab.rb</code>配置文件</p></li><li><p>应用代码和组件依赖程序：<code>/opt/gitlab</code></p></li><li><p>各个组件存储路径： <code>/var/opt/gitlab/</code></p></li><li><p>仓库默认存储路径   <code>/var/opt/gitlab/git-data/repositories</code></p></li><li><p>版本文件备份路径：<code>/var/opt/gitlab/backups/</code></p></li><li><p><code>nginx</code>安装路径：<code>/var/opt/gitlab/nginx/</code></p></li></ul><h3 id="GitLab常用命令汇总"><a href="#GitLab常用命令汇总" class="headerlink" title="GitLab常用命令汇总"></a><code>GitLab</code>常用命令汇总</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 查看服务状态</span><br><span class="line">gitlab-ctl status</span><br><span class="line">使用控制台实时查看日志</span><br><span class="line"># 查看所有的logs; 按 Ctrl-C 退出</span><br><span class="line">gitlab-ctl tail</span><br><span class="line"># 拉取/var/log/gitlab下子目录的日志</span><br><span class="line">gitlab-ctl tail gitlab-rails</span><br><span class="line"># 拉取某个指定的日志文件</span><br><span class="line">gitlab-ctl tail nginx/gitlab_error.log</span><br><span class="line">#启动关闭gitlab</span><br><span class="line">gitlab-ctl start      </span><br><span class="line">gitlab-ctl stop                                #停止            </span><br><span class="line">gitlab-ctl status                              #查看状态</span><br><span class="line">gitlab-ctl restart                             #重启</span><br><span class="line">gitlab-ctl reconfigure   #更新配置文件</span><br><span class="line">gitlab-ctl help                                #帮助</span><br><span class="line">gitlab-rake gitlab:check SANITIZE=<span class="literal">true</span> --trace检查gitlab</span><br><span class="line"><span class="meta">#gitlab 默认的日志文件存放在/var/log/gitlab 目录下</span></span><br><span class="line">gitlab-ctl tail                                #查看所有日志</span><br><span class="line">#禁止 Gitlab 开机自启动</span><br><span class="line">systemctl disable gitlab-runsvdir.service </span><br><span class="line">#启用 Gitlab 开机自启动</span><br></pre></td></tr></table></figure><h3 id="GitLab访问测试"><a href="#GitLab访问测试" class="headerlink" title="GitLab访问测试"></a><code>GitLab</code>访问测试</h3><p>浏览器输入服务器IP：<code>192.168.10.161:9091</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301071747568.png" alt="image-20230301071747568"></p><h3 id="配置默认访问密码"><a href="#配置默认访问密码" class="headerlink" title="配置默认访问密码"></a>配置默认访问密码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]<span class="meta"># cd /opt/gitlab/bin</span></span><br><span class="line">[root@localhost bin]<span class="meta"># gitlab-rails console -e production</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> Ruby:         ruby <span class="number">2.7</span><span class="number">.7</span>p221 (<span class="number">2022</span><span class="number">-11</span><span class="number">-24</span> revision <span class="number">168</span>ec2b1e5) [x86_64-linux]</span><br><span class="line"> GitLab:       <span class="number">15.9</span><span class="number">.1</span> (de8f6619031) FOSS</span><br><span class="line"> GitLab Shell: <span class="number">14.17</span><span class="number">.0</span></span><br><span class="line"> PostgreSQL:   <span class="number">13.8</span></span><br><span class="line">------------------------------------------------------------[ booted in <span class="number">16.73</span>s ]</span><br><span class="line"><span class="function">Loading production <span class="title">environment</span> <span class="params">(Rails <span class="number">6.1</span><span class="number">.7</span><span class="number">.2</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">irb</span><span class="params">(main)</span>:<span class="number">001</span>:<span class="number">0</span>&gt; u=</span>User.<span class="built_in">where</span>(id:<span class="number">1</span>).first</span><br><span class="line">=&gt; #&lt;User id:<span class="number">1</span> @root&gt;</span><br><span class="line"><span class="built_in">irb</span>(main):<span class="number">013</span>:<span class="number">0</span>&gt; u.password=<span class="string">&#x27;20230301&#x27;</span></span><br><span class="line">=&gt; <span class="string">&quot;20230301&quot;</span></span><br><span class="line"><span class="built_in">irb</span>(main):<span class="number">014</span>:<span class="number">0</span>&gt; u.password_confirmation=<span class="string">&#x27;20230301&#x27;</span></span><br><span class="line">=&gt; <span class="string">&quot;20230301&quot;</span></span><br><span class="line"><span class="built_in">irb</span>(main):<span class="number">015</span>:<span class="number">0</span>&gt; u.save!</span><br><span class="line">=&gt; <span class="literal">true</span></span><br><span class="line"><span class="built_in">irb</span>(main):<span class="number">016</span>:<span class="number">0</span>&gt;</span><br></pre></td></tr></table></figure><p>出现<code>true</code>说明设置成功！</p><h3 id="管理员登录"><a href="#管理员登录" class="headerlink" title="管理员登录"></a>管理员登录</h3><p>使用<code>root/20230301</code>登录</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301072703920.png" alt="image-20230301072703920"></p><p>使用登录页面<code>Register now</code>注册的用户<code>luliming</code>，需要管理员通过</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301072831040.png" alt="image-20230301072831040"></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301072926029.png" alt="image-20230301072926029"></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301073106237.png" alt="image-20230301073106237"></p><h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301215109700.png" alt="image-20230301215109700"></p><p>重启生效</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>重启后需要等待一下才能正常访问</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301215444237.png" alt="image-20230301215444237"></p><h3 id="关闭登录页自动注册"><a href="#关闭登录页自动注册" class="headerlink" title="关闭登录页自动注册"></a>关闭登录页自动注册</h3><p>在企业生产环境中，我们一般由项目负责人负责创建用户并分配权限，一般禁止员工私自注册用户，以防给项目开发工作带来安全性上的风险。为了避免员工自动注册，我们一般会禁止Gitlab的自动注册功能。</p><p>使用管理员登录，取消勾选 “已启动注册功能”</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301215728866.png" alt="image-20230301215728866"></p><h3 id="GitLab登录免密认证"><a href="#GitLab登录免密认证" class="headerlink" title="GitLab登录免密认证"></a><code>GitLab</code>登录免密认证</h3><p>Gitlab的登录免密验证，配置完成后，可以使得我们的Gitlab自动执行Git命令而无需登录，对于脚本的编写以及其他项目<em><strong>（如Jenkins）的运用这一步是必须的。</strong></em></p><p><strong>首先</strong>，在想要进行验证的设备上执行命令：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># ssh-keygen                            # 创建秘钥对文件</span></span><br><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.</span><br><span class="line"><span class="function">Enter file in which to save the <span class="title">key</span> <span class="params">(/root/.ssh/id_rsa)</span>:  # 默认公钥和私钥路径</span></span><br><span class="line"><span class="function">Created directory <span class="string">&#x27;/root/.ssh&#x27;</span>.</span></span><br><span class="line"><span class="function">Enter passphrase (empty for no passphrase):               # 设置密码</span></span><br><span class="line"><span class="function">Enter same passphrase again:</span></span><br><span class="line"><span class="function">Your identification has been saved in /root/.ssh/id_rsa.</span></span><br><span class="line"><span class="function">Your public key has been saved in /root/.ssh/id_rsa.pub.  # 生成公钥和私钥文件</span></span><br><span class="line"><span class="function">The key fingerprint is:</span></span><br><span class="line"><span class="function">SHA256:tBgLyuEZzngggNWE8xwrAg+UmJvOdKp1OMDepWid3s4 root@localhost.localdomain</span></span><br><span class="line"><span class="function">The key<span class="string">&#x27;s randomart image is:</span></span></span><br><span class="line"><span class="string"><span class="function">+---[RSA 2048]----+</span></span></span><br><span class="line"><span class="string"><span class="function">|=+o+.            |</span></span></span><br><span class="line"><span class="string"><span class="function">|B.o o            |</span></span></span><br><span class="line"><span class="string"><span class="function">|==o+.o. .        |</span></span></span><br><span class="line"><span class="string"><span class="function">|*Xo*+o = .       |</span></span></span><br><span class="line"><span class="string"><span class="function">|*o#o+ o S        |                                       # 算法秘钥</span></span></span><br><span class="line"><span class="string"><span class="function">| O+=.            |</span></span></span><br><span class="line"><span class="string"><span class="function">|o..o.            |</span></span></span><br><span class="line"><span class="string"><span class="function">|.  ...           |</span></span></span><br><span class="line"><span class="string"><span class="function">|    .E           |</span></span></span><br><span class="line"><span class="string"><span class="function">+----[SHA256]-----+</span></span></span><br></pre></td></tr></table></figure><p>确认生成的秘钥文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@localhost ~]<span class="meta"># cd ./.ssh/</span></span><br><span class="line">[root@localhost .ssh]<span class="meta"># ll</span></span><br><span class="line">total <span class="number">8</span></span><br><span class="line">-rw-------. <span class="number">1</span> root root <span class="number">1766</span> Mar  <span class="number">1</span> <span class="number">06</span>:<span class="number">02</span> id_rsa</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root  <span class="number">408</span> Mar  <span class="number">1</span> <span class="number">06</span>:<span class="number">02</span> id_rsa.pub</span><br></pre></td></tr></table></figure><p>查看本设备的公钥</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost .ssh]<span class="meta"># cat /root/.ssh/id_rsa.pub</span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCtbZqVXqUXkqCMav/Nk5xZXUVoz6sFbvoSSWgHn/rHH/<span class="number">5</span>m2Y9UL5h7s2ovZQKI0v84glCeGivvlGUbupFW7lQrY+AZo5NncgLryTLXf1C/Gain0PnWUQ5ZioMgTsW5ZLumbKASLjw7dZvii+Iz8BCQ9gY8I+DaT6G4t/ayokDNd8zVsjyLGEzggIlWFI9oBbitzwL3GFB4hp1Pew+LOVlz6xXTajzhMvbiUrK4npXot1GY2JU9Kw+i6Wu2qIzWcKZBKgCg92MFl0f2zPLD5AgB43UBeAhh888myixdaxk2HwtRZ/k5nlTjbGIyErFUMU/b9gHebF6W+KhViaseP0Q/ root@localhost.localdomain</span><br></pre></td></tr></table></figure><p>复制公钥，在<code>GitLab</code>管理页面上填写SSH秘钥</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301220645298.png" alt="image-20230301220645298"></p><p>添加完成</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301220752417.png" alt="image-20230301220752417"></p><h3 id="GitLab创建群组"><a href="#GitLab创建群组" class="headerlink" title="GitLab创建群组"></a><code>GitLab</code>创建群组</h3><p>如下页面，点击创建群组</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301220939849.png" alt="image-20230301220939849"></p><p>填写群组信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301221247197.png" alt="image-20230301221247197"></p><p>群组创建成功，点击配置图标</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301221404662.png" alt="image-20230301221404662"></p><p>邀请成员</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301221726038.png" alt="image-20230301221726038"></p><h3 id="GitLab创建项目"><a href="#GitLab创建项目" class="headerlink" title="GitLab创建项目"></a><code>GitLab</code>创建项目</h3><p>进入项目页面，创建空白项目</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301221900956.png" alt="image-20230301221900956"></p><p>填写项目名称，并选择群组 <code>butterfly</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301222029347.png" alt="image-20230301222029347"></p><p>项目创建成功</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301222128474.png" alt="image-20230301222128474"></p><h3 id="GitLab创建用户"><a href="#GitLab创建用户" class="headerlink" title="GitLab创建用户"></a><code>GitLab</code>创建用户</h3><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301222222698.png" alt="image-20230301222222698"></p><p>填写用户信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301222638069.png" alt="image-20230301222638069"></p><p>用户创建成功！</p><h3 id="上传代码到仓库"><a href="#上传代码到仓库" class="headerlink" title="上传代码到仓库"></a>上传代码到仓库</h3><p>首次使用<code>git</code>，需要设置全局用户名和邮箱设置</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301231546728.png" alt="image-20230301231546728"></p><p>在命令行或终端中使用下面的命令可以设置git自己的名字和电子邮件。这是因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="meta"># git config --global user.name <span class="string">&quot;luliming&quot;</span></span></span><br><span class="line">[root@jenkins ~]<span class="meta"># git config --global user.email <span class="string">&quot;1622862463@qq.com&quot;</span></span></span><br></pre></td></tr></table></figure><p>查看配置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins ~]<span class="meta"># git config --list</span></span><br><span class="line">user.name=luliming</span><br><span class="line">user.email=<span class="number">1622862463</span>@qq.com</span><br></pre></td></tr></table></figure><p>这里以<code>Jenkins</code>服务器为例</p><p>在<code>/home/luliming/gitlab_test</code>下，执行如下命令，将测试文本提交至远程<code>GitLab</code>仓库</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins gitlab_test]<span class="meta"># git init</span></span><br><span class="line">Initialized empty Git repository in /home/luliming/gitlab_test/.git/</span><br><span class="line">[root@jenkins gitlab_test]<span class="meta"># touch test.txt</span></span><br><span class="line">[root@jenkins gitlab_test]<span class="meta"># git add test.txt</span></span><br><span class="line">[root@jenkins gitlab_test]<span class="meta"># git commit -m <span class="string">&quot;测试文本&quot;</span></span></span><br><span class="line">[<span class="built_in">master</span> (root-commit) eaf58b3] 测试文本</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">0</span> <span class="built_in">insertions</span>(+), <span class="number">0</span> <span class="built_in">deletions</span>(-)</span><br><span class="line"> create mode <span class="number">100644</span> test.txt</span><br><span class="line">[root@jenkins gitlab_test]<span class="meta"># git push -u origin master</span></span><br><span class="line">Username <span class="keyword">for</span> <span class="string">&#x27;http://192.168.10.161:9091&#x27;</span>: luliming</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">&#x27;http://luliming@192.168.10.161:9091&#x27;</span>:</span><br><span class="line">Counting objects: <span class="number">3</span>, done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), <span class="number">221</span> bytes | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Total <span class="number">3</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote:</span><br><span class="line">remote: To create a merge request <span class="keyword">for</span> master, visit:</span><br><span class="line">remote:   http:<span class="comment">//192.168.10.161:9091/butterfly/gitlab-test/-/merge_requests/new?merge_request%5Bsource_branch%5D=master</span></span><br><span class="line">remote:</span><br><span class="line">To http:<span class="comment">//192.168.10.161:9091/butterfly/gitlab-test.git</span></span><br><span class="line"> * [<span class="keyword">new</span> branch]      master -&gt; master</span><br><span class="line">Branch master set up to track remote branch master from origin.</span><br><span class="line">[root@jenkins gitlab_test]#</span><br></pre></td></tr></table></figure><p>可以看到已经提交成功！</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301235052897.png" alt="image-20230301235052897"></p><h3 id="Git-命令行常用指令的使用"><a href="#Git-命令行常用指令的使用" class="headerlink" title="Git 命令行常用指令的使用"></a>Git 命令行常用指令的使用</h3><table><thead><tr><th>命令</th><th>释义</th></tr></thead><tbody><tr><td><code>git status</code></td><td>上次提交后是否对文件再做了修改项目</td></tr><tr><td><code>git add .</code></td><td>添加所有的变动</td></tr><tr><td><code>git checkout -b</code> 文件夹名称</td><td>创建本地分支并切换分支 git checkout -b pr/ffr</td></tr><tr><td><code>git commit -m</code> “描述”</td><td>提交修改 git commit -m “修改什么”</td></tr><tr><td><code>git merge origin/develop</code> “本地分支”</td><td>合并origin/develop上别人所做的修改到自己的本地分支 git merge origin/develop pr/ffr</td></tr><tr><td><code>git push origin</code> “本地分支”</td><td>合并origin/develop上别人所做的修改到自己的本地分支 git merge origin/develop pr/ffr</td></tr><tr><td><code>git rebase -i</code> 编号</td><td>合并多次提交，将前几次的提交合并为一次</td></tr><tr><td><code>git checkout</code> 分支名</td><td>切换分支 git checkout pr/FFR-color git cherckout develop</td></tr><tr><td><code>git pull</code></td><td>更新当前分支的状态</td></tr><tr><td><code>git branch</code></td><td>列出本地分支</td></tr><tr><td><code>git branch -a</code></td><td>列出本地分支与远程分支</td></tr><tr><td><code>git branch -D</code> 分支名</td><td>删除分支（目前仅用于删除本地分支）</td></tr><tr><td><code>git remote -v</code></td><td>可以查看远程仓库信息</td></tr><tr><td><code>git branch</code> 分支名</td><td>仅仅创建 一个新分支，并不会自动切换到新分支中去</td></tr><tr><td><code>git rebase --abort</code></td><td>退出git rebase</td></tr><tr><td><code>git reset</code> 提交编号</td><td>git rebase -i 提交编号，之后出现错误，可以回退到之前未合并时的日志状态</td></tr><tr><td><code>git commit --amend -m</code> “描述”</td><td>修改上一次的提交的描述</td></tr><tr><td><code>git stash</code></td><td>暂存上一次的修改，准备切换到其他的分支</td></tr><tr><td><code>git stash pop</code></td><td>还原上一次的修改，将暂存的修改加入到新的分支</td></tr></tbody></table><h4 id="提交及修改操作"><a href="#提交及修改操作" class="headerlink" title="提交及修改操作"></a>提交及修改操作</h4><table><thead><tr><th>命令</th><th>释义</th></tr></thead><tbody><tr><td><code>git add</code></td><td>添加文件到暂存区</td></tr><tr><td><code>git status</code></td><td>查看仓库当前的状态，显示有变更的文件。</td></tr><tr><td><code>git diff</code></td><td>比较文件的不同，即暂存区和工作区的差异。</td></tr><tr><td><code>git commit</code></td><td>提交暂存区到本地仓库。</td></tr><tr><td><code>git reset</code></td><td>回退版本。</td></tr><tr><td><code>git rm</code></td><td>删除工作区文件。</td></tr><tr><td><code>git mv</code></td><td>移动或重命名工作区文件。</td></tr></tbody></table><h3 id="GitLab数据备份"><a href="#GitLab数据备份" class="headerlink" title="GitLab数据备份"></a><code>GitLab</code>数据备份</h3><p><code>GitLab</code>创建备份</p><h4 id="手动备份"><a href="#手动备份" class="headerlink" title="手动备份"></a>手动备份</h4><p>使用一条命令即可创建完整的<code>GitLab</code>备份</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>使用命令，会在<code>/var/opt/gitlab/backups</code>目录下创建一个压缩包，这个压缩包就是<code>GitLab</code>整个完整部分。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# gitlab-rake gitlab:backup:create</span><br><span class="line"><span class="number">2023</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">33</span> UTC -- Dumping database ...</span><br><span class="line">Dumping PostgreSQL database gitlabhq_production ... [DONE]</span><br><span class="line"><span class="number">2023</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">39</span> UTC -- Dumping database ... done</span><br><span class="line"><span class="number">2023</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">39</span> UTC -- Dumping repositories ...</span><br><span class="line">&#123;<span class="string">&quot;command&quot;</span>:<span class="string">&quot;create&quot;</span>,<span class="string">&quot;gl_project_path&quot;</span>:<span class="string">&quot;gitlab-instance-77ad3362/Monitoring&quot;</span>,<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;started create&quot;</span>,<span class="string">&quot;relative_path&quot;</span>:<span class="string">&quot;@hashed/6b/86/6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b.git&quot;</span>,<span class="string">&quot;storage_name&quot;</span>:<span class="string">&quot;default&quot;</span>,<span class="string">&quot;time&quot;</span>:<span class="string">&quot;2023-03-01T16:09:40.183Z&quot;</span>&#125;</span><br><span class="line">...</span><br><span class="line"><span class="number">2023</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">40</span> UTC -- Dumping repositories ... done</span><br><span class="line"><span class="number">2023</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">40</span> UTC -- Dumping uploads ...</span><br><span class="line">...</span><br><span class="line"><span class="number">2023</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">40</span> UTC -- Cleaning up /<span class="keyword">var</span>/opt/gitlab/backups/packages<span class="variable">.tar</span><span class="variable">.gz</span></span><br><span class="line"><span class="number">2023</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">40</span> UTC -- Deleting tar staging files ... done</span><br><span class="line"><span class="number">2023</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">40</span> UTC -- Deleting backups/tmp ...</span><br><span class="line"><span class="number">2023</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">40</span> UTC -- Deleting backups/tmp ... done</span><br><span class="line"><span class="number">2023</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">40</span> UTC -- Warning: Your gitlab<span class="variable">.rb</span> <span class="keyword">and</span> gitlab-secrets<span class="variable">.json</span> files contain sensitive data</span><br><span class="line"><span class="keyword">and</span> are <span class="keyword">not</span> included in <span class="keyword">this</span> backup. You will need these files to restore a backup.</span><br><span class="line">Please back them up manually.</span><br><span class="line"><span class="number">2023</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">40</span> UTC -- Backup <span class="number">1677686973_2023_03_01_15</span><span class="variable">.9</span><span class="variable">.1</span> is done.</span><br><span class="line"><span class="number">2023</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">08</span>:<span class="number">09</span>:<span class="number">40</span> -<span class="number">0800</span> -- Deleting backup <span class="keyword">and</span> restore lock file</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p>可以开到一条警告信息</p><p><code>2023-03-01 16:09:40 UTC -- Warning: Your gitlab.rb and gitlab-secrets.json files contain sensitive data and are not included in this backup. You will need these files to restore a backup.</code></p><p>表示 <strong>gitlab.rb</strong> 和 <strong>gitlab-secrets.json</strong> 两个文件包含敏感信息。未被备份到备份文件中。需要手动备份。</p><ol><li><code>/etc/gitlab/gitlab.rb</code> 配置文件须备份</li><li><code>/var/opt/gitlab/nginx/conf</code>  nginx配置文件</li><li><code>/etc/postfix/main.cfpostfix</code>  邮件配置备份</li></ol></blockquote><h5 id="更改备份目录"><a href="#更改备份目录" class="headerlink" title="更改备份目录"></a>更改备份目录</h5><p>可以通过<code>/etc/gitlab/gitlab.rb</code>配置文件来修改默认存放备份文件的目录</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gitlab_rails[<span class="string">&#x27;backup_path&#x27;</span>] = <span class="string">&quot;/home/gitlab-backup&quot;</span></span><br><span class="line">    </span><br><span class="line">#指定备份后数据存放的路径、权限、时间配置</span><br><span class="line">gitlab_rails[<span class="string">&#x27;manage_backup_path&#x27;</span>] = <span class="literal">true</span>                  开启备份功能</span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_path&#x27;</span>] = <span class="string">&quot;/home/gitlab-backup&quot;</span>        指定备份的路径</span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_archive_permissions&#x27;</span>] = <span class="number">0644</span>          备份文件的权限</span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_keep_time&#x27;</span>] = <span class="number">7776000</span>                 备份保留时间</span><br></pre></td></tr></table></figure><h5 id="重载配置"><a href="#重载配置" class="headerlink" title="重载配置"></a>重载配置</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h5 id="创建备份目录并授权"><a href="#创建备份目录并授权" class="headerlink" title="创建备份目录并授权"></a>创建备份目录并授权</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chown -R git:git gitlab-backup</span><br></pre></td></tr></table></figure><p>现在可以使用命令创建完整的<code>GitLab</code>备份</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><h4 id="GitLab自动备份"><a href="#GitLab自动备份" class="headerlink" title="GitLab自动备份"></a><code>GitLab</code>自动备份</h4><p>使用<code>crontab -e</code>添加相应的任务</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># crontab -e</span></span><br><span class="line">    </span><br><span class="line"># 添加相应的任务(凌晨<span class="number">2</span>点执行备份)</span><br><span class="line"><span class="number">0</span> <span class="number">2</span> * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p>环境变量<code>CRON=1</code>的作用是如果没有任何错误发生时， 抑制备份脚本的所有进度输出</p></blockquote><p>查看周期性计划任务</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># crontab -l</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span> * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 详细部署</title>
      <link href="/2023/02/28/DevOps/Jenkins/Jenkins%E9%83%A8%E7%BD%B2/"/>
      <url>/2023/02/28/DevOps/Jenkins/Jenkins%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://so.csdn.net/so/search?q=Jenkins&spm=1001.2101.3001.7020">Jenkins</a>是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件项目可以进行持续集成。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>Jenkins功能包括：<br>1、持续的软件版本发布/测试项目。<br>2、监控外部调用执行的工作。</p><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>关闭<code>selinux</code>和防火墙</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -ri <span class="string">&#x27;/^[^#]*SELINUX=/s#=.+$#=disabled#&#x27;</span> /etc/selinux/config</span><br><span class="line"><span class="meta"># systemctl stop firewalld</span></span><br><span class="line"><span class="meta"># systemctl disable firewalld</span></span><br></pre></td></tr></table></figure><h3 id="Jenkins安装配置"><a href="#Jenkins安装配置" class="headerlink" title="Jenkins安装配置"></a>Jenkins安装配置</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install fontconfig java<span class="number">-11</span>-openjdk -y</span><br><span class="line">wget   https:<span class="comment">//repo.huaweicloud.com/jenkins/redhat-stable/jenkins-2.375.3-1.1.noarch.rpm</span></span><br><span class="line">yum install -y ./jenkins<span class="number">-2.375</span><span class="number">.3</span><span class="number">-1.1</span>.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="查看java版本"><a href="#查看java版本" class="headerlink" title="查看java版本"></a>查看java版本</h3><p>版本必须为11至17的版本，否则<code>Jenkins</code>会报错启动不来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins soft]<span class="meta"># java -version</span></span><br><span class="line">openjdk version <span class="string">&quot;11.0.18&quot;</span> <span class="number">2023</span><span class="number">-01</span><span class="number">-17</span> <span class="function">LTS</span></span><br><span class="line"><span class="function">OpenJDK Runtime <span class="title">Environment</span> <span class="params">(Red_Hat<span class="number">-11.0</span><span class="number">.18</span><span class="number">.0</span><span class="number">.10</span><span class="number">-1.</span>el7_9)</span> <span class="params">(build <span class="number">11.0</span><span class="number">.18</span>+<span class="number">10</span>-LTS)</span></span></span><br><span class="line"><span class="function">OpenJDK 64-Bit Server <span class="title">VM</span> <span class="params">(Red_Hat<span class="number">-11.0</span><span class="number">.18</span><span class="number">.0</span><span class="number">.10</span><span class="number">-1.</span>el7_9)</span> <span class="params">(build <span class="number">11.0</span><span class="number">.18</span>+<span class="number">10</span>-LTS, mixed mode, sharing)</span></span></span><br></pre></td></tr></table></figure><h3 id="启动jenkins服务"><a href="#启动jenkins服务" class="headerlink" title="启动jenkins服务"></a>启动jenkins服务</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># systemctl start jenkins</span></span><br><span class="line">[root@localhost ~]<span class="meta"># systemctl status jenkins.service</span></span><br></pre></td></tr></table></figure><h3 id="查看初始密码"><a href="#查看初始密码" class="headerlink" title="查看初始密码"></a>查看初始密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@jenkins soft]# cat /var/lib/jenkins/secrets/initialAdminPassword</span><br><span class="line">6264dbcaa4414154a6a832db0210dd17</span><br></pre></td></tr></table></figure><h3 id="访问Jenkins"><a href="#访问Jenkins" class="headerlink" title="访问Jenkins"></a>访问<code>Jenkins</code></h3><p>用浏览器打开 <code>http://192.168.10.164:8080</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230228063950163.png" alt="image-20230228063950163"></p><p>输入密码登录后，提示选择安装插件，这里不选择安装任何插件，因为安装源在国外的网站，速度是十分慢还可能失败，后面配置安装插件的源。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230228064025632.png" alt="image-20230228064025632"></p><p>选择<strong>无</strong>，然后安装</p><h3 id="创建管理员用户"><a href="#创建管理员用户" class="headerlink" title="创建管理员用户"></a>创建管理员用户</h3><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230228064710580.png" alt="image-20230228064710580"></p><p>按照提示，保存后提示开始并使用 <code>Jenkins</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230228064922188.png" alt="image-20230228064922188"></p><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>点击 Jenkins &gt; Manage Jenkins</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301010043236.png" alt="image-20230301010043236"></p><p>往下拉，找到 <code>Manage Plugins</code></p><p>点击进入<code>Manage Plugins</code>页面， <code>Advanced</code>，把 <code>Update Site</code>改为国内插件下载地址</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span></span><br></pre></td></tr></table></figure><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301010221967.png" alt="image-20230301010221967"></p><p>修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/jenkins/updates/</span><br><span class="line">sed -i &#x27;s/http:\/\/updates.jenkinsci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27; default.json</span><br></pre></td></tr></table></figure><p>在浏览器输入：<code>http://192.168.10.164:8080/restart</code>，重启 <code>Jenkins</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230228070627315.png" alt="image-20230228070627315"></p><p>重启中</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230228070654471.png" alt="image-20230228070654471"></p><p>登录<code>Jenkins</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230228070745928.png" alt="image-20230228070745928"></p><h3 id="上传插件"><a href="#上传插件" class="headerlink" title="上传插件"></a>上传插件</h3><p><a href="https://github.com/metersphere/jenkins-plugin/releases">下载插件</a></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301010513950.png" alt="image-20230301010513950"></p><blockquote><p><strong>注意</strong></p><p>下载<code>hpi</code>格式的插件文件</p></blockquote><p>到<code>Jenkins</code>的插件管理页面，点击选择文件进行上传。上传完毕后重启 <code>Jenkins</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301010326750.png" alt="image-20230301010326750"></p><p>浏览器地址栏输入<code>restart</code>即可重启</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301011010956.png" alt="image-20230301011010956"></p><p>可以看到插件已安装</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301012252142.png" alt="image-20230301012252142"></p><h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><p>搜索一个中文的插件<code>Chinese</code>勾上，然后安装</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312100457532.png" alt="image-20230312100457532"></p><p>开始下载汉化包，下载完成后重启<code>Jenkins </code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230312101714960.png" alt="image-20230312101714960"></p><blockquote><p><strong>注意</strong></p><p>当<code>Jenkins</code>版本过低时，插件可能安装失败，需先升级 <code>Jenkins</code></p></blockquote><h3 id="升级Jenkins"><a href="#升级Jenkins" class="headerlink" title="升级Jenkins"></a>升级<code>Jenkins</code></h3><p>因为有些插件安装不上去需要升级版本才能安装，下载<code>Jenkins.war</code>文件。</p><p>点击下载，可以下载最新的<code>Jenkins.war</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230301011450133.png" alt="image-20230301011450133"></p><p>停止<code>Jenkins</code>进程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop jenkins.service</span><br></pre></td></tr></table></figure><p>进入 <code>jenkins.war</code>运行路径</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/lib/jenkins/</span><br></pre></td></tr></table></figure><p>上传新版本的 <code>jenkins.war</code>到此路径下，重启<code>Jenkins</code>，即更新至最新版本。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用docker-compose快速部署harbor</title>
      <link href="/2023/02/27/DevOps/harbor/%E4%BD%BF%E7%94%A8docker-compose%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2harbor/"/>
      <url>/2023/02/27/DevOps/harbor/%E4%BD%BF%E7%94%A8docker-compose%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2harbor/</url>
      
        <content type="html"><![CDATA[<h1 id="Harbor-简介"><a href="#Harbor-简介" class="headerlink" title="Harbor 简介"></a>Harbor 简介</h1><p>云原生技术的兴起为企业数字化转型带来新的可能。作为云原生的要素之一，带来更为轻量级虚拟化的容器技术具有举足轻重的推动作用。其实很早之前，容器技术已经有所应用，而 <code>Docker</code> 的出现和兴起彻底带火了容器。其关键因素是 Docker 提供了使用容器的完整工具链，使得容器的上手和使用变得非常简单。工具链中的一个关键，就是定义了新的软件打包格式-容器镜像。镜像包含了软件运行所需要的包含基础 OS 在内的所有依赖，推送至运行时可直接启动。从镜像构建环境到运行环境，镜像的快速分发成为硬需求。同时，大量构建以及依赖的镜像的出现，也给镜像的维护管理带来挑战。镜像仓库的出现成为必然。</p><p>镜像构建之后可以推送至仓库储存和管理，运行时环境在有应用运行需求时，从仓库拉取特定的应用镜像来运行。镜像仓库作为镜像的分发媒介，可以实现特定的管理和访问控制机制。仓库作为镜像传输流动的主要媒介，成为云原生应用平台运转的核心要件。Docker 开源了其 registry 实现, 目前已经成为 CNCF 的沙箱项目Distribution。不过，Distribution 项目仅仅实现了对镜像存储的支持，对企业级的一些管理诉求并无法提供支持。</p><p>为了实现企业级镜像仓库的支持，<code>Harbor</code> 项目应运而生。</p><h1 id="harbor的功能"><a href="#harbor的功能" class="headerlink" title="harbor的功能"></a>harbor的功能</h1><ul><li>多租户内容签名和验证</li><li>安全性和漏洞分析</li><li>审核日志记录</li><li>身份集成和基于角色的访问控制</li><li>实例之间的映像复制</li><li>可扩展的 API 和图形用户界面</li><li>国际化（目前为中英文）</li></ul><h1 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker compose"></a>Docker compose</h1><p><code>Harbor</code>在物理机上部署是非常难的，而为了简化Harbor的应用，Harbor官方直接把Harbor做成了在容器中运行的应用，而且这个容器在Harbor中依赖类似redis、mysql、pgsql等很多存储系统，所以它需要编排很多容器协同起来工作，因此VMWare Harbor在部署和使用时，需要借助于Docker的单机编排工具( Docker compose)来实现。</p><p><code>Compose</code>是一个用于定义和运行多容器 Docker 应用程序的工具。使用 Compose，您可以使用 YAML 文件来配置应用程序的服务。然后，使用单个命令，从配置创建并启动所有服务。</p><p><a href="https://docs.docker.com/compose/">Docker Compose官方文档</a></p><p><a href="https://docs.docker.com/compose/install/">Docker-Compose下载地址</a></p><h1 id="harbor环境准备"><a href="#harbor环境准备" class="headerlink" title="harbor环境准备"></a>harbor环境准备</h1><p><a href="https://github.com/goharbor/harbor">Harbor官方文档</a></p><p><a href="https://github.com/goharbor/harbor/releases/tag/v2.3.5">Harbor下载地址</a></p><h2 id="关闭防火墙和-selinux"><a href="#关闭防火墙和-selinux" class="headerlink" title="关闭防火墙和 selinux"></a>关闭防火墙和 selinux</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost harbor]# systemctl disable --now firewalld</span><br><span class="line">Removed /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line">[root@localhost harbor]# systemctl stop --now firewalld</span><br><span class="line"></span><br><span class="line">[root@localhost harbor]# cat /etc/selinux/config </span><br><span class="line">SELINUX=disabled// 修改这一行</span><br><span class="line"></span><br><span class="line">// 修改完之后重启</span><br><span class="line">[root@localhost harbor]# reboot</span><br><span class="line">[root@localhost harbor]# setenforce 0</span><br><span class="line">setenforce: SELinux is disabled</span><br></pre></td></tr></table></figure><h2 id="下载-harbor包"><a href="#下载-harbor包" class="headerlink" title="下载 harbor包"></a>下载 harbor包</h2><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230227232716579.png" alt="image-20230227232716579"></p><p>上传下载好的<code>harbor</code>包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# ll</span><br><span class="line">md5sum</span><br><span class="line">harbor-offline-installer-v2.3.5.tgz</span><br></pre></td></tr></table></figure><p>查看<code>md5sum</code>值是否和官网的<code>md5sum</code>文件里面的值一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# md5sum harbor-offline-installer-v2.3.5.tgz</span><br><span class="line">f1e01bbb4b62bf4a31a103d8c7c5a215  harbor-offline-installer-v2.3.5.tgz</span><br></pre></td></tr></table></figure><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230227232902276.png" alt="image-20230227232902276"></p><h2 id="配置加速器"><a href="#配置加速器" class="headerlink" title="配置加速器"></a>配置加速器</h2><p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">加速器</a></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230227233009036.png" alt="image-20230227233009036"></p><p>按照如上方式，添加阿里云镜像加速</p><p>针对<code>Docker</code>客户端版本大于 <code>1.10.0</code> 的用户</p><p>您可以通过修改<code>daemon</code>配置文件<code>/etc/docker/daemon.json</code>来使用加速器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# sudo mkdir -p /etc/docker</span><br><span class="line">[root@harbor soft]# sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://uf1sbyrb.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">[root@harbor soft]# sudo systemctl daemon-reload</span><br><span class="line">[root@harbor soft]# sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="重新加载docker服务"><a href="#重新加载docker服务" class="headerlink" title="重新加载docker服务"></a>重新加载docker服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# systemctl daemon-reload</span><br><span class="line">[root@harbor soft]# systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="查看加速器配置情况"><a href="#查看加速器配置情况" class="headerlink" title="查看加速器配置情况"></a>查看加速器配置情况</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# docker info</span><br><span class="line">...</span><br><span class="line">Experimental: false</span><br><span class="line">Insecure Registries:</span><br><span class="line"> 127.0.0.0/8</span><br><span class="line">Registry Mirrors:</span><br><span class="line"> https://kgdsiwq8.mirror.aliyuncs.com/// 加速器配置成功</span><br><span class="line">Live Restore Enabled: false</span><br></pre></td></tr></table></figure><h1 id="安装-harbor"><a href="#安装-harbor" class="headerlink" title="安装 harbor"></a>安装 harbor</h1><h2 id="解压-harbor"><a href="#解压-harbor" class="headerlink" title="解压 harbor"></a>解压 harbor</h2><p>解压 harbor 包到 <code>/usr/local/</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# tar xf harbor-offline-installer-v2.3.5.tgz -C /usr/local/</span><br></pre></td></tr></table></figure><h2 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h2><p>进入到<code>/usr/local/harbor/</code>目录下，这里设置的主机名为<code>harbor.com</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# hostnamectl set-hostname harbor.com</span><br></pre></td></tr></table></figure><h2 id="查看主机名"><a href="#查看主机名" class="headerlink" title="查看主机名"></a>查看主机名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# bash</span><br><span class="line">[root@harbor soft]# hostname</span><br><span class="line">harbor.com</span><br></pre></td></tr></table></figure><h2 id="修改harbor-yml"><a href="#修改harbor-yml" class="headerlink" title="修改harbor.yml"></a>修改<code>harbor.yml</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# cp harbor.yml.tmpl harbor.yml</span><br><span class="line">[root@harbor soft]# vim harbor.yml</span><br><span class="line"></span><br><span class="line">hostname: node1.example.com// 添加主机名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https related config</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">https:// 注释掉证书，不使用证书就需要注释</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">https port <span class="keyword">for</span> harbor, default is 443</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">port: 443// 注释</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The path of cert and key files <span class="keyword">for</span> nginx</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">certificate: /your/certificate/path// 注释</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">private_key: /your/private/key/path// 注释</span></span><br><span class="line">  </span><br><span class="line">harbor_admin_password: Harbor12345// 默认的登录密码</span><br></pre></td></tr></table></figure><h2 id="测试能否ping通-harbor-com-主机"><a href="#测试能否ping通-harbor-com-主机" class="headerlink" title="测试能否ping通 harbor.com 主机"></a>测试能否<code>ping</code>通 harbor.com 主机</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# ping harbor.com</span><br><span class="line">PING harbor.com (192.168.10.161) 56(84) bytes of data.</span><br><span class="line">64 bytes from harbor.com (192.168.10.161): icmp_seq=1 ttl=64 time=0.055 ms</span><br><span class="line">64 bytes from harbor.com (192.168.10.161): icmp_seq=2 ttl=64 time=0.022 ms</span><br><span class="line">64 bytes from harbor.com (192.168.10.161): icmp_seq=3 ttl=64 time=0.039 ms</span><br></pre></td></tr></table></figure><h2 id="启动脚本进行安装"><a href="#启动脚本进行安装" class="headerlink" title="启动脚本进行安装"></a>启动脚本进行安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# ./install.sh</span><br></pre></td></tr></table></figure><p>安装完成会自动启动很多容器</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor <span class="keyword">soft</span>]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                                COMMAND                  CREATED          STATUS                    PORTS                                   NAMES</span><br><span class="line"><span class="number">597</span>bd1b5f5d1   goharbor/harbor-jobservice:v2<span class="variable">.3</span><span class="variable">.5</span>    <span class="string">&quot;/harbor/entrypoint.…&quot;</span>   <span class="number">54</span> minutes ago   Up <span class="number">41</span> minutes (healthy)                                           harbor-jobservice</span><br><span class="line"><span class="number">032</span>f2598df14   goharbor/nginx-photon:v2<span class="variable">.3</span><span class="variable">.5</span>         <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="number">54</span> minutes ago   Up <span class="number">41</span> minutes (healthy)   <span class="number">0</span><span class="variable">.0</span><span class="variable">.0</span><span class="variable">.0</span>:<span class="number">80</span>-&gt;<span class="number">8080</span>/tcp, :::<span class="number">80</span>-&gt;<span class="number">8080</span>/tcp   nginx</span><br><span class="line">b6165a54ca03   goharbor/harbor-core:v2<span class="variable">.3</span><span class="variable">.5</span>          <span class="string">&quot;/harbor/entrypoint.…&quot;</span>   <span class="number">54</span> minutes ago   Up <span class="number">41</span> minutes (healthy)                                           harbor-core</span><br><span class="line">f75688dc466e   goharbor/harbor-registryctl:v2<span class="variable">.3</span><span class="variable">.5</span>   <span class="string">&quot;/home/harbor/start.…&quot;</span>   <span class="number">54</span> minutes ago   Up <span class="number">41</span> minutes (healthy)                                           registryctl</span><br><span class="line">d5ce976cb400   goharbor/harbor-portal:v2<span class="variable">.3</span><span class="variable">.5</span>        <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   <span class="number">54</span> minutes ago   Up <span class="number">41</span> minutes (healthy)                                           harbor-portal</span><br><span class="line"><span class="number">8</span>e3b40f96d68   goharbor/registry-photon:v2<span class="variable">.3</span><span class="variable">.5</span>      <span class="string">&quot;/home/harbor/entryp…&quot;</span>   <span class="number">54</span> minutes ago   Up <span class="number">41</span> minutes (healthy)                                           registry</span><br><span class="line">aa8f7e32bc25   goharbor/redis-photon:v2<span class="variable">.3</span><span class="variable">.5</span>         <span class="string">&quot;redis-server /etc/r…&quot;</span>   <span class="number">54</span> minutes ago   Up <span class="number">41</span> minutes (healthy)                                           redis</span><br><span class="line">e683c626d2ce   goharbor/harbor-db:v2<span class="variable">.3</span><span class="variable">.5</span>            <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">54</span> minutes ago   Up <span class="number">41</span> minutes (healthy)                                           harbor-db</span><br><span class="line"><span class="number">62</span>d8c112a73f   goharbor/harbor-log:v2<span class="variable">.3</span><span class="variable">.5</span>           <span class="string">&quot;/bin/sh -c /usr/loc…&quot;</span>   <span class="number">54</span> minutes ago   Up <span class="number">41</span> minutes (healthy)   <span class="number">127</span><span class="variable">.0</span><span class="variable">.0</span><span class="variable">.1</span>:<span class="number">1514</span>-&gt;<span class="number">10514</span>/tcp               harbor-log</span><br></pre></td></tr></table></figure><p>安装完成之后会多两个文件，一个<code>common</code>，一个<code>docker-compose.yml</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor <span class="keyword">soft</span>]# cd /usr/<span class="keyword">local</span>/harbor/</span><br><span class="line">[root@harbor harbor]# ll</span><br><span class="line">total <span class="number">594172</span></span><br><span class="line">drwxr-xr-x <span class="number">3</span> root root        <span class="number">20</span> Feb <span class="number">27</span> <span class="number">06</span>:<span class="number">47</span> common</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root      <span class="number">3361</span> Dec  <span class="number">9</span>  <span class="number">2021</span> common<span class="variable">.sh</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root      <span class="number">5996</span> Feb <span class="number">27</span> <span class="number">06</span>:<span class="number">50</span> docker-compose<span class="variable">.yml</span></span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root        <span class="number">55</span> Feb <span class="number">27</span> <span class="number">07</span>:<span class="number">01</span> harbor_enable<span class="variable">.sh</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">608376493</span> Dec  <span class="number">9</span>  <span class="number">2021</span> harbor<span class="variable">.v2</span><span class="variable">.3</span><span class="variable">.5</span><span class="variable">.tar</span><span class="variable">.gz</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root      <span class="number">7838</span> Feb <span class="number">27</span> <span class="number">06</span>:<span class="number">50</span> harbor<span class="variable">.yml</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root      <span class="number">7840</span> Dec  <span class="number">9</span>  <span class="number">2021</span> harbor<span class="variable">.yml</span><span class="variable">.tmpl</span></span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root      <span class="number">2500</span> Dec  <span class="number">9</span>  <span class="number">2021</span> install<span class="variable">.sh</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root     <span class="number">11347</span> Dec  <span class="number">9</span>  <span class="number">2021</span> LICENSE</span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root      <span class="number">1881</span> Dec  <span class="number">9</span>  <span class="number">2021</span> prepare</span><br></pre></td></tr></table></figure><h1 id="harbor网页操作"><a href="#harbor网页操作" class="headerlink" title="harbor网页操作"></a>harbor网页操作</h1><p>浏览器输入<code>IP</code>地址可以直接访问<code>harbor</code>登录界面，这里部署的服务器是<code>192.168.10.161</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230227234751200.png" alt="image-20230227234751200"></p><h2 id="使用系统账号登录"><a href="#使用系统账号登录" class="headerlink" title="使用系统账号登录"></a>使用系统账号登录</h2><p><strong>用户名</strong>：admin</p><p><strong>默认密码</strong>：Harbor12345</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230227234922219.png" alt="image-20230227234922219"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>创建用户</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230227235210045.png" alt="image-20230227235210045"></p><h2 id="加入项目"><a href="#加入项目" class="headerlink" title="加入项目"></a>加入项目</h2><p>设置为访客权限</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230227235430241.png" alt="image-20230227235430241"></p><p>可以看到用户已经添加成功</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230227235522503.png" alt="image-20230227235522503"></p><blockquote><p><strong>注意</strong></p><p>系统用户可以删除项目，访客用户无此权限</p></blockquote><h1 id="harbor开机自启"><a href="#harbor开机自启" class="headerlink" title="harbor开机自启"></a>harbor开机自启</h1><p>因为<code>harbor</code>的服务是由 <code>/usr/local/harbor/</code>中的 <code>docker-compose.yml</code> 配置文件和<code>docker</code>中的容器提供的所以，我们在设置开机自启时就需要在此目录中启动容器。</p><p>容器启动、停止、重启命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# docker-compose stop</span><br><span class="line">[root@harbor soft]# docker-compose start</span><br></pre></td></tr></table></figure><p>写一个 <code>harbor_start.sh</code> 脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# vim harbor_enable.sh </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cd /usr/local/harbor</span><br><span class="line">docker-compose start</span><br></pre></td></tr></table></figure><p>添加执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# chmod +x harbor_enable.sh </span><br><span class="line">[root@harbor soft]# ll harbor_enable.sh </span><br><span class="line">-rwxr-xr-x. 1 root root 55 Dec 16 18:59 harbor_enable.sh</span><br></pre></td></tr></table></figure><p>把脚本写入到 <code>/etc/rc.local</code> 文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# vim /etc/rc.local</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">/bin/bash /usr/local/harbor/harbor_enable.sh// 添加这行</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># It is highly advisable to create own systemd services or udev rules</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to run scripts during boot instead of using this file.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># In contrast to previous versions due to parallel execution during boot</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">this script will NOT be run after all other services.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Please note that you must run &#x27;chmod +x /etc/rc.d/rc.local&#x27; to ensure</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">that this script will be executed during boot.</span></span><br><span class="line"></span><br><span class="line">touch /var/lock/subsys/local</span><br></pre></td></tr></table></figure><p>给权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# chmod +x /etc/rc.local </span><br><span class="line">[root@harbor soft]# ll /etc/rc.local </span><br><span class="line">lrwxrwxrwx. 1 root root 13 Dec  2  2020 /etc/rc.local -&gt; rc.d/rc.local</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p><code>harbor</code>设置开启自启动时，<code>docker</code>需先设置开机自启动。</p></blockquote><h1 id="重启验证"><a href="#重启验证" class="headerlink" title="重启验证"></a>重启验证</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@harbor soft]# reboot</span><br><span class="line"></span><br><span class="line">// 脚本自启动设置成功</span><br><span class="line">[root@node1 ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                                COMMAND                  CREATED          STATUS                    PORTS                                   NAMES</span><br><span class="line">3daa18aedde3   goharbor/harbor-jobservice:v2.3.5    &quot;/harbor/entrypoint.…&quot;   57 minutes ago   Up 39 seconds (healthy)                                           harbor-jobservice</span><br><span class="line">67cda2a01e08   goharbor/nginx-photon:v2.3.5         &quot;nginx -g &#x27;daemon of…&quot;   57 minutes ago   Up 39 seconds (healthy)   0.0.0.0:80-&gt;8080/tcp, :::80-&gt;8080/tcp   nginx</span><br><span class="line">388f512bcfe1   goharbor/harbor-core:v2.3.5          &quot;/harbor/entrypoint.…&quot;   57 minutes ago   Up 40 seconds (healthy)                                           harbor-core</span><br><span class="line">b4e7fefa599e   goharbor/harbor-db:v2.3.5            &quot;/docker-entrypoint.…&quot;   57 minutes ago   Up 41 seconds (healthy)                                           harbor-db</span><br><span class="line">9201662bba92   goharbor/redis-photon:v2.3.5         &quot;redis-server /etc/r…&quot;   57 minutes ago   Up 40 seconds (healthy)                                           redis</span><br><span class="line">42368cf0e78b   goharbor/registry-photon:v2.3.5      &quot;/home/harbor/entryp…&quot;   57 minutes ago   Up 41 seconds (healthy)                                           registry</span><br><span class="line">ed564a1e593b   goharbor/harbor-registryctl:v2.3.5   &quot;/home/harbor/start.…&quot;   57 minutes ago   Up 40 seconds (healthy)                                           registryctl</span><br><span class="line">daa189f31bc3   goharbor/harbor-portal:v2.3.5        &quot;nginx -g &#x27;daemon of…&quot;   57 minutes ago   Up 40 seconds (healthy)                                           harbor-portal</span><br><span class="line">8ac96968e301   goharbor/harbor-log:v2.3.5           &quot;/bin/sh -c /usr/loc…&quot;   57 minutes ago   Up 42 seconds (healthy)   127.0.0.1:1514-&gt;10514/tcp               harbor-log=</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Harbor </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose 安装</title>
      <link href="/2023/02/27/DevOps/docker-compose/docker-compose%E5%AE%89%E8%A3%85/"/>
      <url>/2023/02/27/DevOps/docker-compose/docker-compose%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="两种最新的-docker-compose-安装方式"><a href="#两种最新的-docker-compose-安装方式" class="headerlink" title="两种最新的 docker-compose 安装方式"></a>两种最新的 docker-compose 安装方式</h1><h2 id="下载最新版"><a href="#下载最新版" class="headerlink" title="下载最新版"></a>下载最新版</h2><p>下载最新的 docker-compose 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p> 若是github访问太慢，可以用daocloud下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="添加可执行权限"><a href="#添加可执行权限" class="headerlink" title="添加可执行权限"></a>添加可执行权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="测试安装结果"><a href="#测试安装结果" class="headerlink" title="测试安装结果"></a>测试安装结果</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker-compose --version</span></span><br><span class="line"></span><br><span class="line">docker-compose version 1.16.1, build 1719ceb</span><br></pre></td></tr></table></figure><h2 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install docker-compose</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker-compose </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装</title>
      <link href="/2023/02/27/DevOps/docker/docker%E5%AE%89%E8%A3%85/"/>
      <url>/2023/02/27/DevOps/docker/docker%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>安装最新的 <code>Docker</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh # 下载 get-docker.sh 脚本</span><br><span class="line">sudo sh get-docker.sh # 安装 docker</span><br></pre></td></tr></table></figure><h3 id="查看-Docker-版本"><a href="#查看-Docker-版本" class="headerlink" title="查看 Docker 版本"></a>查看 <code>Docker</code> 版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 <code>Docker</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>确认 <code>Docker</code> 最新的 <code>Docker</code>，拉取最新的 <code>hello-world</code> 镜像示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>此时 <code>Docker</code> 已安装成功。</p><h3 id="IDEA-链接-docker"><a href="#IDEA-链接-docker" class="headerlink" title="IDEA 链接 docker"></a>IDEA 链接 docker</h3><p>在 IDEA 中的 Settings 中搜索 Docker 配置，添加 docker，使用 TCP socket 的方式连接：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Engine Api URL: tcp://192.168.10.2375</span><br></pre></td></tr></table></figure><p>docker 服务默认启动时，2375 端口未打开，因此需要修改 docker 的 service 启动文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>在 docker.service 中修改 ExecStart 的属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target docker.socket firewalld.service containerd.service time-set.target</span><br><span class="line">Wants=network-online.target containerd.service</span><br><span class="line">Requires=docker.socket</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the default is not to use systemd <span class="keyword">for</span> cgroups because the delegate issues still</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">exists and systemd currently does not support the cgroup feature <span class="built_in">set</span> required</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> containers run by docker</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注解原有的 ExecStart</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启 2375 端口</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">RestartSec=2</span><br><span class="line">Restart=always</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note that StartLimit* options were moved from <span class="string">&quot;Service&quot;</span> to <span class="string">&quot;Unit&quot;</span> <span class="keyword">in</span> systemd 229.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Both the old, and new location are accepted by systemd 229 and up, so using the old location</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to make them work <span class="keyword">for</span> either version of systemd.</span></span><br><span class="line">StartLimitBurst=3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note that StartLimitInterval was renamed to StartLimitIntervalSec <span class="keyword">in</span> systemd 230.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Both the old, and new name are accepted by systemd 230 and up, so using the old name to make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">this option work <span class="keyword">for</span> either version of systemd.</span></span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">in</span> the kernel. We recommend using cgroups to <span class="keyword">do</span> container-local accounting.</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Comment TasksMax <span class="keyword">if</span> your systemd version does not support it.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Only systemd 226 and above support this option.</span></span><br><span class="line">TasksMax=infinity</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> delegate <span class="built_in">yes</span> so that systemd does not reset the cgroups of docker containers</span></span><br><span class="line">Delegate=yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">kill</span> only the docker process, not all processes <span class="keyword">in</span> the cgroup</span></span><br><span class="line">KillMode=process</span><br><span class="line">OOMScoreAdjust=-500</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>在 IDEA 上测试链接 Docker 服务器，显示成功！</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection successful</span><br></pre></td></tr></table></figure><h3 id="Docker-报错-port-is-already-allocated"><a href="#Docker-报错-port-is-already-allocated" class="headerlink" title="Docker 报错 port is already allocated"></a>Docker 报错 port is already allocated</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h4><ol><li><p>已经删除了 docker 的进程，使用 docker ps -a 查不到</p></li><li><p>netstat -anp 可以查到的端口也已经 kill 但还是会报 port is already allocated</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp | grep 9200</span><br><span class="line">tcp        0      0 0.0.0.0:9200      0.0.0.0:*    LISTEN      9348/docker-proxy</span><br><span class="line">tcp6       0      0 :::9200           :::*         LISTEN      9358/docker-proxy</span><br></pre></td></tr></table></figure></li></ol><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a><strong>解决方法</strong></h4><ol><li><p>查询占用的 docker 映射占用的端口号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker container ls -a|grep 端口号</span><br><span class="line"></span><br><span class="line">[root@localhost es]# docker container ls -a|grep 9200</span><br><span class="line">ee13608e312b   elasticsearch:7.14.2  &quot;/bin/tini -- /usr/l…&quot;   2 hours ago  Up 6 minutes  0.0.0.0:9200-&gt;9200/tcp, :::9200-&gt;9200/tcp, 9300/tcp</span><br></pre></td></tr></table></figure></li><li><p>kill 掉进程 ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker kill -s KILL 进程ID</span><br><span class="line"></span><br><span class="line">[root@localhost es]# docker kill -s KILL ee13608e312b</span><br><span class="line">ee13608e312b</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亿级流量架构专题七（接入网关 Gateway）</title>
      <link href="/2023/02/25/java/practice/Billion-level%20traffic%20architecture/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84%E4%B8%83%EF%BC%88%E6%8E%A5%E5%85%A5%E7%BD%91%E5%85%B3%EF%BC%89/"/>
      <url>/2023/02/25/java/practice/Billion-level%20traffic%20architecture/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84%E4%B8%83%EF%BC%88%E6%8E%A5%E5%85%A5%E7%BD%91%E5%85%B3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><h1 id="接入网关服务"><a href="#接入网关服务" class="headerlink" title="接入网关服务"></a>接入网关服务</h1><p>引入网关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在网关服务 tulingmall-gateway 中配置 tulingmall-authcenter，引入网关配置。并引入授权中心配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tulingmall-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.65</span><span class="number">.232</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">80a98d11-492c-4008-85aa-32d889e9b0d0</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">tulingmall-member</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://tulingmall-member</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/member/**,/sso/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">tulingmall-coupons</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://tulingmall-coupons</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/coupon/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">tulingmall-auth</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://tulingmall-auth</span><span class="comment"># 微服务名称，lb 开启了负载均衡</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/oauth/**</span></span><br></pre></td></tr></table></figure><h1 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h1><p>编写 Gateway 全局过滤器，机型权限校验拦截</p><p>认证过滤器 AuthenticationFilter#filter 中需要实现的逻辑</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.过滤不需要认证的url,比如/oauth/**</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 获取token</span></span><br><span class="line"><span class="comment">// 从请求头中解析 Authorization  value:  bearer xxxxxxx</span></span><br><span class="line"><span class="comment">// 或者从请求参数中解析 access_token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 校验token</span></span><br><span class="line"><span class="comment">// 拿到token后，通过公钥（需要从授权服务获取公钥）校验</span></span><br><span class="line"><span class="comment">// 校验失败或超时抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 校验通过后，从token中获取的用户登录信息存储到请求头中</span></span><br></pre></td></tr></table></figure><h2 id="过滤不需要认证的URL"><a href="#过滤不需要认证的URL" class="headerlink" title="过滤不需要认证的URL"></a>过滤不需要认证的URL</h2><p>过滤不需要认证的 url，可以通过 yml 设置不需要认证的 url</p><p>application.yml 中配置要过滤的URL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tuling:</span><br><span class="line">  gateway:</span><br><span class="line">    shouldSkipUrls:</span><br><span class="line">    - /oauth<span class="comment">/**</span></span><br><span class="line"><span class="comment">    - /sso/**</span></span><br></pre></td></tr></table></figure><p>配置类 NotAuthUrlProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/25 23:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;tuling.gateway&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotAuthUrlProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedHashSet&lt;String&gt; shouldSkipUrls;</span><br></pre></td></tr></table></figure><p>自动注入要过滤的配置类对象，进行过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/25 23:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = NotAuthUrlProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthenticationFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, InitializingBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求各个微服务 不需要用户认证的 URL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> NotAuthUrlProperties notAuthUrlProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 过滤不需要认证的 url，比如 /oauth/**</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">currentUrl</span> <span class="operator">=</span> exchange.getRequest().getURI().getPath();</span><br><span class="line">        <span class="keyword">if</span> (shouldSkip(currentUrl)) &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析请求获取token"><a href="#解析请求获取token" class="headerlink" title="解析请求获取token"></a>解析请求获取token</h2><p>从请求头中解析 Authorization value：bearer xxxxxxx，或者从请求参数中解析 access_token</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tuling<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tulingmall-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="获取-token"><a href="#获取-token" class="headerlink" title="获取 token"></a>获取 token</h3><p>在 AuthenticationFilter#filter 中实现获取 token 的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AuthenticationFilter.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 获取 token</span></span><br><span class="line"><span class="comment">//    从请求头中解析 Authorization value: bearer xxxxxxxx</span></span><br><span class="line"><span class="comment">//    或者从请求参数中解析 access_token</span></span><br><span class="line"><span class="type">String</span> <span class="variable">authHeader</span> <span class="operator">=</span> exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isEmpty(authHeader)) &#123;</span><br><span class="line">    log.warn(<span class="string">&quot;需要认证的 url, 请求头为空&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GateWayException</span>(ResultCode.AUTHORIZATION_HEADER_IS_EMPTY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="校验-token"><a href="#校验-token" class="headerlink" title="校验 token"></a>校验 token</h2><p>拿到 token 后，通过公钥（需要从授权服务中心获取公钥）校验，校验失败或者超时，需要抛出异常。</p><h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加jwt相关的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取公钥"><a href="#获取公钥" class="headerlink" title="获取公钥"></a>获取公钥</h2><h3 id="远程获取-token-key"><a href="#远程获取-token-key" class="headerlink" title="远程获取 token_key"></a>远程获取 token_key</h3><p>从认证服务器暴露获取 token_key 的地址获取 token_key。</p><p>这里使用的是 RestTemplate 实例远程获取 token_key，实现负载均衡。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JwtUtils.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 认证服务器暴露的获取token_key的地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTH_TOKEN_KEY_URL</span> <span class="operator">=</span> <span class="string">&quot;http://tulingmall-auth/oauth/token_key&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 方法实现说明: 通过远程调用获取认证服务器颁发jwt的解析的key</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> restTemplate 远程调用的操作类</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: tokenKey 解析jwt的tokenKey</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@exception</span>:</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getTokenKeyByRemoteCall</span><span class="params">(RestTemplate restTemplate)</span> <span class="keyword">throws</span> GateWayException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一步:封装请求头</span></span><br><span class="line">    <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class="line">    headers.setBasicAuth(CLIENT_ID,CLIENT_SECRET);</span><br><span class="line">    HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; entity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(<span class="literal">null</span>, headers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二步:远程调用获取token_key</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ResponseEntity&lt;Map&gt; response = restTemplate.exchange(AUTH_TOKEN_KEY_URL, HttpMethod.GET, entity, Map.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> response.getBody().get(<span class="string">&quot;value&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;去认证服务器获取Token_Key:&#123;&#125;&quot;</span>,tokenKey);</span><br><span class="line">        <span class="keyword">return</span> tokenKey;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;远程调用认证服务器获取Token_Key失败:&#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GateWayException</span>(ResultCode.GET_TOKEN_KEY_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JwtUtils.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 方法实现说明:生成公钥</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> restTemplate:远程调用操作类</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span>: PublicKey 公钥对象</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@exception</span>:</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> PublicKey <span class="title function_">genPublicKey</span><span class="params">(RestTemplate restTemplate)</span> <span class="keyword">throws</span> GateWayException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> getTokenKeyByRemoteCall(restTemplate);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把获取的公钥开头和结尾替换掉</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dealTokenKey</span> <span class="operator">=</span>tokenKey</span><br><span class="line">            .replaceAll(<span class="string">&quot;\\-*BEGIN PUBLIC KEY\\-*&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            .replaceAll(<span class="string">&quot;\\-*END PUBLIC KEY\\-*&quot;</span>, <span class="string">&quot;&quot;</span>).trim();</span><br><span class="line"></span><br><span class="line">        java.security.Security.addProvider(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">org</span>.bouncycastle.jce.provider.BouncyCastleProvider());</span><br><span class="line"></span><br><span class="line">        <span class="type">X509EncodedKeySpec</span> <span class="variable">pubKeySpec</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">X509EncodedKeySpec</span>(Base64.decodeBase64(dealTokenKey));</span><br><span class="line">        </span><br><span class="line">        <span class="type">KeyFactory</span> <span class="variable">keyFactory</span> <span class="operator">=</span> KeyFactory.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">        <span class="type">PublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> keyFactory.generatePublic(pubKeySpec);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;生成公钥:&#123;&#125;&quot;</span>,publicKey);</span><br><span class="line">        <span class="keyword">return</span> publicKey;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;生成公钥异常:&#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GateWayException</span>(ResultCode.GEN_PUBLIC_KEY_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要从授权服务中心获取公钥 publicKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AuthenticationFilter.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt 的公钥，需要网关启动，远程调用认证中心去获取公钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> PublicKey publicKey;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 发起 rpc 请求， 获取 publicKey</span></span><br><span class="line">    <span class="built_in">this</span>.publicKey = JwtUtils.genPublicKey(restTemplate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ServerWebExchange <span class="title function_">wrapHeader</span><span class="params">(ServerWebExchange serverWebExchange,Claims claims)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">loginUserInfo</span> <span class="operator">=</span> JSON.toJSONString(claims);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//log.info(&quot;jwt的用户信息:&#123;&#125;&quot;,loginUserInfo);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">memberId</span> <span class="operator">=</span> claims.get(<span class="string">&quot;additionalInfo&quot;</span>, Map.class).get(<span class="string">&quot;memberId&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">nickName</span> <span class="operator">=</span> claims.get(<span class="string">&quot;additionalInfo&quot;</span>,Map.class).get(<span class="string">&quot;nickName&quot;</span>).toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向headers中放文件，记得build</span></span><br><span class="line">    <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> serverWebExchange.getRequest().mutate()</span><br><span class="line">        .header(<span class="string">&quot;username&quot;</span>,claims.get(<span class="string">&quot;user_name&quot;</span>,String.class))</span><br><span class="line">        .header(<span class="string">&quot;memberId&quot;</span>,memberId)</span><br><span class="line">        .header(<span class="string">&quot;nickName&quot;</span>,nickName)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将现在的request 变成 change对象</span></span><br><span class="line">    <span class="keyword">return</span> serverWebExchange.mutate().request(request).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>在 AuthenticationFilter#filter 中实现校验token的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AuthenticationFilter.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 校验 token</span></span><br><span class="line"><span class="comment">//    拿到 token 后，通过公钥（需要从授权服务获取公钥）校验</span></span><br><span class="line"><span class="comment">//    校验失败或者超时，抛出异常</span></span><br><span class="line"><span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtils.validateJwtToken(authHeader, publicKey);</span><br></pre></td></tr></table></figure><p>校验 token 逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JwtUtils.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求头中的 token的开始</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTH_HEADER</span> <span class="operator">=</span> <span class="string">&quot;bearer &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">validateJwtToken</span><span class="params">(String authHeader,PublicKey publicKey)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span><span class="literal">null</span> ;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// 截取出 token（即截去头部 &quot;bearer &quot;）</span></span><br><span class="line">        token = StringUtils.substringAfter(authHeader, AUTH_HEADER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用公钥 publicKey 进行解析校验 token</span></span><br><span class="line">        Jwt&lt;JwsHeader, Claims&gt; parseClaimsJwt =</span><br><span class="line">            Jwts.parser().setSigningKey(publicKey).parseClaimsJws(token);</span><br><span class="line"></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> parseClaimsJwt.getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        log.error(<span class="string">&quot;校验token异常:&#123;&#125;,异常信息:&#123;&#125;&quot;</span>,token,e.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">GateWayException</span>(ResultCode.JWT_TOKEN_EXPIRE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试 gateway 获取用户优惠券信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230226011224876.png" alt="image-20230226011224876"></p><p>通过密码模式获取 access_token</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230226011344751.png" alt="image-20230226011344751"></p><p>填写 access_token，去掉 memberId，依然请求成功，获取到对应的用户优惠券信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230226011913606.png" alt="image-20230226011913606"></p>]]></content>
      
      
      <categories>
          
          <category> Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亿级流量架构专题六（Spring Security Oauth2 整合 JWT）</title>
      <link href="/2023/02/23/java/practice/Billion-level%20traffic%20architecture/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84%E4%B8%93%E9%A2%98%E5%85%AD%EF%BC%88Spring%20Security%20OAuth2%E6%95%B4%E5%90%88JWT%EF%BC%89/"/>
      <url>/2023/02/23/java/practice/Billion-level%20traffic%20architecture/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84%E4%B8%93%E9%A2%98%E5%85%AD%EF%BC%88Spring%20Security%20OAuth2%E6%95%B4%E5%90%88JWT%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JSON Web Token（JWT）是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的协议格式，用于在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用HMAC算法或使用RSA的公钥/私钥对来签名，防止被篡改。</p><h2 id="JWT令牌的优点"><a href="#JWT令牌的优点" class="headerlink" title="JWT令牌的优点"></a>JWT令牌的优点</h2><ul><li>JWT基于JSON，非常方便解析。</li><li>可以在令牌中自定义丰富的内容，易扩展。</li><li>通过非对称加密算法及数字签名技术，JWT防止篡改，安全性高。</li><li>资源服务使用JWT可不依赖认证服务即可完成授权。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>JWT令牌较长，占存储空间比较大。 </li></ul><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><h1 id="JWT组成"><a href="#JWT组成" class="headerlink" title="JWT组成"></a>JWT组成</h1><p>一个JWT实际上就是一个字符串，它由三部分组成</p><ul><li>头部（header）</li><li>载荷（payload）</li><li>签名（signature）</li></ul><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230223234732927.png" alt="image-20230223234732927"></p><h2 id="头部（header）"><a href="#头部（header）" class="headerlink" title="头部（header）"></a>头部（header）</h2><p>头部用于描述关于该JWT的最基本的信息：类型（即JWT）以及签名所用的算法（如HMACSHA256或RSA）等。</p><p>这也可以被表示成一个JSON对象：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9    </span><br></pre></td></tr></table></figure><h2 id="载荷（payload）"><a href="#载荷（payload）" class="headerlink" title="载荷（payload）"></a>载荷（payload）</h2><p>第二部分是载荷，就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分：</p><h3 id="标准中注册的声明"><a href="#标准中注册的声明" class="headerlink" title="标准中注册的声明"></a>标准中注册的声明</h3><p>建议但不强制使用</p><ul><li><p>iss     jwt签发者</p></li><li><p>sub   jwt所面向的用户</p></li><li><p>aud   接收jwt的一方</p></li><li><p>exp   jwt的过期时间，这个过期时间必须要大于签发时间</p></li><li><p>nbf   定义在什么时间之前，该jwt都是不可用的.</p></li><li><p>iat    jwt的签发时间</p></li><li><p>jti     jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</p></li></ul><h3 id="公共的声明"><a href="#公共的声明" class="headerlink" title="公共的声明"></a>公共的声明</h3><p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.  </p><h3 id="私有的声明"><a href="#私有的声明" class="headerlink" title="私有的声明"></a>私有的声明</h3><p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。  </p><p>定义一个payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后将其进行base64加密，得到JWT的第二部分:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</span><br></pre></td></tr></table></figure><h2 id="签名（signature）"><a href="#签名（signature）" class="headerlink" title="签名（signature）"></a>签名（signature）</h2><p>JWT的第三部分是一个签证信息，这个签证信息由三部分组成：</p><ul><li>header (base64后的)</li><li>payload (base64后的)</li><li>secret(盐，一定要保密）  </li></ul><p>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> encodedString = <span class="title function_">base64UrlEncode</span>(header) + <span class="string">&#x27;.&#x27;</span> + <span class="title function_">base64UrlEncode</span>(payload);</span><br><span class="line"><span class="keyword">var</span> signature = <span class="title class_">HMACSHA256</span>(encodedString, <span class="string">&#x27;fox&#x27;</span>); <span class="comment">// khA7TNYc7_0iELcDyTc7gHBZ_xfIcgbfpzUNWwQtzME</span></span><br></pre></td></tr></table></figure><p>将这三部分用.连接成一个完整的字符串,构成了最终的jwt:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9<span class="variable">.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</span><span class="variable">.khA7TNYc7_0iELcDyTc7gHBZ_xfIcgbfpzUNWwQtzME</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p><code>secret</code>是保存在服务器端的，JWT的签发生成也是在服务器端的，<code>secret</code>就是用来进行JWT的签发和JWT的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个<code>secret</code>， 那就意味着客户端是可以自我签发JWT了。</p></blockquote><h1 id="引入JWT"><a href="#引入JWT" class="headerlink" title="引入JWT"></a>引入JWT</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring secuity对jwt的支持 spring cloud oauth2已经依赖，可以不配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JWT-存储配置"><a href="#JWT-存储配置" class="headerlink" title="JWT 存储配置"></a>JWT 存储配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT 存储的配置</span></span><br><span class="line"><span class="comment"> * 将 JWT 存储在 TokenStore 中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/24 0:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenStoreConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TokenStore <span class="title function_">jwtTokenStore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtTokenStore</span>(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密钥转换</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAccessTokenConverter <span class="title function_">jwtAccessTokenConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JwtAccessTokenConverter</span> <span class="variable">jwtAccessTokenConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtAccessTokenConverter</span>();</span><br><span class="line">        <span class="comment">// 配置 JWT 使用的密钥</span></span><br><span class="line">        <span class="comment">// 解析 token 时，必须对应的此处配置的密钥（123123）。否则无法解密</span></span><br><span class="line">        jwtAccessTokenConverter.setSigningKey(<span class="string">&quot;123123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> jwtAccessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指定令牌存储略为JWT"><a href="#指定令牌存储略为JWT" class="headerlink" title="指定令牌存储略为JWT"></a>指定令牌存储略为JWT</h2><p>在授权服务器配置中指定令牌的存储策略为JWT</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/19 16:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span>  <span class="comment">// 开启授权服务器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密钥存储策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;jwtTokenStore&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> TokenStore tokenStore;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JWT 转换策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAccessTokenConverter jwtAccessTokenConverter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * endpoint 端点的配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endpoints</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 使用密码模式需要配置</span></span><br><span class="line">        endpoints.authenticationManager(authenticationManagerBean)</span><br><span class="line">                <span class="comment">// 指定 refresh_token 的配置</span></span><br><span class="line">                .reuseRefreshTokens(<span class="literal">false</span>)  <span class="comment">// refresh_token 是否重复使用</span></span><br><span class="line">                .userDetailsService(tulingUserDetailService)    <span class="comment">// 刷新令牌授权包含对用户信息的检查</span></span><br><span class="line">                </span><br><span class="line">                .tokenStore(tokenStore)     <span class="comment">// 指定 token 存储策略时 JWT</span></span><br><span class="line">                .accessTokenConverter(jwtAccessTokenConverter)<span class="comment">// 指定 token 的转换策略</span></span><br><span class="line">                </span><br><span class="line">                .allowedTokenEndpointRequestMethods(HttpMethod.GET, HttpMethod.POST);   <span class="comment">// 支持 GET、POST 请求</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="密码模式测试"><a href="#密码模式测试" class="headerlink" title="密码模式测试"></a>密码模式测试</h3><p><a href="http://localhost:9999/oauth/token?username=test&amp;password=test&amp;grant_type=password&amp;client_id=client&amp;client_secret=123123&amp;scope=all">http://localhost:9999/oauth/token?username=test&amp;password=test&amp;grant_type=password&amp;client_id=client&amp;client_secret=123123&amp;scope=all</a></p><p>​    <img src="https://note.youdao.com/yws/public/resource/7b3179e6fa5d39fb758bb4677fb7e2df/xmlnote/EBED4E204B104E948439B03CCD524DFC/16138" alt="0"></p><p>将access_token复制到<a href="https://jwt.io/%E7%9A%84Encoded%E4%B8%AD%E6%89%93%E5%BC%80,%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%BC%9A%E5%91%98%E8%AE%A4%E8%AF%81%E4%BF%A1%E6%81%AF">https://jwt.io/的Encoded中打开,可以看到会员认证信息</a></p><p>​    <img src="https://note.youdao.com/yws/public/resource/7b3179e6fa5d39fb758bb4677fb7e2df/xmlnote/99DD77AB117A47F6BBF9AD70A2F2877D/16142" alt="0"></p><h3 id="测试校验token"><a href="#测试校验token" class="headerlink" title="测试校验token"></a>测试校验token</h3><p>​    <img src="https://note.youdao.com/yws/public/resource/7b3179e6fa5d39fb758bb4677fb7e2df/xmlnote/2774D946C9B14605928A74CCBBD6C861/16210" alt="0"></p><p>​    <img src="https://note.youdao.com/yws/public/resource/7b3179e6fa5d39fb758bb4677fb7e2df/xmlnote/EDEA6DA3062D423E909179F2A7575082/16207" alt="0"></p><h3 id="测试获取token-key"><a href="#测试获取token-key" class="headerlink" title="测试获取token_key"></a>测试获取token_key</h3><p>​    <img src="https://note.youdao.com/yws/public/resource/7b3179e6fa5d39fb758bb4677fb7e2df/xmlnote/C022A6980C3C46B4A192891AAD627B16/16202" alt="0"></p><h3 id="测试刷新token"><a href="#测试刷新token" class="headerlink" title="测试刷新token"></a>测试刷新token</h3><p>​    <img src="https://note.youdao.com/yws/public/resource/7b3179e6fa5d39fb758bb4677fb7e2df/xmlnote/DC5EB740DDE9420CA543A6ABEF18847B/16216" alt="0"></p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="实现JWT非对称加密（公私钥）"><a href="#实现JWT非对称加密（公私钥）" class="headerlink" title="实现JWT非对称加密（公私钥）"></a>实现JWT非对称加密（公私钥）</h2><h3 id="生成-JKS-证书"><a href="#生成-JKS-证书" class="headerlink" title="生成 JKS 证书"></a>生成 JKS 证书</h3><p>我们使用jdk自带的工具生成</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">命令格式 </span><br><span class="line">keytool </span><br><span class="line">-genkeypair  生成密钥对</span><br><span class="line">-<span class="keyword">alias</span> jwt(别名) </span><br><span class="line">-keypass <span class="number">123456</span>(别名密码) </span><br><span class="line">-keyalg RSA(生证书的算法名称，RSA是一种非对称加密算法) </span><br><span class="line">-keysize <span class="number">1024</span>(密钥长度,证书大小) </span><br><span class="line">-validity <span class="number">365</span>(证书有效期，天单位) </span><br><span class="line">-keystore D:/jwt/jwt<span class="variable">.jks</span>(指定生成证书的位置和证书名称) </span><br><span class="line">-storepass <span class="number">123456</span>(获取keystore信息的密码)</span><br><span class="line">-storetype (指定密钥仓库类型)</span><br><span class="line">使用 <span class="string">&quot;keytool -help&quot;</span> 获取所有可用命令</span><br></pre></td></tr></table></figure><p>Shell 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool  -genkeypair -alias jwt -keyalg RSA -keysize 2048 -keystore D:/jwt/jwt.jks</span><br></pre></td></tr></table></figure><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/clipboard%20(3).png" alt="clipboard (3)"></p><p>将生成的jwt.jks文件cope到授权服务器的resource目录下。</p><h3 id="查看公钥信息"><a href="#查看公钥信息" class="headerlink" title="查看公钥信息"></a>查看公钥信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -rfc --keystore jwt.jks  | openssl x509 -inform pem -pubkey</span><br></pre></td></tr></table></figure><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/clipboard%20(2).png" alt="clipboard (2)"></p><blockquote><p><strong>注意</strong></p><p>很多框架需要带上开始前缀（分隔行）和结束后缀（分隔行），否则不识别。</p></blockquote><h3 id="授权服务中增加jwt的属性配置类"><a href="#授权服务中增加jwt的属性配置类" class="headerlink" title="授权服务中增加jwt的属性配置类"></a>授权服务中增加jwt的属性配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/24 0:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;tuling.jwt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtCAProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 证书名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyPairName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 证书别名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyPairAlias;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 证书私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyPairSecret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 证书存储密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String keyPairStoreSecret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在JWT存储配置类上，开启属性自动配置，指定属性配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = JwtCAProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenStoreConfig</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>在 application.yaml 文件中添加 JWTCAProperties 对的属性配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tuling:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">keyPairName:</span> <span class="string">jwt.jks</span></span><br><span class="line">    <span class="attr">keyPairAlias:</span> <span class="string">jwt</span></span><br><span class="line">    <span class="attr">keyPairSecret:</span> <span class="number">123123</span></span><br><span class="line">    <span class="attr">keyPairStoreSecret:</span> <span class="number">123123</span></span><br></pre></td></tr></table></figure><p>这样，在spring boot 项目启动时，会自动将 yaml 文件中的配置，封装成 JwtCAProperties 类对象，并由 Spring 容器管理。</p><h3 id="修改-JwtTokenStoreConfig-的配置，支持非对称加密"><a href="#修改-JwtTokenStoreConfig-的配置，支持非对称加密" class="headerlink" title="修改 JwtTokenStoreConfig 的配置，支持非对称加密"></a>修改 JwtTokenStoreConfig 的配置，支持非对称加密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT 存储的配置</span></span><br><span class="line"><span class="comment"> * 将 JWT 存储在 TokenStore 中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/24 0:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = JwtCAProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenStoreConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取属性文件，密钥、证书相关配置类对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtCAProperties jwtCAProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TokenStore <span class="title function_">jwtTokenStore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtTokenStore</span>(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密钥转换</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAccessTokenConverter <span class="title function_">jwtAccessTokenConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JwtAccessTokenConverter</span> <span class="variable">jwtAccessTokenConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JwtAccessTokenConverter</span>();</span><br><span class="line">        <span class="comment">// 配置 JWT 使用的密钥</span></span><br><span class="line">        <span class="comment">// 解析 token 时，必须对应的此处配置的密钥（123123）。否则无法解密</span></span><br><span class="line">        <span class="comment">// jwtAccessTokenConverter.setSigningKey(&quot;123123&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置 JWT 使用的密钥 非对称加密</span></span><br><span class="line">        jwtAccessTokenConverter.setKeyPair(keyPair());</span><br><span class="line">        <span class="keyword">return</span> jwtAccessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyPair <span class="title function_">keyPair</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">KeyStoreKeyFactory</span> <span class="variable">keyStoreKeyFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyStoreKeyFactory</span>(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(jwtCAProperties.getKeyPairName()), jwtCAProperties.getKeyPairSecret().toCharArray());</span><br><span class="line">        <span class="keyword">return</span> keyStoreKeyFactory.getKeyPair(jwtCAProperties.getKeyPairAlias(), jwtCAProperties.getKeyPairStoreSecret().toCharArray());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展JWT中的存储内容"><a href="#扩展JWT中的存储内容" class="headerlink" title="扩展JWT中的存储内容"></a>扩展JWT中的存储内容</h2><p>有时候我们需要扩展JWT中存储的内容，根据自己业务添加字段到Jwt中。 继承TokenEnhancer实现一个JWT内容增强器。往载荷中增加一个Map。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/25 7:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TulingTokenEnhancer</span> <span class="keyword">implements</span> <span class="title class_">TokenEnhancer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OAuth2AccessToken <span class="title function_">enhance</span><span class="params">(OAuth2AccessToken oAuth2AccessToken, OAuth2Authentication oAuth2Authentication)</span> &#123;</span><br><span class="line">        <span class="type">MemberDetails</span> <span class="variable">memberDetails</span> <span class="operator">=</span> (MemberDetails) oAuth2Authentication.getPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; additionalInfo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; retMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// todo 这里暴露 memberId 到 JWT 的令牌中，后期可以根据自己的业务需要，进行添加</span></span><br><span class="line">        additionalInfo.put(<span class="string">&quot;memberId&quot;</span>, memberDetails.getUmsMember().getId());</span><br><span class="line">        additionalInfo.put(<span class="string">&quot;nickName&quot;</span>, memberDetails.getUmsMember().getNickname());</span><br><span class="line">        additionalInfo.put(<span class="string">&quot;integration&quot;</span>, memberDetails.getUmsMember().getIntegration());</span><br><span class="line"></span><br><span class="line">        retMap.put(<span class="string">&quot;additionalInfo&quot;</span>, additionalInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 往载荷中增加一个 Map</span></span><br><span class="line">        ((DefaultOAuth2AccessToken)oAuth2AccessToken).setAdditionalInformation(retMap);</span><br><span class="line">        <span class="keyword">return</span> oAuth2AccessToken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JwtTokenStoreConfig中配置TulingTokenEnhancer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT 存储的配置</span></span><br><span class="line"><span class="comment"> * 将 JWT 存储在 TokenStore 中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/24 0:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = JwtCAProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenStoreConfig</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外暴露增强器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TulingTokenEnhancer <span class="title function_">tulingTokenEnhancer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TulingTokenEnhancer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在授权服务器配置中配置JWT的内容增强器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TulingAuthorizationServerConfig.java</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TulingTokenEnhancer tulingTokenEnhancer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//配置JWT的内容增强器</span></span><br><span class="line">    <span class="type">TokenEnhancerChain</span> <span class="variable">enhancerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TokenEnhancerChain</span>();</span><br><span class="line">    List&lt;TokenEnhancer&gt; delegates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    delegates.add(tulingTokenEnhancer);</span><br><span class="line">    delegates.add(jwtAccessTokenConverter);</span><br><span class="line">    enhancerChain.setTokenEnhancers(delegates);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用密码模式需要配置</span></span><br><span class="line">    endpoints.authenticationManager(authenticationManagerBean)</span><br><span class="line">            .tokenStore(tokenStore)  <span class="comment">//指定token存储策略是jwt</span></span><br><span class="line">            .accessTokenConverter(jwtAccessTokenConverter)</span><br><span class="line">            .tokenEnhancer(enhancerChain) <span class="comment">//配置tokenEnhancer</span></span><br><span class="line">            .reuseRefreshTokens(<span class="literal">false</span>)  <span class="comment">//refresh_token是否重复使用</span></span><br><span class="line">            .userDetailsService(tulingUserDetailsService) <span class="comment">//刷新令牌授权包含对用户信息的检查</span></span><br><span class="line">            .allowedTokenEndpointRequestMethods(HttpMethod.GET,HttpMethod.POST); <span class="comment">//支持GET,POST请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>使用密码模式进行测试，可以看到已经请求成功，获取到了 token。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230225080730564.png" alt="image-20230225080730564"></p><h3 id="查询公钥信息"><a href="#查询公钥信息" class="headerlink" title="查询公钥信息"></a>查询公钥信息</h3><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230225081204955.png" alt="image-20230225081204955"></p><h3 id="校验token"><a href="#校验token" class="headerlink" title="校验token"></a>校验token</h3><p>填入 publishKey，验签成功。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230225081505108.png" alt="image-20230225081505108"></p><blockquote><p><strong>提示</strong></p><p>在网关上，只需要使用公钥去验签token即可，不必再远程服务调用校验token携带的认证信息。</p></blockquote><h3 id="获取-token-key-公钥"><a href="#获取-token-key-公钥" class="headerlink" title="获取 token_key 公钥"></a>获取 token_key 公钥</h3><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230225082740054.png" alt="image-20230225082740054"></p><blockquote><p><strong>注意</strong></p><p>在获取 <code>token_key</code> 时，可能报如下错误，加上数据库连接池 <code>druid</code> 依赖即可</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>报错信息：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No converter found capable of converting from <span class="keyword">type</span> [java<span class="variable">.lang</span><span class="variable">.Integer</span>] to <span class="keyword">type</span> [java<span class="variable">.lang</span><span class="variable">.Boolean</span>]</span><br></pre></td></tr></table></figure><h1 id="token-key-的使用"><a href="#token-key-的使用" class="headerlink" title="token_key 的使用"></a>token_key 的使用</h1><p>token_key 没必要在每次请求经过拦截器时，拦截器再去获取公钥 token_key。</p><p>可以在网关服务启动时，发起 RPC 调用，获取到 token_key 并保存，后续的 token 过来时，从内存取出公钥进行校验，就不用再发起 RPC 调用。</p>]]></content>
      
      
      <categories>
          
          <category> Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gateway </tag>
            
            <tag> jwt </tag>
            
            <tag> OAuth2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security OAuth2专题三（授权码模式）</title>
      <link href="/2023/02/16/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/SpringCloud/Spring%20Security%20OAuth2/Spring%20Security%20OAuth2%E4%B8%93%E9%A2%98%E4%B8%89%EF%BC%88%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%EF%BC%89/"/>
      <url>/2023/02/16/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/SpringCloud/Spring%20Security%20OAuth2/Spring%20Security%20OAuth2%E4%B8%93%E9%A2%98%E4%B8%89%EF%BC%88%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的<strong>安全框架</strong>。Spring Security 主要实现了<strong>Authentication</strong>（认证，解决who are you? ） 和 <strong>Access Control</strong>（访问控制，也就是what are you allowed to do？，也称为<strong>Authorization</strong>）。Spring Security在架构上将认证与授权分离，并提供了扩展点。</p><blockquote><p><strong>认证（Authentication）</strong> ：用户认证就是判断一个用户的身份是否合法的过程，用户去访问系统资源时系统要求验证用户的身份信息，身份合法方可继续访问，不合法则拒绝访问。常见的用户身份认证方式有：用户名密码登录，二维码登录，手机短信登录，指纹认证等方式。  </p><p><strong>授权（Authorization）</strong>： 授权是用户认证通过根据用户的权限来控制用户访问资源的过程，拥有资源的访问权限则正常访问，没有权限则拒绝访问。</p></blockquote><p>将OAuth2和Spring Security集成，就可以得到一套完整的安全解决方案。我们可以通过Spring Security OAuth2构建一个授权服务器来验证用户身份以提供access_token，并使用这个access_token来从资源服务器请求数据。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><h1 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>引入Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security.oauth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者引入 spring cloud oauth2 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring cloud --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置-spring-security"><a href="#配置-spring-security" class="headerlink" title="配置 spring security"></a>配置 spring security</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span><span class="comment">// 开启支持（不需要，底层已默认支持）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin().permitAll()</span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/oauth/**&quot;</span>).permitAll()<span class="comment">// 允许全部通过</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and().logout().permitAll()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;fox&quot;</span>,password, AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getCurrentUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getCurrentUser</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> authentication.getPrincipal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置授权服务器"><a href="#配置授权服务器" class="headerlink" title="配置授权服务器"></a>配置授权服务器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                <span class="comment">//配置client_id</span></span><br><span class="line">                .withClient(<span class="string">&quot;client&quot;</span>)</span><br><span class="line">                <span class="comment">//配置client-secret</span></span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;123123&quot;</span>))</span><br><span class="line">                <span class="comment">//配置访问token的有效期</span></span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">3600</span>)</span><br><span class="line">                <span class="comment">//配置刷新token的有效期</span></span><br><span class="line">                .refreshTokenValiditySeconds(<span class="number">864000</span>)</span><br><span class="line">                <span class="comment">//配置redirect_uri，用于授权成功后跳转</span></span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">                <span class="comment">//配置申请的权限范围</span></span><br><span class="line">                .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">                <span class="comment">//配置grant_type，表示授权类型</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置资源服务器"><a href="#配置资源服务器" class="headerlink" title="配置资源服务器"></a>配置资源服务器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourceServiceConfig</span> <span class="keyword">extends</span> <span class="title class_">ResourceServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and().requestMatchers().antMatchers(<span class="string">&quot;/user/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源服务器不必须，看需求。配置了资源服务器，必须要获得认证，才能访问资源，那么就要拿到access_token。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
          <category> 微服务安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security OAuth2专题二（OAuth2 的设计思路）</title>
      <link href="/2023/02/16/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/SpringCloud/Spring%20Security%20OAuth2/Spring%20Security%20OAuth2%E4%B8%93%E9%A2%98%E4%BA%8C%EF%BC%88%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF%EF%BC%89/"/>
      <url>/2023/02/16/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/SpringCloud/Spring%20Security%20OAuth2/Spring%20Security%20OAuth2%E4%B8%93%E9%A2%98%E4%BA%8C%EF%BC%88%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="OAuth2-的设计思路"><a href="#OAuth2-的设计思路" class="headerlink" title="OAuth2 的设计思路"></a>OAuth2 的设计思路</h1><p>OAuth在”客户端”与”服务提供商”之间，设置了一个授权层（authorization layer）。”客户端”不能直接登录”服务提供商”，只能登录授权层，以此将用户与客户端区分开来。”客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期，”客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户储存的资料。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/OAuth2%E6%A8%A1%E5%9E%8B.png" alt="OAuth2模型"></p><blockquote><p>令牌（token）与密码（password）的作用是一样的，都可以进入系统，但是有三点差异。</p><p>（1）令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化。</p><p>（2）令牌可以被数据所有者撤销，会立即失效。密码一般不允许被他人撤销。</p><p>（3）令牌有权限范围（scope）。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限。</p><p>上面这些设计，保证了令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是 OAuth 2.0 的优点。</p></blockquote><h1 id="客户端授权模式"><a href="#客户端授权模式" class="headerlink" title="客户端授权模式"></a>客户端授权模式</h1><p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0 对于如何颁发令牌的细节，规定得非常详细。具体来说，一共分成四种授权类型（authorization grant），即四种颁发令牌的方式，适用于不同的互联网场景。</p><ul><li><p>授权码模式（authorization code）</p></li><li><p>密码模式（resource owner password credentials）</p></li><li><p>简化(隐式)模式（implicit）</p></li><li><p>客户端模式（client credentials）</p></li></ul><p><strong>不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）</strong>。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p><h1 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h1><p><strong>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</strong></p><p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p><p>适用场景：目前市面上主流的第三方验证都是采用这种模式</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%8E%88%E6%9D%83%E7%A0%81%E6%A8%A1%E5%BC%8F-%E5%AF%BC%E5%87%BA.png" alt="授权码模式-导出"></p><ol><li>A网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">https://b.com/oauth/authorize?</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  response_type=code&amp;            <span class="comment"># 要求返回授权码（code）</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  client_id=CLIENT_ID&amp;           <span class="comment"># 让B知道是谁在请求</span></span>   </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  redirect_uri=CALLBACK_URL&amp;     <span class="comment"># B接受或拒绝请求后的跳转网址</span></span> </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  scope=<span class="built_in">read</span>                     <span class="comment"># 要求的授权范围（这里是只读）</span></span></span><br></pre></td></tr></table></figure><p>客户端申请授权的URI，包含以下参数：</p><ul><li>response_type：表示授权类型，必选项，此处的值固定为”code”</li><li>client_id：表示客户端的ID，必选项</li><li>redirect_uri：表示重定向URI，可选项</li><li>scope：表示申请的权限范围，可选项</li><li>state：表示客户端的当前状态，可以指定任意值，授权服务器会原封不动地返回这个值。</li></ul><ol start="2"><li>用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回redirect_uri参数指定的网址。跳转时，会传回一个授权码，就像下面这样。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">https://a.com/callback?code=AUTHORIZATION_CODE    <span class="comment">#code参数就是授权码</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。 用户不可见，服务端行为</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">https://b.com/oauth/token?</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> client_id=CLIENT_ID&amp;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> client_secret=CLIENT_SECRET&amp;       <span class="comment"># client_id和client_secret用来让B确认A的身份,client_secret参数是保密的，因此只能在后端发请求</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> grant_type=authorization_code&amp;     <span class="comment"># 采用的授权方式是授权码</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> code=AUTHORIZATION_CODE&amp;           <span class="comment"># 上一步拿到的授权码</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> redirect_uri=CALLBACK_URL          <span class="comment"># 令牌颁发后的回调网址</span></span></span><br></pre></td></tr></table></figure><ol start="4"><li>B 网站收到请求以后，就会颁发令牌。具体做法是向redirect_uri指定的网址，发送一段 JSON 数据。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">&#123;</span>    </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  <span class="string">&quot;access_token&quot;</span>:<span class="string">&quot;ACCESS_TOKEN&quot;</span>,    <span class="comment"># 令牌</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  <span class="string">&quot;token_type&quot;</span>:<span class="string">&quot;bearer&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  <span class="string">&quot;expires_in&quot;</span>:2592000,</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  <span class="string">&quot;refresh_token&quot;</span>:<span class="string">&quot;REFRESH_TOKEN&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  <span class="string">&quot;scope&quot;</span>:<span class="string">&quot;read&quot;</span>,</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  <span class="string">&quot;uid&quot;</span>:100101,</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  <span class="string">&quot;info&quot;</span>:&#123;...&#125;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="简化-隐式-模式"><a href="#简化-隐式-模式" class="headerlink" title="简化(隐式)模式"></a>简化(隐式)模式</h1><p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。<strong>RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌，这种方式没有授权码这个中间步骤，所以称为（授权码）”隐藏式”（implicit）</strong></p><p>简化模式不通过第三方应用程序的服务器，直接在浏览器中向授权服务器申请令牌，跳过了”授权码”这个步骤，所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。</p><p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E7%AE%80%E5%8C%96%E6%A8%A1%E5%BC%8F-%E5%AF%BC%E5%87%BA.png" alt="简化模式-导出"></p><ol><li>A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">https://b.com/oauth/authorize?</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  response_type=token&amp;          <span class="comment"># response_type参数为token，表示要求直接返回令牌</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  client_id=CLIENT_ID&amp;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  redirect_uri=CALLBACK_URL&amp;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  scope=<span class="built_in">read</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回redirect_uri参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">https://a.com/callback<span class="comment">#token=ACCESS_TOKEN   #token参数就是令牌，A 网站直接在前端拿到令牌。</span></span></span><br></pre></td></tr></table></figure><h1 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h1><p><strong>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为”密码式”（password）。</strong></p><p>在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而授权服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。</p><p>适用场景：自家公司搭建的授权服务器</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F-%E5%AF%BC%E5%87%BA.png" alt="密码模式-导出"></p><ol><li>A 网站要求用户提供 B 网站的用户名和密码，拿到以后，A 就直接向 B 请求令牌。整个过程中，客户端不得保存用户的密码。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">https://oauth.b.com/token?</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  grant_type=password&amp;       <span class="comment"># 授权方式是&quot;密码式&quot;</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  username=USERNAME&amp;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  password=PASSWORD&amp;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  client_id=CLIENT_ID</span></span><br></pre></td></tr></table></figure><ol start="2"><li>B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。</li></ol><p><img src="https://note.youdao.com/yws/public/resource/eaab054e79f362d02340114569806d3a/xmlnote/B2F5BCFF59C64BB383A2F9F55BB99782/18917" alt="img"></p><h1 id="令牌的使用"><a href="#令牌的使用" class="headerlink" title="令牌的使用"></a>令牌的使用</h1><p>A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。</p><p>此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个Authorization字段，令牌就放在这个字段里面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">curl -H <span class="string">&quot;Authorization: Bearer ACCESS_TOKEN&quot;</span> \</span></span><br><span class="line"><span class="language-bash">&gt; <span class="string">&quot;https://api.b.com&quot;</span></span></span><br></pre></td></tr></table></figure><p>也可以通过添加请求参数access_token请求数据。</p><h1 id="更新令牌"><a href="#更新令牌" class="headerlink" title="更新令牌"></a>更新令牌</h1><p>令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要。OAuth 2.0 允许用户自动更新令牌。</p><p>具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">https://b.com/oauth/token?</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  grant_type=refresh_token&amp;      <span class="comment"># grant_type参数为refresh_token表示要求更新令牌</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  client_id=CLIENT_ID&amp;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  client_secret=CLIENT_SECRET&amp;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">  refresh_token=REFRESH_TOKEN    <span class="comment"># 用于更新令牌的令牌</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
          <category> 微服务安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security OAuth2专题一（应用举例）</title>
      <link href="/2023/02/16/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/SpringCloud/Spring%20Security%20OAuth2/Spring%20Security%20OAuth2%E4%B8%93%E9%A2%98%E4%B8%80%EF%BC%88%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B%EF%BC%89/"/>
      <url>/2023/02/16/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/SpringCloud/Spring%20Security%20OAuth2/Spring%20Security%20OAuth2%E4%B8%93%E9%A2%98%E4%B8%80%EF%BC%88%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><h1 id="京东使用第三方微信登录"><a href="#京东使用第三方微信登录" class="headerlink" title="京东使用第三方微信登录"></a>京东使用第三方微信登录</h1><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E4%BA%AC%E4%B8%9C%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95.png" alt="京东第三方登录"></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E4%BA%AC%E4%B8%9C%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E5%9C%B0%E5%9D%80.png" alt="京东第三方登录地址"></p><h1 id="地址栏解析"><a href="#地址栏解析" class="headerlink" title="地址栏解析"></a>地址栏解析</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/qrconnect?appid:wx827225356b689e24</span><br><span class="line">state:742A75F5598469AA936F8A426304EB803A644AC9583AC18A04367CAA930AD5D76226433613D2AE1789958E653D32CC76</span><br><span class="line">redirect_uri:https://qq.jd.com/new/wx/callback.action?view</span><br><span class="line">uuid:739db764fe49481b80fd4dd3c5eb7f0f</span><br><span class="line">response_type:code</span><br><span class="line">scope:snsapi_login</span><br><span class="line">#wechat_redirect</span><br></pre></td></tr></table></figure><h2 id="appid"><a href="#appid" class="headerlink" title="appid"></a>appid</h2><p>微信开放平台。京东商城去微信开放平台注册，注册后会得到 appid、appsecret。需要绑定 redirect_uri，即成功之后要跳转的地址。</p><h2 id="redirect-uri"><a href="#redirect-uri" class="headerlink" title="redirect_uri"></a>redirect_uri</h2><p>京东提供的接口，当用户授权之后，微信用户可以登录京东，回到京东的界面。</p><h2 id="response-type"><a href="#response-type" class="headerlink" title="response_type"></a>response_type</h2><p>code —— oauth2 的授权码模式。</p><h2 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h2><p>作用域</p><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>不会变化，会原封不动的返回给京东（可以防止跨站点伪造攻击）</p><h2 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h2><p>可以作为回调到哪个页面的定位</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/OAuth2%20%E4%BA%AC%E4%B8%9C%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B%E5%9B%BE-%E5%AF%BC%E5%87%BA.png" alt="OAuth2 京东第三方登录示例图-导出"></p><p><a href="https://developers.weixin.qq.com/doc/oplatform/Mobile_App/WeChat_Login/Development_Guide.html">微信官方文档 · 开放平台</a></p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>（1） <strong>Third­party application</strong>：第三方应用程序，又称”客户端”（client），即例子中的”京东”。</p><p>（2）<strong>HTTP service</strong>：HTTP服务提供商，简称”服务提供商”，即例子中的Google。</p><p>（3）<strong>Resource Owner</strong>：资源所有者，又称”用户”（user）。</p><p>（4）<strong>User Agent</strong>：用户代理，比如浏览器。</p><p>（5）<strong>Authorization server</strong>：授权服务器，即服务提供商专门用来处理认证授权的服务器。</p><p>（6）<strong>Resource server</strong>：资源服务器，即服务提供商存放用户生成的资源的服务器。它与授权服务器，可以是同一台服务器，也可以是不同的服务器。</p><p>OAuth 的作用就是让”客户端”安全可控地获取”用户”的授权，与”服务提供商”进行交互。</p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li><p>更安全，客户端不接触用户密码，服务器端更易集中保护</p></li><li><p>广泛传播并被持续采用</p></li><li><p>短寿命和封装的token</p></li><li><p>资源服务器和授权服务器解耦</p></li><li><p>集中式授权，简化客户端</p></li><li><p>HTTP/JSON友好，易于请求和传递token</p></li><li><p>考虑多种客户端架构场景</p></li><li><p>客户可以具有不同的信任级别</p></li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li><p>协议框架太宽泛，造成各种实现的兼容性和互操作性差</p></li><li><p>不是一个认证协议，本身并不能告诉你任何用户信息。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
          <category> 微服务安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微服务安全Spring Security OAuth2</title>
      <link href="/2023/02/16/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/SpringCloud/Spring%20Security%20OAuth2/Spring%20Security%20OAuth2/"/>
      <url>/2023/02/16/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/SpringCloud/Spring%20Security%20OAuth2/Spring%20Security%20OAuth2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>学习 Spring Security OAuth2 前提：掌握 Spring Security</strong></p><p>OAuth（Open Authorization）是一个关于授权（authorization）的开放网络标准，允许用户授权第三方应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方移动应用或分享他们数据的所有内容。OAuth 在全世界得到广泛应用，目前版本是 2.0。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li>应用举例</li><li>设计思路</li><li>授权码模式</li><li>密码模式</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
          <category> 微服务安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Security </tag>
            
            <tag> OAuth 2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亿级流量架构专题四 (整合ELK)</title>
      <link href="/2023/02/16/java/practice/Billion-level%20traffic%20architecture/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84%E4%B8%93%E9%A2%98%E5%9B%9B%EF%BC%88%E6%95%B4%E5%90%88ELK%EF%BC%89/"/>
      <url>/2023/02/16/java/practice/Billion-level%20traffic%20architecture/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84%E4%B8%93%E9%A2%98%E5%9B%9B%EF%BC%88%E6%95%B4%E5%90%88ELK%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通过 Skywalking 的链路追踪，将 traceId 嵌入业务日志中。使用 ELK 进行日志收集，那么 ELK 就可以利用 TID 快速定对到对应链路日志，从而快速定位问题。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><h1 id="日志收集架构"><a href="#日志收集架构" class="headerlink" title="日志收集架构"></a>日志收集架构</h1><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230213234314365.png" alt="image-20230213234314365"></p><h1 id="FileBeat-收集本地日志"><a href="#FileBeat-收集本地日志" class="headerlink" title="FileBeat 收集本地日志"></a>FileBeat 收集本地日志</h1><p>在 FileBeat 根目录下，创建 <code>filebeat_skywalking_log.yml</code>配置文件，配置如下内容。我的日志生成在 G:\logs\tulingmall\ 目录下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">G:\logs\tulingmall\*.log</span></span><br><span class="line">  <span class="attr">multiline.pattern:</span> <span class="string">&#x27;^\d&#123;4&#125;\-\d&#123;2&#125;\-\d&#123;2&#125;\s\d&#123;2&#125;\:\d&#123;2&#125;\:\d&#123;2&#125;\.\d&#123;3&#125;&#x27;</span></span><br><span class="line">  <span class="attr">multiline.negate:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">multiline.match:</span> <span class="string">after</span></span><br><span class="line"><span class="comment">#----------------------------- Logstash output --------------------------------</span></span><br><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;192.168.10.158:5044&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示</strong></p><p><code>^\d&#123;4&#125;\-\d&#123;2&#125;\-\d&#123;2&#125;\s\d&#123;2&#125;\:\d&#123;2&#125;\:\d&#123;2&#125;\.\d&#123;3&#125;</code>    日志多行合并</p><p>使用日期作为一行日志的起始，把日期后面的所有日志作为一行。这样，上报的日志就会有完整的堆栈调用链信息。</p></blockquote><h2 id="启动-FileBeat"><a href="#启动-FileBeat" class="headerlink" title="启动 FileBeat"></a>启动 FileBeat</h2><p>使用如下命令，启动 FileBeat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filebeat.exe -e -c filebeat_skywalking_log.yml</span><br></pre></td></tr></table></figure><p>在 FileBeat 控制台上，可以看到 FileBeat 已经在监控和上报日志文件</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2023</span>-<span class="number">02</span>-<span class="number">14</span>T00:<span class="number">32</span>:<span class="number">11</span><span class="variable">.615</span>+<span class="number">0800</span>    INFO    [monitoring]    log/log<span class="variable">.go</span>:<span class="number">145</span>  Non-zero metrics in the last <span class="number">30</span>s        &#123;<span class="string">&quot;monitoring&quot;</span>: &#123;<span class="string">&quot;metrics&quot;</span>: &#123;<span class="string">&quot;beat&quot;</span>:&#123;<span class="string">&quot;cpu&quot;</span>:&#123;<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">265</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">15</span>&#125;&#125;,<span class="string">&quot;total&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">1093</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">15</span>&#125;,<span class="string">&quot;value&quot;</span>:<span class="number">1093</span>&#125;,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">828</span>&#125;&#125;,<span class="string">&quot;handles&quot;</span>:&#123;<span class="string">&quot;open&quot;</span>:<span class="number">375</span>&#125;,<span class="string">&quot;info&quot;</span>:&#123;<span class="string">&quot;ephemeral_id&quot;</span>:<span class="string">&quot;30088212-a12f-42c6-92a7-73995acadacc&quot;</span>,<span class="string">&quot;uptime&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">900141</span>&#125;&#125;,<span class="string">&quot;memstats&quot;</span>:&#123;<span class="string">&quot;gc_next&quot;</span>:<span class="number">16081184</span>,<span class="string">&quot;memory_alloc&quot;</span>:<span class="number">11287664</span>,<span class="string">&quot;memory_total&quot;</span>:<span class="number">316289184</span>,<span class="string">&quot;rss&quot;</span>:<span class="number">3588096</span>&#125;,<span class="string">&quot;runtime&quot;</span>:&#123;<span class="string">&quot;goroutines&quot;</span>:<span class="number">50</span>&#125;&#125;,<span class="string">&quot;filebeat&quot;</span>:&#123;<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;added&quot;</span>:<span class="number">64</span>,<span class="string">&quot;done&quot;</span>:<span class="number">64</span>&#125;,<span class="string">&quot;harvester&quot;</span>:&#123;<span class="string">&quot;files&quot;</span>:&#123;<span class="string">&quot;7ecd6a34-7b9e-430d-bad4-7b6141cdc75e&quot;</span>:&#123;<span class="string">&quot;last_event_published_time&quot;</span>:<span class="string">&quot;2023-02-14T00:32:09.607Z&quot;</span>,<span class="string">&quot;last_event_timestamp&quot;</span>:<span class="string">&quot;2023-02-14T00:32:08.606Z&quot;</span>,<span class="string">&quot;read_offset&quot;</span>:<span class="number">12088</span>,<span class="string">&quot;size&quot;</span>:<span class="number">12088</span>&#125;,<span class="string">&quot;de226ab0-e781-43dd-898e-ea6201e54bc4&quot;</span>:&#123;<span class="string">&quot;last_event_published_time&quot;</span>:<span class="string">&quot;2023-02-14T00:32:11.183Z&quot;</span>,<span class="string">&quot;last_event_timestamp&quot;</span>:<span class="string">&quot;2023-02-14T00:32:11.183Z&quot;</span>,<span class="string">&quot;read_offset&quot;</span>:<span class="number">5991</span>,<span class="string">&quot;size&quot;</span>:<span class="number">5991</span>&#125;&#125;,<span class="string">&quot;open_files&quot;</span>:<span class="number">4</span>,<span class="string">&quot;running&quot;</span>:<span class="number">4</span>&#125;&#125;,<span class="string">&quot;libbeat&quot;</span>:&#123;<span class="string">&quot;config&quot;</span>:&#123;<span class="string">&quot;module&quot;</span>:&#123;<span class="string">&quot;running&quot;</span>:<span class="number">0</span>&#125;&#125;,<span class="string">&quot;output&quot;</span>:&#123;<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;acked&quot;</span>:<span class="number">64</span>,<span class="string">&quot;batches&quot;</span>:<span class="number">20</span>,<span class="string">&quot;total&quot;</span>:<span class="number">64</span>&#125;,<span class="string">&quot;read&quot;</span>:&#123;<span class="string">&quot;bytes&quot;</span>:<span class="number">120</span>&#125;,<span class="string">&quot;write&quot;</span>:&#123;<span class="string">&quot;bytes&quot;</span>:<span class="number">20397</span>&#125;&#125;,<span class="string">&quot;pipeline&quot;</span>:&#123;<span class="string">&quot;clients&quot;</span>:<span class="number">1</span>,<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;active&quot;</span>:<span class="number">2</span>,<span class="string">&quot;published&quot;</span>:<span class="number">64</span>,<span class="string">&quot;total&quot;</span>:<span class="number">64</span>&#125;,<span class="string">&quot;queue&quot;</span>:&#123;<span class="string">&quot;acked&quot;</span>:<span class="number">64</span>&#125;&#125;&#125;,<span class="string">&quot;registrar&quot;</span>:&#123;<span class="string">&quot;states&quot;</span>:&#123;<span class="string">&quot;current&quot;</span>:<span class="number">4</span>,<span class="string">&quot;update&quot;</span>:<span class="number">64</span>&#125;,<span class="string">&quot;writes&quot;</span>:&#123;<span class="string">&quot;success&quot;</span>:<span class="number">20</span>,<span class="string">&quot;total&quot;</span>:<span class="number">20</span>&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="LogStash-解析-Trace-ID"><a href="#LogStash-解析-Trace-ID" class="headerlink" title="LogStash 解析 Trace ID"></a>LogStash 解析 Trace ID</h1><p>通过 Grok 自定义正则表达式，可以从日志行中抽取出 trace id，就可以在 ElasticSearch 中建立索引，方便日志检索。使用如下表达式即可抽取 trace id。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">(?&lt;trace_id&gt;[0-9a-f.]&#123;53,54&#125;</span></span><br></pre></td></tr></table></figure><h2 id="配置-LogStash"><a href="#配置-LogStash" class="headerlink" title="配置 LogStash"></a>配置 LogStash</h2><p>在 LogStash 的 config 目录下，创建 filebeat-skywalking-es.conf 配置文件。写入如下内容。</p><p>在 hosts 处，配置了 ElasticSearch 集群。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">    <span class="string">beats</span> &#123;</span><br><span class="line">        <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">5044</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">grok</span> &#123;</span><br><span class="line">        <span class="string">match</span> <span class="string">=&gt;</span> &#123;</span><br><span class="line">          <span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;(?&lt;time&gt;\d&#123;4&#125;\-\d&#123;2&#125;\-\d&#123;2&#125;\s\d&#123;2&#125;\:\d&#123;2&#125;\:\d&#123;2&#125;\.\d&#123;3&#125;)\s(?&lt;level&gt;\w&#123;4,5&#125;)\s+\T\I\D\:\s*(?&lt;trace_id&gt;[0-9a-f.]&#123;53,54&#125;)\s<span class="template-variable">%&#123;DATA:thread&#125;</span>\s<span class="template-variable">%&#123;DATA:class&#125;</span>\:<span class="template-variable">%&#123;GREEDYDATA:content&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">mutate</span> &#123;</span><br><span class="line">        <span class="string">remove_field</span> <span class="string">=&gt;</span> <span class="string">&quot;message&quot;</span> <span class="comment"># 删除原始日志内容节省存储和带宽</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">    <span class="string">elasticsearch</span> &#123;</span><br><span class="line">        <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.158.10.30:9200&quot;</span>, <span class="string">&quot;192.158.10.31:9200&quot;</span>, <span class="string">&quot;192.158.10.32:9200&quot;</span>]</span><br><span class="line">        <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;tlmall-log&quot;</span> <span class="comment"># ES 重建立索引</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动-LogStash"><a href="#启动-LogStash" class="headerlink" title="启动 LogStash"></a>启动 LogStash</h2><p>使用如下命令启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/filebeat-skywalking-es.conf --config.reload.automatic</span><br></pre></td></tr></table></figure><p>在 LogStash 控制台上可以看到 LogStash 正在解析上报过来的日志。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">13</span>T08:<span class="number">34</span>:<span class="number">24</span>,<span class="number">331</span>][ERROR][logstash<span class="variable">.codecs</span><span class="variable">.json</span>     ][main] JSON parse error, original data now in message field &#123;:error=&gt;#&lt;LogStash::Json::ParserError: Unexpected character (&#x27;-&#x27; (code <span class="number">45</span>)): Expected space separating root-level values</span><br><span class="line"> at [Source: (String)<span class="string">&quot;2023-02-14 00:34:20.471 INFO  TID:N/A com.alibaba.nacos.client.Worker.longPolling.fixed-tl.nacos.com_8848 c.a.n.c.config.impl.ClientWorker: get changedGroupKeys:[]&quot;</span>; line: <span class="number">1</span>, column: <span class="number">6</span>]&gt;, :data=&gt;<span class="string">&quot;2023-02-14 00:34:20.471 INFO  TID:N/A com.alibaba.nacos.client.Worker.longPolling.fixed-tl.nacos.com_8848 c.a.n.c.config.impl.ClientWorker: get changedGroupKeys:[]&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">13</span>T08:<span class="number">34</span>:<span class="number">24</span>,<span class="number">331</span>][ERROR][logstash<span class="variable">.codecs</span><span class="variable">.json</span>     ][main] JSON parse error, original data now in message field &#123;:error=&gt;#&lt;LogStash::Json::ParserError: Unexpected character (&#x27;-&#x27; (code <span class="number">45</span>)): Expected space separating root-level values</span><br><span class="line"> at [Source: (String)<span class="string">&quot;2023-02-14 00:34:22.951 DEBUG TID:N/A com.alibaba.nacos.naming.failover com.alibaba.nacos.client.naming: failover switch is not found, failover00-00---000-VIPSRV_FAILOVER_SWITCH-000---00-00&quot;</span>; line: <span class="number">1</span>, column: <span class="number">6</span>]&gt;, :data=&gt;<span class="string">&quot;2023-02-14 00:34:22.951 DEBUG TID:N/A com.alibaba.nacos.naming.failover com.alibaba.nacos.client.naming: failover switch is not found, failover00-00---000-VIPSRV_FAILOVER_SWITCH-000---00-00&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="Kibana上查看收集的日志"><a href="#Kibana上查看收集的日志" class="headerlink" title="Kibana上查看收集的日志"></a>Kibana上查看收集的日志</h1><p>启动 Kibana 服务</p><blockquote><p><strong>注意</strong></p><p>启动 Kibana 服务，需要使用非 root 用户</p></blockquote><p>访问 <code>192.168.10.158:5061</code>，打开 Kibana UI 界面</p><h2 id="管理索引"><a href="#管理索引" class="headerlink" title="管理索引"></a>管理索引</h2><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230214005707001.png" alt="image-20230214005707001"></p><h2 id="查看索引信息"><a href="#查看索引信息" class="headerlink" title="查看索引信息"></a>查看索引信息</h2><p>点击对应索引，可以查看对应索引相关信息。点击 tlmall-log 索引，详细信息如下图</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230214010032748.png" alt="image-20230214010032748"></p><h2 id="创建索引模式"><a href="#创建索引模式" class="headerlink" title="创建索引模式"></a>创建索引模式</h2><p>点击 index patterns，创建索引模式</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230214010311761.png" alt="image-20230214010311761"></p><p>输入要创建索引模式的索引，并点击 Next step</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230214010426949.png" alt="image-20230214010426949"></p><p>这里未使用日期过滤（即所有的日志），为了能看到更多的上报日志（否则以前日志的可能看不到）</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230214010512071.png" alt="image-20230214010512071"></p><p>生成的索引模式如下</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230214010533772.png" alt="image-20230214010533772"></p><h2 id="过滤日志"><a href="#过滤日志" class="headerlink" title="过滤日志"></a>过滤日志</h2><p>在 Kibnan 的 Discover 里可以直接查看对应 TID（trace id）的日志。这里添加的过滤条件，即只显示日志级别为 ERROR 的日志</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230214010934496.png" alt="image-20230214010934496"></p><p>如下图，可以看到命中了两条错误日志</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230214011003456.png" alt="image-20230214011003456"></p><h2 id="通过TID查看详细信息"><a href="#通过TID查看详细信息" class="headerlink" title="通过TID查看详细信息"></a>通过TID查看详细信息</h2><p>点击展开，查看详细的报错信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230214215939083.png" alt="image-20230214215939083"></p>]]></content>
      
      
      <categories>
          
          <category> Skywalking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Skywalking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亿级流量架构专题五 (接入Gateway)</title>
      <link href="/2023/02/16/java/practice/Billion-level%20traffic%20architecture/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84%E4%B8%93%E9%A2%98%E4%BA%94%EF%BC%88%E6%8E%A5%E5%85%A5Gateway%EF%BC%89/"/>
      <url>/2023/02/16/java/practice/Billion-level%20traffic%20architecture/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84%E4%B8%93%E9%A2%98%E4%BA%94%EF%BC%88%E6%8E%A5%E5%85%A5Gateway%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>前提</strong>：</p><p>​    了解 Oauth2 协议以及其密码授权模式；</p><p>​    熟悉 Spring Security Oauth2 和 JWT 的使用；</p><p>​    熟悉 Spring Cloud Gateway 网关使用。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><h1 id="架构设计分析"><a href="#架构设计分析" class="headerlink" title="架构设计分析"></a>架构设计分析</h1><h2 id="多点登录"><a href="#多点登录" class="headerlink" title="多点登录"></a>多点登录</h2><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%A4%9A%E7%82%B9%E7%99%BB%E5%BD%95-%E5%AF%BC%E5%87%BA.png" alt="多点登录-导出"></p><h2 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h2><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95-%E5%AF%BC%E5%87%BA.png" alt="单点登录-导出"></p><h1 id="接入网关实现单点登录设计思路"><a href="#接入网关实现单点登录设计思路" class="headerlink" title="接入网关实现单点登录设计思路"></a>接入网关实现单点登录设计思路</h1><p>网关整合 OAuth2.0 有两种思路</p><ol><li><strong>一种授权服务器生成令牌，所有请求统一在网关层验证，判断权限等操作；</strong></li><li><strong>另一种是有各资源服务处理，网关只做请求转发。</strong></li></ol><p>比较常用的是第一种，把 API 网关作为 OAuth2.0 的资源服务器角色，实现接入客户端权限拦截、令牌解析，并转发当前登录用户信息给微服务。这样下游微服务就不需要关心令牌格式解析，以及 OAuth2.0 相关机制了。</p><p>网关在认证授权体系里主要负责两件事：</p><p>（1）作为 OAuth2.0 的资源服务器角色，实现接入方访问权限拦截；</p><p>（2）令牌解析，并转发当前登录用户信息（明文 token）给微服务</p><p>微服务拿到明文 token（明文 token 中包含登录用户的身份和权限信息）后也需要做两件事：</p><p>（1）用户授权拦截（看当前用户是否有权限访问该资源）</p><p>（2）将用户信息存储进当前线程上下文（有利于后续业务逻辑随时获取当前用户信息）</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E6%9E%B6%E6%9E%84-%E5%AF%BC%E5%87%BA.png" alt="单点登录架构-导出"></p><blockquote><p><strong>注意</strong></p><p>第 5 步可以省略，第 4 步携带的 token 可以使用非对称加密的方式，网关可以使用公钥解密。如果能够解密，那么就认为认证成功，就不需要远程 RPC 调用授权服务进行认证。</p></blockquote><h1 id="搭建微服务授权中心"><a href="#搭建微服务授权中心" class="headerlink" title="搭建微服务授权中心"></a>搭建微服务授权中心</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>对外暴露一些 OAuth2.0 的接口，需要引入 Nacos 服务发现的包 discovery</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos 注册中心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 OAuth2.0 策略，需要引入 OAuth2.0 的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring security oauth2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作为认证模块，需要获取用户信息并校验。校验就需要远程调用对应获取用户信息的服务进行校验。需要引入OpenFeign 的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- openfeign 服务远程调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>应用场景（大厂做法）</strong></p><ol><li><p>一个用户注册成功，可以在授权服务中心保存一份该用户信息备份（保留数据实时一致性，涉及到分布式事务，由于注册服务要求的性能不高，很少有同一时间大量注册。所以性能上要求不大）。这样授权服务再次认证时，无需远程 RPC 调用获取该用户信息的微服务。</p></li><li><p>也可以公用一套数据库。</p></li><li><p>注册时，尽量不要用 MQ，容易出现注册完登录不上的情形。要求<strong>实时性</strong>。</p></li></ol></blockquote><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><h3 id="yaml-配置"><a href="#yaml-配置" class="headerlink" title="yaml 配置"></a>yaml 配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tulingmall-auth</span></span><br><span class="line">    <span class="comment">#配置nacos注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">tlshopdb.com:8848</span>  <span class="comment">#注册中心地址</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">80a98d11-492c-4008-85aa-32d889e9b0d0</span>  <span class="comment">#环境隔离</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://tlshopdb.com:3306/micromall?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span> <span class="comment">#连接池初始化大小</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">10</span> <span class="comment">#最小空闲连接数</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span> <span class="comment">#最大连接数</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span> <span class="comment">#不统计这些请求数据</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span> <span class="comment">#访问监控网页的登录用户名和密码</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">druid</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">druid</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p><code>allow-bean-definition-overriding: true</code> 表示允许覆盖 <code>BeanDefinition</code></p></blockquote><h3 id="Spring-Security-配置"><a href="#Spring-Security-配置" class="headerlink" title="Spring Security 配置"></a>Spring Security 配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/19 16:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@EnableWebSecurity  // 只要引入 Spring Security 依赖，该注解就已经默认支持，不需要再添加</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TulingUserDetailService tulingUserDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 从数据库查询用户信息</span></span><br><span class="line">        auth.userDetailsService(tulingUserDetailService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用密码模式，需要用到 Spring Security 的认证管理器 AuthenticationManager</span></span><br><span class="line"><span class="comment">     * 我们需要将认证管理器暴露给授权服务器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定加密的方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口权限配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.formLogin().permitAll()</span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/oauth/**&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and().logout().permitAll()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-UserDetailsService接口"><a href="#实现-UserDetailsService接口" class="headerlink" title="实现 UserDetailsService接口"></a>实现 <code>UserDetailsService</code>接口</h3><p>实现 Spring Security 的 <code>UserDetailsService</code>接口。查询数据库获取用户信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/19 16:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TulingUserDetailService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 查询数据库，获取用户信息。如果涉及远程调用，即RPC调用</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(username)) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;用户登录用户名为空: &#123;&#125;&quot;</span>, username);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 拿到用户会员信息，如果该会员信息需要 Spring Security 去管理，需要进行封装</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">UmsMember</span> <span class="variable">umsMember</span> <span class="operator">=</span> getByUserName(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == umsMember) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;根据用户名没有查询到对应的用户信息: &#123;&#125;&quot;</span>, username);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;根据用户名: &#123;&#125;获取用户登录信息: &#123;&#125;&quot;</span>, username, umsMember);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 会员信息的封装 implements UserDetails</span></span><br><span class="line">        <span class="type">MemberDetails</span> <span class="variable">memberDetails</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberDetails</span>(umsMember);</span><br><span class="line">        <span class="keyword">return</span> memberDetails;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UmsMemberFeignService umsMemberFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UmsMember <span class="title function_">getByUserName</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="comment">// feign 获取会员信息</span></span><br><span class="line">        CommonResult&lt;UmsMember&gt; umsMemberCommonResult = umsMemberFeignService.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">return</span> umsMemberCommonResult.getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义-Feign-远程服务调用接口"><a href="#定义-Feign-远程服务调用接口" class="headerlink" title="定义 Feign 远程服务调用接口"></a>定义 Feign 远程服务调用接口</h3><p>Feign 远程服务调用接口，获取用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/19 17:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;tulingmall-member&quot;, path=&quot;/member/center&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UmsMemberFeignService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/loadUmsMember&quot;)</span></span><br><span class="line">    CommonResult&lt;UmsMember&gt; <span class="title function_">loadUserByUsername</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类上开启 Feign</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">// 开启 Feign</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TulingmailAuthCenterApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TulingmailAuthCenterApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装用户信息-UserDetails"><a href="#封装用户信息-UserDetails" class="headerlink" title="封装用户信息 UserDetails"></a>封装用户信息 UserDetails</h3><p>MemberDetails 用于封装用户信息，也可以继承 Security 的 User 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户信息的封装</span></span><br><span class="line"><span class="comment"> * 可以继承 User，也可以直接实现 UserDetailsService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/19 17:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberDetails</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UmsMember umsMember;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MemberDetails</span><span class="params">(UmsMember umsMember)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.umsMember = umsMember;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="comment">// 返回当前用户的权限, 基于 BRAC 角色的访问控制</span></span><br><span class="line">        <span class="comment">// 根据用户user获取角色role信息，通过role角色权限映射表，获取权限authority信息</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;TEST&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> umsMember.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> umsMember.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> umsMember.getStatus() == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UmsMember <span class="title function_">getUmsMember</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> umsMember;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启授权服务中心"><a href="#开启授权服务中心" class="headerlink" title="开启授权服务中心"></a>开启授权服务中心</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/19 16:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span>  <span class="comment">// 开启授权服务器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring 配置类自动帮我们封装的数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TulingUserDetailService tulingUserDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入认证管理器 AuthenticationManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManagerBean;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第三方信息的存储</span></span><br><span class="line"><span class="comment">     * 例如京东想要用微信的开放平台，实现微信登录京东商城，它必须在微信开放平台注册信息</span></span><br><span class="line"><span class="comment">     * 这个注册的过程，就是备案的第三方信息</span></span><br><span class="line"><span class="comment">     * 基于 JDBC 的方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clients</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 这里可以传入一个 ClientDetailsService 对象</span></span><br><span class="line">        clients.withClientDetails(clientDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * endpoint 端点的配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endpoints</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 使用密码模式需要配置</span></span><br><span class="line">        endpoints.authenticationManager(authenticationManagerBean)</span><br><span class="line">                <span class="comment">// 指定 refresh_token 的配置</span></span><br><span class="line">                .reuseRefreshTokens(<span class="literal">false</span>)  <span class="comment">// refresh_token 是否重复使用</span></span><br><span class="line">                .userDetailsService(tulingUserDetailService)    <span class="comment">// 刷新令牌授权包含对用户信息的检查</span></span><br><span class="line">                .allowedTokenEndpointRequestMethods(HttpMethod.GET, HttpMethod.POST);   <span class="comment">// 支持 GET、POST 请求</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权服务器安全配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> security</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 第三方客户端校验 token 需要带入 clientId 和 clientSecret 来校验</span></span><br><span class="line">        <span class="comment">// 1. 检查 token 的接口</span></span><br><span class="line">        <span class="comment">// 2. 检查 tokenKey 的接口</span></span><br><span class="line">        security.checkTokenAccess(<span class="string">&quot;isAuthenticated()&quot;</span>)</span><br><span class="line">                .tokenKeyAccess(<span class="string">&quot;isAuthenticated()&quot;</span>)   <span class="comment">// 来获取饿哦们的 tokenKey 需要带入 clientId、clientSecret</span></span><br><span class="line">                .allowFormAuthenticationForClients();   <span class="comment">// 允许表单认证</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建一个 ClientDetailsService Bean</span></span><br><span class="line"><span class="comment">     * ClientDetailsService 需要查数据库，那么就需要给它配置一个数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ClientDetailsService <span class="title function_">clientDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcClientDetailsService</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存储第三方信息的SQL"><a href="#存储第三方信息的SQL" class="headerlink" title="存储第三方信息的SQL"></a>存储第三方信息的SQL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `oauth_client_details`  (</span><br><span class="line">  `client_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `resource_ids` <span class="type">varchar</span>(<span class="number">256</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `client_secret` <span class="type">varchar</span>(<span class="number">256</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="keyword">scope</span>` <span class="type">varchar</span>(<span class="number">256</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `authorized_grant_types` <span class="type">varchar</span>(<span class="number">256</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `web_server_redirect_uri` <span class="type">varchar</span>(<span class="number">256</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `authorities` <span class="type">varchar</span>(<span class="number">256</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `access_token_validity` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `refresh_token_validity` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `additional_information` <span class="type">varchar</span>(<span class="number">4096</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `autoapprove` <span class="type">varchar</span>(<span class="number">256</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`client_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure><h3 id="配置资源服务器"><a href="#配置资源服务器" class="headerlink" title="配置资源服务器"></a>配置资源服务器</h3><p>资源服务器不必需</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/23 23:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TulingResourceServerConfig</span> <span class="keyword">extends</span> <span class="title class_">ResourceServerConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyrielle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/23 23:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getCurrentUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getCurrentUser</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> authentication.getPrincipal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>授权码模式</strong></p><p><a href="http://localhost:9999/oauth/authorize?response_type=code&amp;client_id=client&amp;redirect_uri=http://www.baidu.com&amp;scope=all">http://localhost:9999/oauth/authorize?response_type=code&amp;client_id=client&amp;redirect_uri=http://www.baidu.com&amp;scope=all</a>              </p><p><strong>密码模式</strong></p><p><a href="http://localhost:8080/oauth/token?username=fox&amp;password=123456&amp;grant_type=password&amp;client_id=client&amp;client_secret=123123&amp;scope=all">http://localhost:8080/oauth/token?username=fox&amp;password=123456&amp;grant_type=password&amp;client_id=client&amp;client_secret=123123&amp;scope=all</a>              </p>]]></content>
      
      
      <categories>
          
          <category> Gateway </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亿级流量架构专题三 （接入 Skywalking）</title>
      <link href="/2023/02/16/java/practice/Billion-level%20traffic%20architecture/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84%E4%B8%93%E9%A2%98%E4%B8%89%EF%BC%88%E6%8E%A5%E5%85%A5%20Skywalking%EF%BC%89/"/>
      <url>/2023/02/16/java/practice/Billion-level%20traffic%20architecture/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84%E4%B8%93%E9%A2%98%E4%B8%89%EF%BC%88%E6%8E%A5%E5%85%A5%20Skywalking%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>微服务接入 Skywalking，进行链路追踪，更方便的定位服务流程。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="">Skywalking OAP 服务部署</a></li></ul><h1 id="搭建-Skywalking-OAP-服务"><a href="#搭建-Skywalking-OAP-服务" class="headerlink" title="搭建 Skywalking OAP 服务"></a>搭建 <code>Skywalking OAP</code> 服务</h1><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/Skywalking-oap.png" alt="Skywalking-oap"></p><h1 id="微服务配置-Skywalking-Agent"><a href="#微服务配置-Skywalking-Agent" class="headerlink" title="微服务配置 Skywalking Agent"></a>微服务配置 Skywalking Agent</h1><p>使用 JVM 参数的方式启动微服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:G:\tuling\skywalking-agent\skywalking-agent.jar</span><br><span class="line">-Dskywalking.agent.service_name=tulingmall-member</span><br><span class="line">-Dskywalking.collector.backend_service=192.168.10.153:11800</span><br></pre></td></tr></table></figure><blockquote><p><strong>贴示</strong></p><ul><li><p><code>-javaagent</code> 指明 skywalking-agent.jar 包的位置</p></li><li><p><code>-Dskywalking.agent.service_name</code>  指明运行的微服务名称</p></li><li><p><code>-Dskywalking.collector.backend_service</code>  指明 Skywalking 服务的IP及端口</p><p><code>11800</code>是OAP的HTTP服务端口；<code>12800</code>是OAP的TCP服务端口</p></li></ul></blockquote><p>使用Java探针技术，微服务启动之前，在premain方法中，整合很多插件，来监控JVM的一些数据。最后会有个Sender进行数据上报至收集信息的OAP服务。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/jvm%E5%8F%82%E6%95%B0%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AEskywalking-agent.png" alt="jvm参数方式配置skywalking-agent"></p><h1 id="启动微服务"><a href="#启动微服务" class="headerlink" title="启动微服务"></a>启动微服务</h1><p>启动微服务，在 Skywalking UI 上可以查看对应服务</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/Skywalking%20%E6%9C%8D%E5%8A%A1%E6%9F%A5%E7%9C%8B.png" alt="Skywalking 服务查看"></p><h1 id="请求测试"><a href="#请求测试" class="headerlink" title="请求测试"></a>请求测试</h1><p>使用 postman 工具进行请求测试</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET localhost:8877/member/center/coupons</span><br><span class="line">Headers:</span><br><span class="line">memberId:1</span><br></pre></td></tr></table></figure><p>如下图，响应请求成功</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230213221705032.png" alt="image-20230213221705032"></p><h1 id="查看-Skywalking-UI"><a href="#查看-Skywalking-UI" class="headerlink" title="查看 Skywalking UI"></a>查看 Skywalking UI</h1><p>使用浏览器访问 Skywalking UI上，点击<Topology>，查看服务调用链路（为测试方便，此处没有开启网关，因为使用网关需要先开启OAth2认证，需要填写认证信息）</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230213222104399.png" alt="image-20230213222104399"></p><p>点击<Trace>，查看调用链信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230213222733598.png" alt="image-20230213222733598"></p><p>可以看到每个服务链路的调用耗时时间及接口信息等。点击展示的相关指标，可以进一步查看详细信息。</p><p>例如点击 API 中的 Feign，可以查看具体调用的信息：</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230213223357681.png" alt="image-20230213223357681"></p><h1 id="测试异常"><a href="#测试异常" class="headerlink" title="测试异常"></a>测试异常</h1><p>在 UmsCouponController 的 list 方法中，添加异常测试，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;获取用户优惠券列表&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParam(name = &quot;useStatus&quot;, value = &quot;优惠券筛选类型:0-&gt;未使用；1-&gt;已使用；2-&gt;已过期&quot;,allowableValues = &quot;0,1,2&quot;, paramType = &quot;query&quot;, dataType = &quot;integer&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/list&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;List&lt;SmsCouponHistory&gt;&gt; <span class="title function_">list</span><span class="params">(<span class="meta">@RequestParam(value = &quot;useStatus&quot;, required = false)</span> Integer useStatus,<span class="meta">@RequestHeader(&quot;memberId&quot;)</span> Long memberId)</span> &#123;</span><br><span class="line">    <span class="comment">// 测试异常</span></span><br><span class="line">    <span class="keyword">if</span>(memberId == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;非法参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;SmsCouponHistory&gt; couponHistoryList = umsCouponService.list(useStatus,memberId);</span><br><span class="line">    <span class="keyword">return</span> CommonResult.success(couponHistoryList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重启-Coupons-微服务"><a href="#重启-Coupons-微服务" class="headerlink" title="重启 Coupons 微服务"></a>重启 Coupons 微服务</h2><p>当 memberId = 2时，进行测试，响应异常</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230213224138164.png" alt="image-20230213224138164"></p><h2 id="Skywalking-链路追踪"><a href="#Skywalking-链路追踪" class="headerlink" title="Skywalking 链路追踪"></a>Skywalking 链路追踪</h2><p>在 Skywalking UI 上，查看该条请求链路，可以很清晰的看到链路调用失败的服务节点</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230213224323164.png" alt="image-20230213224323164"></p><h2 id="定位失败节点"><a href="#定位失败节点" class="headerlink" title="定位失败节点"></a>定位失败节点</h2><p>点击服务调用失败的最后一个节点，可以查看具体报错信息。可以看到所报的错就是上边主动抛出的“参数异常”。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230213224631594.png" alt="image-20230213224631594"></p><p>使用 Skywalking 直接可以看到服务调用链报错信息。但是如果节点很多，使用 Skywalking UI 去看报错信息，也很难找到问题复原现场，如何做？</p><p>可以使用 ELK 日志收集工具，然后再分析异常日志，通过 ELK 定位到异常日志。而且需要知道哪个调用链的问题，在 Skywalking UI 的调用链路上注意到如下一串字符（<strong>很重要</strong>），它贯穿与整个微服务链路，即 traceId。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230213225635142.png" alt="image-20230213225635142"></p><p>如果能找到有异常的 traceId，那么我们就可以在 ELK 中定位到异常。</p><h1 id="集成日志框架，生成-traceId"><a href="#集成日志框架，生成-traceId" class="headerlink" title="集成日志框架，生成 traceId"></a>集成日志框架，生成 traceId</h1><p>首先，需要在日志中嵌入 traceId。当收集日志时，就有一个 traceId 的信息。需要整合一些日志矿建，Skywalking 已经帮我们做好了。</p><p>这里使用的是 logback 日志框架。</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>在 member、coupons 两个微服务中，分别引入如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- apm-toolkit-logback-1.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.skywalking<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apm-toolkit-logback-1.x<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置-logBack"><a href="#配置-logBack" class="headerlink" title="配置 logBack"></a>配置 logBack</h2><p>在 member、coupons 两个微服务中，分贝添加 logback 日志配置文件 <code>logback-spring.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Spring Boot 默认的 logback XML 配置文件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台 Appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志的格式化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %tid %t %logger&#123;36&#125;: %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 从 Spring Boot 配置文件中，读取 spring.application.name 应用名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">name</span>=<span class="string">&quot;applicationName&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志文件 Appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志文件的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>/logs/tulingmall/$&#123;applicationName&#125;.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--滚动策略，基于时间 + 大小的分包策略 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>/logs/tulingmall/$&#123;applicationName&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>20<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>500MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志的格式化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 日志格式中添加 %tid 即可输出 trace id --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %tid %t %logger&#123;36&#125;: %msg%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置 Appender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>提示</strong></p><p><code>tid</code>    引入的<code> tid</code> 即为 <code>traceId</code>，可以输出 trace id</p></blockquote><h2 id="重启微服务"><a href="#重启微服务" class="headerlink" title="重启微服务"></a>重启微服务</h2><p>重启微服务后，再次使用 postman 测试上边主动抛出的“非法参数”的请求，在 IDEA 控制台上，可以看到<code>TID</code>已生成。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2023</span>-<span class="number">02</span>-<span class="number">13</span> <span class="number">23</span>:<span class="number">23</span>:<span class="number">36</span><span class="variable">.783</span> ERROR TID:de0e2795c0084647a205caaafb0dd93b<span class="variable">.93</span><span class="variable">.16763018162290001</span> http-nio-<span class="number">8855</span>-exec-<span class="number">1</span> o<span class="variable">.a</span><span class="variable">.c</span><span class="variable">.c</span><span class="variable">.C</span>.[.[.[.[dispatcherServlet]: Servlet<span class="variable">.service</span>() <span class="keyword">for</span> servlet [dispatcherServlet] in <span class="keyword">context</span> <span class="keyword">with</span> path [] threw exception [Request processing failed; nested exception is java<span class="variable">.lang</span><span class="variable">.IllegalArgumentException</span>: 非法参数] <span class="keyword">with</span> root cause</span><br><span class="line">java<span class="variable">.lang</span><span class="variable">.IllegalArgumentException</span>: 非法参数</span><br><span class="line">at com<span class="variable">.tuling</span><span class="variable">.tulingmall</span><span class="variable">.controller</span><span class="variable">.UmsCouponController</span><span class="variable">.list</span>$original$lij1zcwq(UmsCouponController<span class="variable">.java</span>:<span class="number">52</span>)</span><br></pre></td></tr></table></figure><h1 id="TID-的好处"><a href="#TID-的好处" class="headerlink" title="TID 的好处"></a>TID 的好处</h1><p>日志中有的 TID，当 ELK 收集这些业务日志时，这些日志中就有 TID。然后我们可以根据 TID，找到对应的调用链路。</p><p>日志已经生成到了指定的目录，可以使用 FileBeat 去收集指定目录下的日志数据。</p>]]></content>
      
      
      <categories>
          
          <category> Skywalking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Skywalking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware-NAT 网络设置及设置静态IP</title>
      <link href="/2023/02/13/others/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/02/13/others/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="设置VMware手动DNS"><a href="#设置VMware手动DNS" class="headerlink" title="设置VMware手动DNS"></a>设置VMware手动DNS</h1><p>编辑→虚拟网络编辑器→NAT设置→DNS设置</p><p>​    <img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230213214540989.png" alt="image-20230213214540989"></p><h1 id="设置静态IP、DNS"><a href="#设置静态IP、DNS" class="headerlink" title="设置静态IP、DNS"></a>设置静态IP、DNS</h1><p>编辑 <code>/etc/sysconfig/network-scripts/ifcfg-ens33</code> 文件：</p><h2 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.230.129 # 和NAT子网匹配</span><br></pre></td></tr></table></figure><h2 id="设置DNS"><a href="#设置DNS" class="headerlink" title="设置DNS"></a>设置DNS</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DNS1=8.8.8.8</span><br><span class="line">DNS2=114.114.114.114</span><br></pre></td></tr></table></figure><h2 id="设置网关"><a href="#设置网关" class="headerlink" title="设置网关"></a>设置网关</h2><p>编辑 <code>/etc/sysconfig/network</code> 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GATEWAY=192.168.230.2 # 和NAT网关对应</span><br></pre></td></tr></table></figure><h1 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@s2 luliming]# systemctl restart network</span><br><span class="line">[root@s2 luliming]# ping www.baidu.com</span><br><span class="line">PING www.wshifen.com (103.235.46.39) 56(84) bytes of data.</span><br><span class="line">64 bytes from 103.235.46.39 (103.235.46.39): icmp_seq=2 ttl=128 time=230 ms</span><br><span class="line">64 bytes from 103.235.46.39 (103.235.46.39): icmp_seq=3 ttl=128 time=224 ms</span><br><span class="line">64 bytes from 103.235.46.39 (103.235.46.39): icmp_seq=4 ttl=128 time=214 ms</span><br><span class="line">64 bytes from 103.235.46.39 (103.235.46.39): icmp_seq=5 ttl=128 time=233 ms</span><br><span class="line">64 bytes from 103.235.46.39 (103.235.46.39): icmp_seq=6 ttl=128 time=306 ms</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Centos 7 </category>
          
          <category> VMware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware-NAT </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos 7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 专题七 （ElasticSearch 优化）</title>
      <link href="/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E4%B8%83%EF%BC%88ElasticSearch%20%E4%BC%98%E5%8C%96%EF%BC%89/"/>
      <url>/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E4%B8%83%EF%BC%88ElasticSearch%20%E4%BC%98%E5%8C%96%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对 ElasticSearch 进行合理的优化，提高 ElasticSearch 集群的性能。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h1 id="分片策略"><a href="#分片策略" class="headerlink" title="分片策略"></a>分片策略</h1><h2 id="合理设置分片数"><a href="#合理设置分片数" class="headerlink" title="合理设置分片数"></a>合理设置分片数</h2><p>ElasticSearch 在 7.0 之前，ElasticSearch 默认 5 个主分片、1 个备份分片；在7.0 之后，默认一个主分片、1 个备份分片。</p><p>分片和副本的设计为 ES 提供了支持分布式和故障转移的特性，但并不意味着分片和副本是可以无限分配的。而且索引的分片完成分配后，由于索引的路由机制，我们是不能重新修改分片数的。</p><p>可能有人会说，我不知道这个索引将来会变得很大，并且过后我也不能更改索引的大小，所以为了保险起见，还是给它设置 1000 个分片吧。但是需要知道的是，一个分片并不是没有代价的。</p><p>需要了解如下几个问题：</p><ol><li>每个搜索请求都需要命中索引中的每一个分片，如果每一个分片都处于不同的节点还好，但是如果多个分片都需要在同一个节点上竞争使用相同的资源就有些糟糕了。</li><li>用于计算相关度的词项统计信息是基于分片的。如果有许多分片，每一个都只有很少的数据，会导致很低的相关度。</li></ol><h2 id="推迟分片分配"><a href="#推迟分片分配" class="headerlink" title="推迟分片分配"></a>推迟分片分配</h2><p>对于节点瞬时中断的问题，默认情况，集群会等一分钟来查看节点是否会重新加入。如果这个节点在此期间重新加入，重新加入的节点会保持现有的分片数据，不会出发新的分片分配。这样就可以减少 ES 在自动再平衡可用分片时所带来的极大开销。</p><p>通过修改参数 <code>delayed_timeout</code>，可以延长再均衡的时间。可以全局设置，也可以在索引级别进行修改。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">PUT</span> <span class="string">/_all/_settings</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;settings&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;index.unassigned.node_left.delayed_timeout&quot;:</span> <span class="string">&quot;5m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量提交数据"><a href="#批量提交数据" class="headerlink" title="批量提交数据"></a>批量提交数据</h2><p>ES 提供 Bulk API 支持批量操作，当我们有大量的写任务时，可以使用 Bulk 来进行批量写入。</p><p>通用的策略如下：</p><p>Bulk 默认设置批量提交的数据量不能超过 100M，数据条数一般是根据文档的大小和服务器性能而定的。但是单次批处理的数据大小应从 5MB~15MB 逐渐增加。当性能没有提升时，把这个数据量作为最大值。</p><h2 id="优化存储设备"><a href="#优化存储设备" class="headerlink" title="优化存储设备"></a>优化存储设备</h2><p>ES 是一种密度使用磁盘的应用，在段合并时会频繁操作磁盘，所以对磁盘要求较高，可以使用 SSD。当磁盘速度提升之后，集群的整体性能会大幅提高。</p><h2 id="减少-Refresh-次数"><a href="#减少-Refresh-次数" class="headerlink" title="减少 Refresh 次数"></a>减少 Refresh 次数</h2><p>Lucene 在新增数据时，采用了延迟写入的策略。默认情况下索引的 refresh_interval 为 1秒。</p><p>Lucene 将待写入的数据先写到内存中，超过 1 秒（默认）时，就会触发一次 Refresh。然后 Refresh 会把内存中的数据刷新到操作系统的文件缓存系统中。</p><p>如果我们对搜索的时效性要求不高，可以将 Refresh 周期延长。例如 30 秒，这样还可以有效地减少段刷新次数。但这同时也意味着需要消耗更多的 Heap 内存。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212224007228.png" alt="image-20230212224007228"></p><blockquote><p><strong>注意</strong></p><ol><li><p><code>Memory</code> 阶段，不能被 ElasticSearch 检索</p></li><li><p><code>OS Cache</code> 阶段，可以被 ElasticSearch 检索</p></li><li><p><strong>内存数据会不会丢失？</strong></p><p>不会。</p><p>（1） 在<code>Memory</code>阶段，存在一主一备。</p><p>（2） 同时在数据写入 <code>Memory</code>时，还会写入 <code>Translog</code>中，如果存在数据丢失，可以从 <code>Translog</code>进行恢复。</p></li></ol></blockquote><h2 id="加大-Flush-设置"><a href="#加大-Flush-设置" class="headerlink" title="加大 Flush 设置"></a>加大 Flush 设置</h2><p>Flush 的主要目的是把文件缓存系统中的段持久化到硬盘。当 Translog 的数据量达到 512MB 或者 30 分钟时，会触发一次 Flush。</p><p><code>index.translog.flush_threshold_size</code> 参数的默认值是 512MB， 我们可以进行修改。增加参数值意味着文件缓存系统中可能需要存储更多的数据。所以我们需要为操作系统的文件缓存系统留下足够的空间。</p><h2 id="减少副本的数量"><a href="#减少副本的数量" class="headerlink" title="减少副本的数量"></a>减少副本的数量</h2><p>ES 为了保证集群的可用性，提供了 Replicas（副本）支持。然而每个副本也会执行分析、索引及可能得合并过程。所以 Replicas 的数量会严重影响写索引的效率。</p><p>当写索引时，需要把写入的数据都同步到副本节点，副本节点越多，写索引的效率就越慢。</p><p>如果我们需要大批量进行写入操作，可以先禁止 Replica 的复制。设置 <code>index.number_of_replicas: 0</code>关闭副本。在写入完成后，Replica 修改回正常的状态。</p><h2 id="路由选择"><a href="#路由选择" class="headerlink" title="路由选择"></a>路由选择</h2><p>当我们查询文档的时候，Elasticsearch 如何知道一个文档应该存放到哪个分片中呢？它其实是</p><p>通过下面这个公式来计算出来：</p><p><code>shard = hash(routing) % number_of_primary_shardsrouting</code> 默认值是文档的 id，也可以采用自定义值，比如用户 id。</p><ul><li><strong>不带 routing 查询</strong></li></ul><p>在查询的时候因为不知道要查询的数据具体在哪个分片上，所以整个过程分为 2 个步骤：</p><p>1、分发：请求到达协调节点后，协调节点将查询请求分发到每个分片上。</p><p>2、聚合: 协调节点搜集到每个分片上查询结果，在将查询的结果进行排序，之后给用户返回结果。</p><ul><li><strong>带 routing 查询</strong></li></ul><p>查询的时候，可以直接根据 routing 信息定位到某个分配查询，不需要查询所有的分配，经过协调节点排序。向上面自定义的用户查询，如果 routing 设置为 userid 的话，就可以直接查询出数据来，效率提升很多。</p><h1 id="ES核心配置参数"><a href="#ES核心配置参数" class="headerlink" title="ES核心配置参数"></a>ES核心配置参数</h1><p>ES 核心配置文件<code>elasticsearch.yml</code>重要参数</p><table><thead><tr><th>参数名</th><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>cluster.name</td><td>elasticsearch</td><td>配置 ES 的集群名称，默认值是 ES，建议改成与所存数据相关的名称，ES 会自动发现在同一网段下的集群名称相同的节点</td></tr><tr><td>node.name</td><td>node-1</td><td>集群中的节点名，在同一个集群中不能重复。节点的名称一旦设置，就不能再改变了。当然，也可以设 置 成 服 务 器 的 主 机 名 称 ， 例 如 node.name:${HOSTNAME}。</td></tr><tr><td>node.master</td><td>true</td><td>指定该节点是否有资格被选举成为 Master 节点，默认是 True，如果被设置为 True，则只是有资格成为Master 节点，具体能否成为 Master 节点，需要通过选举产生。</td></tr><tr><td>node.data</td><td>true</td><td>指定该节点是否存储索引数据，默认为 True。数据的增、删、改、查都是在 Data 节点完成的。</td></tr><tr><td>index.number_of_shards</td><td>1</td><td>设置都索引分片个数，默认是 1 片。也可以在创建索引时设置该值，具体设置为多大都值要根据数据量的大小来定。如果数据量不大，则设置成 1 时效率最高</td></tr><tr><td>index.number_of_replicas</td><td>1</td><td>设置默认的索引副本个数，默认为 1 个。副本数越多，集群的可用性越好，但是写索引时需要同步的数据越多。</td></tr><tr><td>transport.tcp.compress</td><td>true</td><td>设置在节点间传输数据时是否压缩，默认为 False，不压缩</td></tr><tr><td>discovery.zen.minimum_master_nodes</td><td>1</td><td>设置在选举 Master 节点时需要参与的最少的候选主节点数，默认为 1。如果使用默认值，则当网络不稳定时有可能会出现脑裂。合理的数值为 (master_eligible_nodes/2)+1 ，其中master_eligible_nodes 表示集群中的候选主节点数</td></tr><tr><td>discovery.zen.ping.timeout</td><td>3s</td><td>设置在集群中自动发现其他节点时 Ping 连接的超时时间，默认为 3 秒。在较差的网络环境下需要设置得大一点，防止因误判该节点的存活状态而导致分片的转移</td></tr></tbody></table><h1 id="问题及解决方案"><a href="#问题及解决方案" class="headerlink" title="问题及解决方案"></a>问题及解决方案</h1><h2 id="为什么要使用-ES"><a href="#为什么要使用-ES" class="headerlink" title="为什么要使用 ES?"></a>为什么要使用 ES?</h2><p>系统中的数据，随着业务的发展，时间的推移，将会非常多，而业务中往往采用模糊查询进行数据的搜索，而模糊查询会导致查询引擎放弃索引，导致系统查询数据时都是全表扫描，在百万级别的数据库中，</p><p>查询效率是非常低下的，而我们使用 ES 做一个全文索引，将经常查询的系统功能的某些字段，比如说电商系统的商品表中商品名，描述、价格还有 id 这些字段我们放入 ES 索引库里，可以提高查询速度。</p><h2 id="master-选举流程"><a href="#master-选举流程" class="headerlink" title="master 选举流程"></a>master 选举流程</h2><ol><li><p>Elasticsearch 的选主是 ZenDiscovery 模块负责的，主要包含 Ping（节点之间通过这个 RPC 来发现彼此）和 Unicast（单播模块包含一个主机列表以控制哪些节点需要 ping 通）这两部分</p></li><li><p>对所有可以成为 master 的节点（node.master: true）根据 nodeId 字典排序，每次选举每个节点都把自己所知道节点排一次序，然后选出第一个（第 0 位）节点，暂且认为它是 master 节点。</p></li><li><p>如果对某个节点的投票数达到一定的值（可以成为 master 节点数 n/2+1）并且该节点自己也选举自己，那这个节点就是 master。否则重新选举一直到满足上述条件。</p></li><li><p>master 节点的职责主要包括集群、节点和索引的管理，不负责文档级别的管理；</p></li></ol><h2 id="集群脑裂问题"><a href="#集群脑裂问题" class="headerlink" title="集群脑裂问题"></a>集群脑裂问题</h2><h3 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h3><ol><li><p><strong>网络问题</strong>：集群间的网络延迟导致一些节点访问不到 master，认为 master 挂掉了从而选举出新的master，并对 master 上的分片和副本标红，分配新的主分片</p></li><li><p><strong>节点负载</strong>：主节点的角色既为 master 又为 data，访问量较大时可能会导致 ES 停止响应造成大面积延迟，此时其他节点得不到主节点的响应认为主节点挂掉了，会重新选取主节点。</p></li><li><p><strong>内存回收</strong>：data 节点上的 ES 进程占用的内存较大，引发 JVM 的大规模内存回收，造成 ES 进程失去响应。</p></li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><strong>减少误判：</strong>discovery.zen.ping_timeout 节点状态的响应时间，默认为 3s，可以适当调大，如果 master在该响应时间的范围内没有做出响应应答，判断该节点已经挂掉了。</li></ol><p>调大参数（如 6s，discovery.zen.ping_timeout:6），可适当减少误判。</p><ol start="2"><li><p><strong>选举触发</strong>: <code>discovery.zen.minimum_master_nodes:1</code> </p><p>该参数是用于控制选举行为发生的最小集群主节点数量。当备选主节点的个数大于等于该参数的值，且备选主节点中有该参数个节点认为主节点挂了，进行选举。官方建议为（n/2）+1，n 为主节点个数(即有资格成为主节点的节点个数）</p></li><li><p><strong>角色分离</strong>：即 master 节点与 data 节点分离，限制角色</p></li></ol><p>（1） 主节点配置为：node.master: true node.data: false</p><p>（2） 从节点配置为：node.master: false node.data: true</p><h2 id="更新删除文档"><a href="#更新删除文档" class="headerlink" title="更新删除文档"></a>更新删除文档</h2><ol><li><p>删除和更新也都是写操作，但是 Elasticsearch 中的文档是不可变的，因此不能被删除或者改动以展示其变更；</p></li><li><p>磁盘上的每个段都有一个相应的.del 文件。当删除请求发送后，文档并没有真的被删除，而是在.del文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del 文件中被标记为删除的文档将不会被写入新段。</p></li><li><p>在新的文档被创建时，Elasticsearch 会为该文档指定一个版本号，当执行更新时，旧版本的文档在.del文件中被标记为删除，新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询，但是会在结果中被过滤掉.</p></li></ol><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p>​    倒排索引是搜索引擎的核心。搜索引擎的主要目标是在查找发生搜索条件的文档时提供快速搜索。ES中的倒排索引其实就是 lucene 的倒排索引，区别于传统的正向索引，倒排索引会在存储数据时将关键词和 数据进行关联，保存到倒排表中，然后查询时，将查询内容进行分词后在倒排表中进行查询，最后匹配数据即可。</p><h2 id="文档写入原理"><a href="#文档写入原理" class="headerlink" title="文档写入原理"></a>文档写入原理</h2><p>​    <img src="https://note.youdao.com/yws/public/resource/06b6f48ef4e56cb429410a1f35176f14/xmlnote/WEBRESOURCE842c63d365ea11f99fec0334262f1bce/4891" alt="0"></p><ol><li><p>选择任意一个DataNode发送请求，例如：node2。此时，node2就成为一个coordinating node（协调节点）</p></li><li><p>计算得到文档要写入的分片</p><p><code>shard = hash(routing) % number_of_primary_shards</code></p><p>routing 是一个可变值，默认是文档的 _id</p></li><li><p>coordinating node会进行路由，将请求转发给对应的primary shard所在的DataNode（假设primary shard在node1、replica shard在node2）</p></li><li><p>node1节点上的Primary Shard处理请求，写入数据到索引库中，并将数据同步到Replica shard</p></li><li><p>Primary Shard和Replica Shard都保存好了文档，返回client</p></li></ol><h2 id="检索原理"><a href="#检索原理" class="headerlink" title="检索原理"></a>检索原理</h2><p>​    <img src="https://note.youdao.com/yws/public/resource/06b6f48ef4e56cb429410a1f35176f14/xmlnote/WEBRESOURCEd9d8a50b3e09e33d5f4367f98211d401/4890" alt="0"></p><ol><li><p> client发起查询请求，某个DataNode接收到请求，该DataNode就会成为协调节点（Coordinating Node）。</p></li><li><p> 协调节点（Coordinating Node）将查询请求广播到每一个数据节点，这些数据节点的分片会处理该查询请求。</p></li><li><p>每个分片进行数据查询，将符合条件的数据放在一个优先队列中，并将这些数据的文档ID、节点信息、分片信息返回给协调节点。</p></li><li><p>协调节点将所有的结果进行汇总，并进行全局排序。</p></li><li><p>协调节点向包含这些文档ID的分片发送get请求，对应的分片将文档数据返回给协调节点，最后协调节点将数据返回给客户端。</p></li></ol><h2 id="准实时索引实现"><a href="#准实时索引实现" class="headerlink" title="准实时索引实现"></a>准实时索引实现</h2><ol><li><p>溢写到文件系统缓存</p><p>当数据写入到ES分片时，会首先写入到内存中，然后通过内存的buffer生成一个segment，并刷到<strong>文件系统缓存</strong>中，数据可以被检索（注意不是直接刷到磁盘）。ES中默认1秒，refresh一次。</p></li><li><p>写translog保障容错</p><p>在写入到内存中的同时，也会记录translog日志，在refresh期间出现异常，会根据translog来进行数据恢复，等到文件系统缓存中的segment数据都刷到磁盘中，清空translog文件</p></li><li><p>flush到磁盘</p><p>ES默认每隔30分钟会将文件系统缓存的数据刷入到磁盘</p></li><li><p>segment合并</p><p>Segment太多时，ES定期会将多个segment合并成为大的segment，减少索引查询时IO开销，此阶段ES会真正的物理删除（之前执行过的delete的数据）</p></li></ol><p>​    <img src="https://note.youdao.com/yws/public/resource/06b6f48ef4e56cb429410a1f35176f14/xmlnote/WEBRESOURCE43a725c2701afe9abf580718839878c1/4892" alt="0"></p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 专题五 （Google浏览器插件ElasticSeach-head安装）</title>
      <link href="/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E4%BA%94%EF%BC%88Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85%EF%BC%89/"/>
      <url>/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E4%BA%94%EF%BC%88Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>推荐使用 Google 浏览器插件 ElasticSearch Head，方便快捷。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h1 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h1><p>链接：<a href="https://pan.baidu.com/s/1ZLQn7E-AW6XE8tp_HH1xfg">https://pan.baidu.com/s/1ZLQn7E-AW6XE8tp_HH1xfg</a><br>提取码：frlq<br>–来自百度网盘超级会员V3的分享</p><h1 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h1><p>打开Google浏览器，找到&lt;扩展程序&gt;</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212182023958.png" alt="image-20230212182023958"></p><p>点击加载已解压的扩展程序</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212182247565.png" alt="image-20230212182247565"></p><p>插件已加载完毕，点击扩展程序图标，选择加载的扩展程序</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212182502618.png" alt="image-20230212182502618"></p><h1 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h1><p>ElasticSearch Head 的界面如下，输入ElasticSearch服务地址，即可查看ElasticSearch集群信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212182553913.png" alt="image-20230212182553913"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> architect </category>
          
          <category> 分布式专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> ElasticSearch </tag>
            
            <tag> ElasticSearch-head </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 专题六 （ELK + FileBeat 整合）</title>
      <link href="/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E5%85%AD%EF%BC%88ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88%EF%BC%89/"/>
      <url>/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E5%85%AD%EF%BC%88ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ELK + FileBeat 整合，实现由 FileBeat 监控日志变化，并发送给 LogStash。由 LogStash 按照指定的规则进行数据清洗，在发送至 ElasticSearch 存储。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h1 id="LogStash输出到ES"><a href="#LogStash输出到ES" class="headerlink" title="LogStash输出到ES"></a>LogStash输出到ES</h1><p>如果我们需要将数据输出值ES而不是控制台的话，我们修改Logstash的output配置。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">       hosts =&gt; [ &quot;localhost:9200&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动ES集群"><a href="#启动ES集群" class="headerlink" title="启动ES集群"></a>启动ES集群</h2><p>启动 ES 集群时，请使用非root用户，同时关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /usr/local/es/elasticsearch-7.6.1/bin/elasticsearch 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="配置-LogStash"><a href="#配置-LogStash" class="headerlink" title="配置 LogStash"></a>配置 LogStash</h2><p>重新拷贝一份配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/es/logstash-7.6.1</span><br><span class="line">touch config/filebeat-elasticSearch.conf</span><br></pre></td></tr></table></figure><p>将output修改为Elasticsearch</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config/filebeat-elasticSearch.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">      port =&gt; 5044</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [ &quot;192.168.10.158:9200&quot;,&quot;192.168.10.158:9200&quot;,&quot;192.168.10.158:9200&quot;]</span><br><span class="line">&#125;</span><br><span class="line">stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动-LogStash"><a href="#启动-LogStash" class="headerlink" title="启动 LogStash"></a>启动 LogStash</h2><p>启动 LogStash 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/filebeat-elasticSearch.conf --config.reload.automatic</span><br></pre></td></tr></table></figure><p>启动成功</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Sending Logstash logs to /home/ELK/logStash/logstash-<span class="number">7</span><span class="variable">.6</span><span class="variable">.1</span>/logs which is now configured via log4j2<span class="variable">.properties</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">42</span>,<span class="number">027</span>][WARN ][logstash<span class="variable">.config</span><span class="variable">.source</span><span class="variable">.multilocal</span>] Ignoring the &#x27;pipelines<span class="variable">.yml</span>&#x27; file because modules <span class="keyword">or</span> command line options are specified</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">42</span>,<span class="number">106</span>][INFO ][logstash<span class="variable">.runner</span>          ] Starting Logstash &#123;<span class="string">&quot;logstash.version&quot;</span>=&gt;<span class="string">&quot;7.6.1&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">43</span>,<span class="number">224</span>][INFO ][org<span class="variable">.reflections</span><span class="variable">.Reflections</span>] Reflections took <span class="number">24</span> ms to scan <span class="number">1</span> urls, producing <span class="number">20</span> keys <span class="keyword">and</span> <span class="number">40</span> values</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">113</span>][INFO ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Elasticsearch pool URLs updated &#123;:changes=&gt;&#123;:removed=&gt;[], :added=&gt;[http:<span class="comment">//192.168.10.30:9200/, http://192.168.10.31:9200/, http://192.168.10.32:9200/]&#125;&#125;</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">244</span>][WARN ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Restored connection to ES <span class="keyword">instance</span> &#123;:url=&gt;<span class="string">&quot;http://192.168.10.30:9200/&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">280</span>][INFO ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] ES Output version determined &#123;:es_version=&gt;<span class="number">7</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">289</span>][WARN ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Detected a <span class="number">6</span><span class="variable">.x</span> <span class="keyword">and</span> above cluster: the `<span class="keyword">type</span>` <span class="keyword">event</span> field won&#x27;t be used to determine the document _type &#123;:es_version=&gt;<span class="number">7</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">332</span>][WARN ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Restored connection to ES <span class="keyword">instance</span> &#123;:url=&gt;<span class="string">&quot;http://192.168.10.31:9200/&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">360</span>][WARN ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Restored connection to ES <span class="keyword">instance</span> &#123;:url=&gt;<span class="string">&quot;http://192.168.10.32:9200/&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">407</span>][INFO ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] New Elasticsearch <span class="keyword">output</span> &#123;:<span class="keyword">class</span>=&gt;<span class="string">&quot;LogStash::Outputs::ElasticSearch&quot;</span>, :hosts=&gt;[<span class="string">&quot;//192.168.10.30:9200&quot;</span>, <span class="string">&quot;//192.168.10.31:9200&quot;</span>, <span class="string">&quot;//192.168.10.32:9200&quot;</span>]&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">455</span>][INFO ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Using <span class="keyword">default</span> mapping template</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">500</span>][WARN ][org<span class="variable">.logstash</span><span class="variable">.instrument</span><span class="variable">.metrics</span><span class="variable">.gauge</span><span class="variable">.LazyDelegatingGauge</span>][main] A gauge metric of an unknown <span class="keyword">type</span> (org<span class="variable">.jruby</span><span class="variable">.specialized</span><span class="variable">.RubyArrayOneObject</span>) has been create <span class="keyword">for</span> key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">505</span>][INFO ][logstash<span class="variable">.javapipeline</span>    ][main] Starting pipeline &#123;:pipeline_id=&gt;<span class="string">&quot;main&quot;</span>, <span class="string">&quot;pipeline.workers&quot;</span>=&gt;<span class="number">2</span>, <span class="string">&quot;pipeline.batch.size&quot;</span>=&gt;<span class="number">125</span>, <span class="string">&quot;pipeline.batch.delay&quot;</span>=&gt;<span class="number">50</span>, <span class="string">&quot;pipeline.max_inflight&quot;</span>=&gt;<span class="number">250</span>, <span class="string">&quot;pipeline.sources&quot;</span>=&gt;[<span class="string">&quot;/home/ELK/logStash/logstash-7.6.1/config/filebeat-elasticSearch.conf&quot;</span>], :thread=&gt;<span class="string">&quot;#&lt;Thread:0x74cf420a run&gt;&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">551</span>][INFO ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Attempting to install template &#123;:manage_template=&gt;&#123;<span class="string">&quot;index_patterns&quot;</span>=&gt;<span class="string">&quot;logstash-*&quot;</span>, <span class="string">&quot;version&quot;</span>=&gt;<span class="number">60001</span>, <span class="string">&quot;settings&quot;</span>=&gt;&#123;<span class="string">&quot;index.refresh_interval&quot;</span>=&gt;<span class="string">&quot;5s&quot;</span>, <span class="string">&quot;number_of_shards&quot;</span>=&gt;<span class="number">1</span>, <span class="string">&quot;index.lifecycle.name&quot;</span>=&gt;<span class="string">&quot;logstash-policy&quot;</span>, <span class="string">&quot;index.lifecycle.rollover_alias&quot;</span>=&gt;<span class="string">&quot;logstash&quot;</span>&#125;, <span class="string">&quot;mappings&quot;</span>=&gt;&#123;<span class="string">&quot;dynamic_templates&quot;</span>=&gt;[&#123;<span class="string">&quot;message_field&quot;</span>=&gt;&#123;<span class="string">&quot;path_match&quot;</span>=&gt;<span class="string">&quot;message&quot;</span>, <span class="string">&quot;match_mapping_type&quot;</span>=&gt;<span class="string">&quot;string&quot;</span>, <span class="string">&quot;mapping&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;text&quot;</span>, <span class="string">&quot;norms&quot;</span>=&gt;false&#125;&#125;&#125;, &#123;<span class="string">&quot;string_fields&quot;</span>=&gt;&#123;<span class="string">&quot;match&quot;</span>=&gt;<span class="string">&quot;*&quot;</span>, <span class="string">&quot;match_mapping_type&quot;</span>=&gt;<span class="string">&quot;string&quot;</span>, <span class="string">&quot;mapping&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;text&quot;</span>, <span class="string">&quot;norms&quot;</span>=&gt;false, <span class="string">&quot;fields&quot;</span>=&gt;&#123;<span class="string">&quot;keyword&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;keyword&quot;</span>, <span class="string">&quot;ignore_above&quot;</span>=&gt;<span class="number">256</span>&#125;&#125;&#125;&#125;&#125;], <span class="string">&quot;properties&quot;</span>=&gt;&#123;<span class="string">&quot;@timestamp&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;date&quot;</span>&#125;, <span class="string">&quot;@version&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;keyword&quot;</span>&#125;, <span class="string">&quot;geoip&quot;</span>=&gt;&#123;<span class="string">&quot;dynamic&quot;</span>=&gt;true, <span class="string">&quot;properties&quot;</span>=&gt;&#123;<span class="string">&quot;ip&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;ip&quot;</span>&#125;, <span class="string">&quot;location&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;geo_point&quot;</span>&#125;, <span class="string">&quot;latitude&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;half_float&quot;</span>&#125;, <span class="string">&quot;longitude&quot;</span>=&gt;&#123;<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;half_float&quot;</span>&#125;&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">44</span>,<span class="number">578</span>][INFO ][logstash<span class="variable">.outputs</span><span class="variable">.elasticsearch</span>][main] Installing elasticsearch template to _template/logstash</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">45</span>,<span class="number">212</span>][INFO ][logstash<span class="variable">.inputs</span><span class="variable">.beats</span>    ][main] Beats inputs: Starting <span class="keyword">input</span> listener &#123;:address=&gt;<span class="string">&quot;0.0.0.0:5044&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">45</span>,<span class="number">227</span>][INFO ][logstash<span class="variable">.javapipeline</span>    ][main] Pipeline started &#123;<span class="string">&quot;pipeline.id&quot;</span>=&gt;<span class="string">&quot;main&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">45</span>,<span class="number">274</span>][INFO ][logstash<span class="variable">.agent</span>           ] Pipelines running &#123;:count=&gt;<span class="number">1</span>, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">45</span>,<span class="number">337</span>][INFO ][org<span class="variable">.logstash</span><span class="variable">.beats</span><span class="variable">.Server</span>][main] Starting server on port: <span class="number">5044</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T20:<span class="number">56</span>:<span class="number">45</span>,<span class="number">508</span>][INFO ][logstash<span class="variable">.agent</span>           ] Successfully started Logstash API endpoint &#123;:port=&gt;<span class="number">9600</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><p>在浏览器中，打开 ElasticSearch-head 插件，输入 ElasticSearch 集群地址。连接后，可以看到如下信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212191043995.png" alt="image-20230212191043995"></p><p>点击&lt;**数据浏览**&gt;，查看 logstash-2023.02.12-000001 索引信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212191201068.png" alt="image-20230212191201068"></p><p>从输出返回结果，我们可以看到，日志确实已经保存到了Elasticsearch中，而且我们看到消息数据是封装在名为<strong>message</strong>中的，其他的数据也封装在一个个的字段中。我们其实更想要把消息解析成一个个的字段。例如：IP字段、时间、请求方式、请求URL、响应结果，这样。</p><h1 id="LogStash-过滤器"><a href="#LogStash-过滤器" class="headerlink" title="LogStash 过滤器"></a>LogStash 过滤器</h1><p>从日志文件中收集到的数据包含了很多有效信息，比如IP、时间等，</p><p>在Logstash中可以配置过滤器Filter对采集到的数据进行过滤处理，在Logstash中，有大量的插件供我们使用。</p><p>参考官网：</p><p><a href="https://www.elastic.co/guide/en/logstash/7.6/filter-plugins.html">https://www.elastic.co/guide/en/logstash/7.6/filter-plugins.html</a></p><p>查看 LogStash 已经安装的插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/es/logstash-7.6.1/</span><br><span class="line">bin/logstash-plugin list</span><br></pre></td></tr></table></figure><p>此处重点讲解 Grok 插件。</p><h1 id="Grok-插件"><a href="#Grok-插件" class="headerlink" title="Grok 插件"></a>Grok 插件</h1><p>Grok 是通过模式匹配的方式来识别日志中的数据。可以把 Grok 插件简单理解为升级版本的正则表达式。它拥有更多的模式，默认 LogStash 拥有120 个模式。如果这些模式不满足我们解析日志的需求，可以直接使用正则表达式来进行匹配。</p><p>官网：<a href="https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns">https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/grok-patterns</a></p><p>grok模式的语法是：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%&#123;SYNTAX:SEMANTIC&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>SYNTAX</strong>指的是Grok模式名称 ；<strong>SEMANTIC</strong>是给模式匹配到的文本字段名。例如：</p><p><code>%&#123;NUMBER:duration&#125; %&#123;IP:client&#125;  </code></p><p><code>duration</code> 表示：匹配一个数字，<code>client</code>表示匹配一个<code>IP</code>地址。             </p></blockquote><p>默认在Grok中，所有匹配到的的数据类型都是字符串，如果要转换成int类型（目前只支持int和float），可以这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%&#123;NUMBER:duration:int&#125;</span> <span class="string">%&#123;IP:client&#125;</span></span><br></pre></td></tr></table></figure><p>以下是常用的Grok模式</p><table><thead><tr><th>NUMBER</th><th>匹配数字（包含：小数）</th></tr></thead><tbody><tr><td>INT</td><td>匹配整形数字</td></tr><tr><td>POSINT</td><td>匹配正整数</td></tr><tr><td>WORD</td><td>匹配单词</td></tr><tr><td>DATA</td><td>匹配所有字符</td></tr><tr><td>IP</td><td>匹配IP地址</td></tr><tr><td>PATH</td><td>匹配路径</td></tr></tbody></table><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%88%AA%E5%9B%BE%20(3).png" alt="截图 (3)"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">grok</span> &#123;</span><br><span class="line">      <span class="string">match</span> <span class="string">=&gt;</span> &#123; <span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;IP:client&#125;</span> <span class="template-variable">%&#123;WORD:method&#125;</span> <span class="template-variable">%&#123;URIPATHPARAM:request&#125;</span> <span class="template-variable">%&#123;NUMBER:bytes&#125;</span> <span class="template-variable">%&#123;NUMBER:duration&#125;</span>&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配日志中的IP、日期</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">90</span><span class="variable">.224</span><span class="variable">.57</span><span class="variable">.84</span> - - [<span class="number">15</span>/Feb/<span class="number">2023</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">19</span> +<span class="number">0800</span>] <span class="string">&quot;POST /report HTTP/1.1&quot;</span> <span class="number">404</span> <span class="number">21</span> <span class="string">&quot;www.baidu.com&quot;</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4549.400 QQBrowser/9.7.12900&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Kibana-测试-Grok"><a href="#Kibana-测试-Grok" class="headerlink" title="Kibana 测试 Grok"></a>Kibana 测试 Grok</h2><p>在 Kibana 上测试 Grok 语法，可以看到 Grok 已经从日志中获取到了date及IP信息</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212211527995.png" alt="image-20230212211527995"></p><h2 id="配置-LogStash-1"><a href="#配置-LogStash-1" class="headerlink" title="配置 LogStash"></a>配置 LogStash</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim config/filebeat-filter-console.conf</span><br></pre></td></tr></table></figure><p>配置如下类容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line"><span class="string">beats</span> &#123;</span><br><span class="line"><span class="string">port</span> <span class="string">=&gt;</span> <span class="number">5044</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line"><span class="string">grok</span> &#123;</span><br><span class="line"><span class="string">match</span> <span class="string">=&gt;</span> &#123; </span><br><span class="line"><span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;IP:ip&#125;</span> - - \[<span class="template-variable">%&#123;HTTPDATE:date&#125;</span>\]&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line"><span class="string">stdout</span> &#123;</span><br><span class="line"><span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">rubydebug</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 LogStash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/filebeat-filter-console.conf --config.reload.automatic</span><br></pre></td></tr></table></figure><h2 id="过滤结果"><a href="#过滤结果" class="headerlink" title="过滤结果"></a>过滤结果</h2><p>我们看到，经过Grok过滤器插件处理之后，我们已经获取到了ip和date两个字段。接下来，我们就可以继续解析其他的字段。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212205558456.png" alt="image-20230212205558456"></p><h2 id="解析所有字段"><a href="#解析所有字段" class="headerlink" title="解析所有字段"></a>解析所有字段</h2><p>将日志解析成以下字段</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td>client IP</td><td>浏览器端IP</td></tr><tr><td>timestamp</td><td>请求的时间戳</td></tr><tr><td>method</td><td>请求方式（GET/POST）</td></tr><tr><td>uri</td><td>请求的链接地址</td></tr><tr><td>status</td><td>服务器端响应状态</td></tr><tr><td>length</td><td>响应的数据长度</td></tr><tr><td>reference</td><td>从哪个URL跳转而来</td></tr><tr><td>browser</td><td>浏览器</td></tr></tbody></table><p>为了方便进行Grok开发，此处使用Kibana来进行调试，我们使用IP就可以把前面的IP字段匹配出来，使用HTTPDATE可以将后面的日期匹配出来。</p><p>为了方便测试，我们可以使用Kibana来进行Grok开发：</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%88%AA%E5%9B%BE%20(4).png" alt="截图 (4)"></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%88%AA%E5%9B%BE%20(5).png" alt="截图 (5)"></p><p>可以在Kibana中先把Grok的表达式写好，然后再放入到Logstash的配置文件中，这样可以大大提升调试的效率。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line"><span class="string">grok</span> &#123;</span><br><span class="line"><span class="string">match</span> <span class="string">=&gt;</span> &#123; </span><br><span class="line"><span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;IP:ip&#125;</span> - - \[<span class="template-variable">%&#123;HTTPDATE:date&#125;</span>\] \&quot;<span class="template-variable">%&#123;WORD:method&#125;</span> <span class="template-variable">%&#123;PATH:uri&#125;</span> <span class="template-variable">%&#123;DATA&#125;</span>\&quot; <span class="template-variable">%&#123;INT:status&#125;</span> <span class="template-variable">%&#123;INT:length&#125;</span> \&quot;<span class="template-variable">%&#123;DATA:reference&#125;</span>\&quot; \&quot;<span class="template-variable">%&#123;DATA:browser&#125;</span>\&quot;&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Kibaba 中测试结果如下</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212211306263.png" alt="image-20230212211306263"></p><h2 id="输入-ElasticSearch"><a href="#输入-ElasticSearch" class="headerlink" title="输入 ElasticSearch"></a>输入 ElasticSearch</h2><p>到目前为止，我们已经通过了Grok Filter可以将日志消息解析成一个一个的字段，那现在我们需要将这些字段保存到Elasticsearch中。我们看到了Logstash的输出中，有大量的字段，但如果我们只需要保存我们需要的8个，该如何处理呢？而且，如果我们需要将日期的格式进行转换，我们又该如何处理呢？</p><p><strong>过滤出来需要的字段</strong></p><p>要过滤出来我们需要的字段。我们需要使用mutate插件。mutate插件主要是作用在字段上，例如：它可以对字段进行重命名、删除、替换或者修改结构。</p><h1 id="mutate-插件"><a href="#mutate-插件" class="headerlink" title="mutate 插件"></a>mutate 插件</h1><p>用法如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mutate</span> &#123;</span><br><span class="line">    <span class="string">enable_metric</span> <span class="string">=&gt;</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    <span class="string">remove_field</span> <span class="string">=&gt;</span> [<span class="string">&quot;message&quot;</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;@timestamp&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;agent&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;ecs&quot;</span>, <span class="string">&quot;@version&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>enable_metric</strong></p><p><code>false</code>表示禁用默认输出</p><p><strong>remove_field</strong></p><p>从默认中移除不需要的字段</p></blockquote><h1 id="date-插件"><a href="#date-插件" class="headerlink" title="date 插件"></a>date 插件</h1><p>要将日期格式进行转换，我们可以使用Date插件来实现。该插件专门用来解析字段中的日期，官方说明文档：<a href="https://www.elastic.co/guide/en/logstash/7.6/plugins-filters-date.html">https://www.elastic.co/guide/en/logstash/7.6/plugins-filters-date.html</a></p><p>用法如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">date</span> &#123;</span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> [<span class="string">&quot;date&quot;</span>,<span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>]</span><br><span class="line">    <span class="string">target</span> <span class="string">=&gt;</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>将date字段转换为「年月日 时分秒」格式。默认字段经过date插件处理后，会输出到@timestamp字段，所以，我们可以通过修改target属性来重新定义输出字段。</p><h1 id="指定ES索引"><a href="#指定ES索引" class="headerlink" title="指定ES索引"></a>指定ES索引</h1><p>我们可以通过</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">elasticsearch</span> &#123;</span><br><span class="line">    <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.10.30:9200&quot;</span> ,<span class="string">&quot;192.168.10.31:9200&quot;</span> ,<span class="string">&quot;192.168.10.32:9200&quot;</span>]</span><br><span class="line">    <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index来指定索引名称，默认输出的index名称为：logstash-%{+yyyy.MM.dd}。</p><blockquote><p><strong>注意</strong></p><ol><li><p>要在index中使用时间格式化，filter的输出必须包含 @timestamp字段，否则将无法解析日期。</p></li><li><p>index名称中，不能出现大写字符</p></li></ol></blockquote><h1 id="融合测试"><a href="#融合测试" class="headerlink" title="融合测试"></a>融合测试</h1><p>现在使用 Grok、Mutate、Date 插件融合过滤日志信息，并指定 ElasticSearch 索引。</p><h2 id="配置-LogStash-2"><a href="#配置-LogStash-2" class="headerlink" title="配置 LogStash"></a>配置 LogStash</h2><p>在 config/ 目录下，创建 <code>filebeat-tomcat-weblog.conf</code> 配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">    <span class="string">beats</span> &#123;</span><br><span class="line">    <span class="string">port</span> <span class="string">=&gt;</span> <span class="number">5044</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">    <span class="string">grok</span> &#123;</span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> &#123; </span><br><span class="line">    <span class="string">&quot;message&quot;</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;IP:ip&#125;</span> - - \[<span class="template-variable">%&#123;HTTPDATE:date&#125;</span>\] \&quot;<span class="template-variable">%&#123;WORD:method&#125;</span> <span class="template-variable">%&#123;PATH:uri&#125;</span> <span class="template-variable">%&#123;DATA&#125;</span>\&quot; <span class="template-variable">%&#123;INT:status:int&#125;</span> <span class="template-variable">%&#123;INT:length:int&#125;</span> \&quot;<span class="template-variable">%&#123;DATA:reference&#125;</span>\&quot; \&quot;<span class="template-variable">%&#123;DATA:browser&#125;</span>\&quot;&quot;</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">mutate</span> &#123;</span><br><span class="line">    <span class="string">enable_metric</span> <span class="string">=&gt;</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">    <span class="string">remove_field</span> <span class="string">=&gt;</span> [<span class="string">&quot;message&quot;</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;input&quot;</span>, <span class="string">&quot;agent&quot;</span>, <span class="string">&quot;host&quot;</span>, <span class="string">&quot;ecs&quot;</span>, <span class="string">&quot;@version&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">date</span> &#123;</span><br><span class="line">    <span class="string">match</span> <span class="string">=&gt;</span> [<span class="string">&quot;date&quot;</span>,<span class="string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>]</span><br><span class="line">    <span class="string">target</span> <span class="string">=&gt;</span> <span class="string">&quot;date&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">    <span class="string">stdout</span> &#123;</span><br><span class="line">    <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">rubydebug</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">elasticsearch</span> &#123;</span><br><span class="line">    <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.10.30:9200&quot;</span> ,<span class="string">&quot;192.168.10.31:9200&quot;</span> ,<span class="string">&quot;192.168.10.32:9200&quot;</span>]</span><br><span class="line">    <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;tomcat_web_log_<span class="template-variable">%&#123;+YYYY-MM&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动-LogStash-1"><a href="#启动-LogStash-1" class="headerlink" title="启动 LogStash"></a>启动 LogStash</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/filebeat-tomcat-weblog.conf --config.test_and_exit</span><br><span class="line">bin/logstash -f config/filebeat-tomcat-weblog.conf --config.reload.automatic</span><br></pre></td></tr></table></figure><h2 id="收集结果"><a href="#收集结果" class="headerlink" title="收集结果"></a>收集结果</h2><p>数据过滤</p><p>从 LogStash 控制台上可以看到</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;length&quot;</span> =&gt; <span class="number">21</span>,</span><br><span class="line">     <span class="string">&quot;reference&quot;</span> =&gt; <span class="string">&quot;www.baidu.com&quot;</span>,</span><br><span class="line">          <span class="string">&quot;date&quot;</span> =&gt; <span class="number">2023</span>-<span class="number">02</span>-<span class="number">14</span>T16:<span class="number">27</span>:<span class="number">19</span><span class="variable">.000Z</span>,</span><br><span class="line">        <span class="string">&quot;method&quot;</span> =&gt; <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">           <span class="string">&quot;uri&quot;</span> =&gt; <span class="string">&quot;/report&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; <span class="number">2023</span>-<span class="number">02</span>-<span class="number">12</span>T13:<span class="number">45</span>:<span class="number">14</span><span class="variable">.339Z</span>,</span><br><span class="line">       <span class="string">&quot;browser&quot;</span> =&gt; <span class="string">&quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.4549.400 QQBrowser/9.7.12900&quot;</span>,</span><br><span class="line">        <span class="string">&quot;status&quot;</span> =&gt; <span class="number">404</span>,</span><br><span class="line">            <span class="string">&quot;ip&quot;</span> =&gt; <span class="string">&quot;90.224.57.84&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已经过滤出了我们所定义的字段。</p><p>来到 ElasticSearch-Head 界面，可以查看到 ElasticSearch 已经收集到了我们所定义的字段</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230212215052836.png" alt="image-20230212215052836"></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> ElasticSearch </tag>
            
            <tag> LogStash </tag>
            
            <tag> Grok 插件 </tag>
            
            <tag> Mutate 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 专题四 （FileBeat + LogStash 整合）</title>
      <link href="/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E5%9B%9B%EF%BC%88FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88%EF%BC%89/"/>
      <url>/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E5%9B%9B%EF%BC%88FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用 FileBeat 进行数据实时监听，一旦发生变化时发送给 LogStash，LogStash 会按照指定的规则过滤输出日志信息。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h1 id="采集日志信息"><a href="#采集日志信息" class="headerlink" title="采集日志信息"></a>采集日志信息</h1><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>Tomcat 服务器运行过程中产生很多日志信息，通过LogStash采集并存储日志信息至ElasticSearch中。</p><p>Tomcat 日志文件如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost apache-tomcat-10.0.27]# tree logs/</span><br><span class="line">logs/</span><br><span class="line">├── catalina.2023-02-11.log</span><br><span class="line">├── catalina.out</span><br><span class="line">├── localhost.2023-02-11.log</span><br><span class="line">└── localhost_access_log.2023-02-11.txt</span><br><span class="line"></span><br><span class="line">0 directories, 4 files</span><br></pre></td></tr></table></figure><p>日志文件信息如下所示</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET / HTTP/1.1&quot; 200 11437</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /tomcat.css HTTP/1.1&quot; 200 5895</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /tomcat.svg HTTP/1.1&quot; 200 68761</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /bg-upper.png HTTP/1.1&quot; 200 3103</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /bg-nav.png HTTP/1.1&quot; 200 1401</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /asf-logo-wide.svg HTTP/1.1&quot; 200 27530</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /bg-button.png HTTP/1.1&quot; 200 713</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /bg-middle.png HTTP/1.1&quot; 200 1918</span><br><span class="line">192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] &quot;GET /favicon.ico HTTP/1.1&quot; 200 21630</span><br></pre></td></tr></table></figure><p>这个日志其实由一个个的字段拼接而成</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td>client IP</td><td>浏览器端IP</td></tr><tr><td>timestamp</td><td>请求的时间戳</td></tr><tr><td>method</td><td>请求方式（GET/POST）</td></tr><tr><td>uri</td><td>请求的链接地址</td></tr><tr><td>status</td><td>服务器端响应状态</td></tr><tr><td>length</td><td>响应的数据长度</td></tr><tr><td>reference</td><td>从哪个URL跳转而来</td></tr><tr><td>browser</td><td>浏览器</td></tr></tbody></table><p>为了便于后期数据分析，需要将该日志信息解析成指定字段的filed的值并存储，便于后期分析。</p><h1 id="准备日志"><a href="#准备日志" class="headerlink" title="准备日志"></a>准备日志</h1><p>将Tomcat日志文件上传到指定的目录</p><h1 id="发送日志"><a href="#发送日志" class="headerlink" title="发送日志"></a>发送日志</h1><p>使用 FileBeats 将日志发送到 LogStash</p><p>之前，我们使用的FileBeat是通过FileBeat的Harvester组件监控日志文件，然后将日志以一定的格式保存到Elasticsearch中，而现在我们需要配置FileBeats将数据发送到Logstash再将数据发送至ElasticSearch。</p><h1 id="配置-FileBeat"><a href="#配置-FileBeat" class="headerlink" title="配置 FileBeat"></a>配置 FileBeat</h1><p>FileBeat相关信息按照如下格式配置即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#----------------------------- Logstash output ---------------------------------</span></span><br><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">  <span class="comment"># Boolean flag to enable or disable the output module.</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The Logstash hosts</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;localhost:5044&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>hosts配置的是Logstash监听的IP地址/机器名以及端口号</p></blockquote><p>进入fileBeat安装路径并准备FileBeat配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/es/filebeat-7.6.1-linux-x86_64</span><br><span class="line"><span class="built_in">touch</span> filebeat-logstash.yml</span><br><span class="line">vim filebeat-logstash.yml</span><br></pre></td></tr></table></figure><p>因为Tomcat的web log日志都是以IP地址开头的，所以我们需要修改下匹配字段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/tomcat/log/access*.*</span></span><br><span class="line">  <span class="attr">multiline.pattern:</span> <span class="string">&#x27;^\\d+\\.\\d+\\.\\d+\\.\\d+ &#x27;</span></span><br><span class="line">  <span class="attr">multiline.negate:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">multiline.match:</span> <span class="string">after</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">   <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">hosts:</span> [<span class="string">&quot;192.168.21.133:5044&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>注意该配置中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">multiline.pattern:</span> <span class="string">&#x27;^\\d+\\.\\d+\\.\\d+\\.\\d+ &#x27;</span></span><br><span class="line"><span class="attr">multiline.negate:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">multiline.match:</span> <span class="string">after</span></span><br></pre></td></tr></table></figure><p>表示以IP地址开头的行追加到上一行</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">multiline:</span></span><br><span class="line">    <span class="attr">pattern:</span> <span class="string">&#x27;^[0-2][0-9]:[0-5][0-9]:[0-5][0-9]&#x27;</span></span><br><span class="line">    <span class="attr">negate:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">match:</span> <span class="string">after</span></span><br></pre></td></tr></table></figure><p>上面配置的意思是：不以时间格式开头的行都合并到上一行的末尾（正则写的不好，忽略忽略）</p><ul><li><p>pattern：正则表达式</p></li><li><p>negate：true 或 false；默认是false，匹配pattern的行合并到上一行；true，不匹配pattern的行合并到上一行</p></li><li><p>match：after 或 before，合并到上一行的末尾或开头</p></li></ul><h1 id="启动-FileBeat"><a href="#启动-FileBeat" class="headerlink" title="启动 FileBeat"></a>启动 FileBeat</h1><p>启动FileBeat，并指定使用指定的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e -c filebeat-logstash.yml</span><br></pre></td></tr></table></figure><p>FileBeat将尝试建立与Logstash监听的IP和端口号进行连接。但此时，我们并没有开启并配置Logstash，所以FileBeat是无法连接到Logstash的。</p><h1 id="配置-LogStash"><a href="#配置-LogStash" class="headerlink" title="配置 LogStash"></a>配置 LogStash</h1><p>Logstash的配置文件和FileBeat类似，它也需要有一个input、和output。</p><p>基本格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment">#号表示添加注释</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">input表示要接收的数据</span></span><br><span class="line">input &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">file表示对接收到的数据进行过滤处理</span></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output表示将数据输出到其他位置</span></span><br><span class="line">output &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置从FileBeat接收数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/es/logstash-7.6.1</span><br><span class="line">vim config/filebeat-console.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats &#123;</span><br><span class="line">      port =&gt; 5044</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    stdout &#123;</span><br><span class="line">      codec =&gt; rubydebug</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示</strong></p><p>复制可能存在乱码，可以将复制内容先放到文本文档，再拷出来</p></blockquote><h1 id="验证-LogStash"><a href="#验证-LogStash" class="headerlink" title="验证 LogStash"></a>验证 LogStash</h1><p>测试 LogStash 配置是否正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/filebeat-console.conf --config.test_and_exit</span><br></pre></td></tr></table></figure><p>LogStash 测试启动成功</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sending Logstash logs to /home/ELK/logStash/logstash-<span class="number">7</span><span class="variable">.6</span><span class="variable">.1</span>/logs which is now configured via log4j2<span class="variable">.properties</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">35</span>:<span class="number">56</span>,<span class="number">635</span>][WARN ][logstash<span class="variable">.config</span><span class="variable">.source</span><span class="variable">.multilocal</span>] Ignoring the &#x27;pipelines<span class="variable">.yml</span>&#x27; file because modules <span class="keyword">or</span> command line options are specified</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">35</span>:<span class="number">57</span>,<span class="number">461</span>][INFO ][org<span class="variable">.reflections</span><span class="variable">.Reflections</span>] Reflections took <span class="number">58</span> ms to scan <span class="number">1</span> urls, producing <span class="number">20</span> keys <span class="keyword">and</span> <span class="number">40</span> values</span><br><span class="line">Configuration OK</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">35</span>:<span class="number">58</span>,<span class="number">004</span>][INFO ][logstash<span class="variable">.runner</span>          ] Using <span class="keyword">config</span><span class="variable">.test_and_exit</span> mode. Config Validation Result: OK. Exiting Logstash</span><br></pre></td></tr></table></figure><h1 id="启动-LogStash"><a href="#启动-LogStash" class="headerlink" title="启动 LogStash"></a>启动 LogStash</h1><p>启动 LogStash 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/logstash -f config/filebeat-console.conf --config.reload.automatic</span><br></pre></td></tr></table></figure><p>启动成功</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sending Logstash logs to /home/ELK/logStash/logstash-<span class="number">7</span><span class="variable">.6</span><span class="variable">.1</span>/logs which is now configured via log4j2<span class="variable">.properties</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">56</span>,<span class="number">706</span>][WARN ][logstash<span class="variable">.config</span><span class="variable">.source</span><span class="variable">.multilocal</span>] Ignoring the &#x27;pipelines<span class="variable">.yml</span>&#x27; file because modules <span class="keyword">or</span> command line options are specified</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">56</span>,<span class="number">783</span>][INFO ][logstash<span class="variable">.runner</span>          ] Starting Logstash &#123;<span class="string">&quot;logstash.version&quot;</span>=&gt;<span class="string">&quot;7.6.1&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">57</span>,<span class="number">880</span>][INFO ][org<span class="variable">.reflections</span><span class="variable">.Reflections</span>] Reflections took <span class="number">25</span> ms to scan <span class="number">1</span> urls, producing <span class="number">20</span> keys <span class="keyword">and</span> <span class="number">40</span> values</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">58</span>,<span class="number">404</span>][WARN ][org<span class="variable">.logstash</span><span class="variable">.instrument</span><span class="variable">.metrics</span><span class="variable">.gauge</span><span class="variable">.LazyDelegatingGauge</span>][main] A gauge metric of an unknown <span class="keyword">type</span> (org<span class="variable">.jruby</span><span class="variable">.RubyArray</span>) has been create <span class="keyword">for</span> key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">58</span>,<span class="number">412</span>][INFO ][logstash<span class="variable">.javapipeline</span>    ][main] Starting pipeline &#123;:pipeline_id=&gt;<span class="string">&quot;main&quot;</span>, <span class="string">&quot;pipeline.workers&quot;</span>=&gt;<span class="number">2</span>, <span class="string">&quot;pipeline.batch.size&quot;</span>=&gt;<span class="number">125</span>, <span class="string">&quot;pipeline.batch.delay&quot;</span>=&gt;<span class="number">50</span>, <span class="string">&quot;pipeline.max_inflight&quot;</span>=&gt;<span class="number">250</span>, <span class="string">&quot;pipeline.sources&quot;</span>=&gt;[<span class="string">&quot;/home/ELK/logStash/logstash-7.6.1/config/filebeat-console.conf&quot;</span>], :thread=&gt;<span class="string">&quot;#&lt;Thread:0x3ec7886b run&gt;&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">59</span>,<span class="number">196</span>][INFO ][logstash<span class="variable">.inputs</span><span class="variable">.beats</span>    ][main] Beats inputs: Starting <span class="keyword">input</span> listener &#123;:address=&gt;<span class="string">&quot;0.0.0.0:5044&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">59</span>,<span class="number">217</span>][INFO ][logstash<span class="variable">.javapipeline</span>    ][main] Pipeline started &#123;<span class="string">&quot;pipeline.id&quot;</span>=&gt;<span class="string">&quot;main&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">59</span>,<span class="number">302</span>][INFO ][logstash<span class="variable">.agent</span>           ] Pipelines running &#123;:count=&gt;<span class="number">1</span>, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">59</span>,<span class="number">361</span>][INFO ][org<span class="variable">.logstash</span><span class="variable">.beats</span><span class="variable">.Server</span>][main] Starting server on port: <span class="number">5044</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">49</span>:<span class="number">59</span>,<span class="number">630</span>][INFO ][logstash<span class="variable">.agent</span>           ] Successfully started Logstash API endpoint &#123;:port=&gt;<span class="number">9600</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="日志监听"><a href="#日志监听" class="headerlink" title="日志监听"></a>日志监听</h1><p>启动 FileBeat 后，可以看到控制台已经连接 LogStash 成功，同时正在监听日志文件</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">52</span>:<span class="number">00</span><span class="variable">.922</span>-<span class="number">0800</span>    INFO    pipeline/<span class="keyword">output</span><span class="variable">.go</span>:<span class="number">95</span>   Connecting to backoff(async(tcp:<span class="comment">//192.168.10.158:5044))</span></span><br><span class="line"><span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">52</span>:<span class="number">00</span><span class="variable">.923</span>-<span class="number">0800</span>    INFO    pipeline/<span class="keyword">output</span><span class="variable">.go</span>:<span class="number">105</span>  Connection to backoff(async(tcp:<span class="comment">//192.168.10.158:5044)) established</span></span><br><span class="line"><span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">52</span>:<span class="number">24</span><span class="variable">.920</span>-<span class="number">0800</span>    INFO    [monitoring]    log/log<span class="variable">.go</span>:<span class="number">145</span>  Non-zero metrics in the last <span class="number">30</span>s        &#123;<span class="string">&quot;monitoring&quot;</span>: &#123;<span class="string">&quot;metrics&quot;</span>: &#123;<span class="string">&quot;beat&quot;</span>:&#123;<span class="string">&quot;cpu&quot;</span>:&#123;<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">100</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">105</span>&#125;&#125;,<span class="string">&quot;total&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">110</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">122</span>&#125;,<span class="string">&quot;value&quot;</span>:<span class="number">110</span>&#125;,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">10</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">17</span>&#125;&#125;&#125;,<span class="string">&quot;handles&quot;</span>:&#123;<span class="string">&quot;limit&quot;</span>:&#123;<span class="string">&quot;hard&quot;</span>:<span class="number">4096</span>,<span class="string">&quot;soft&quot;</span>:<span class="number">1024</span>&#125;,<span class="string">&quot;open&quot;</span>:<span class="number">9</span>&#125;,<span class="string">&quot;info&quot;</span>:&#123;<span class="string">&quot;ephemeral_id&quot;</span>:<span class="string">&quot;82569f6e-16d4-4a5c-9372-06d83d5a5d04&quot;</span>,<span class="string">&quot;uptime&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">30073</span>&#125;&#125;,<span class="string">&quot;memstats&quot;</span>:&#123;<span class="string">&quot;gc_next&quot;</span>:<span class="number">8111376</span>,<span class="string">&quot;memory_alloc&quot;</span>:<span class="number">6627960</span>,<span class="string">&quot;memory_total&quot;</span>:<span class="number">14803392</span>,<span class="string">&quot;rss&quot;</span>:<span class="number">31338496</span>&#125;,<span class="string">&quot;runtime&quot;</span>:&#123;<span class="string">&quot;goroutines&quot;</span>:<span class="number">28</span>&#125;&#125;,<span class="string">&quot;filebeat&quot;</span>:&#123;<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;added&quot;</span>:<span class="number">2</span>,<span class="string">&quot;done&quot;</span>:<span class="number">2</span>&#125;,<span class="string">&quot;harvester&quot;</span>:&#123;<span class="string">&quot;files&quot;</span>:&#123;<span class="string">&quot;4f6bbc19-92bf-4434-a8ce-477369c614c0&quot;</span>:&#123;<span class="string">&quot;last_event_published_time&quot;</span>:<span class="string">&quot;2023-02-11T19:51:59.921Z&quot;</span>,<span class="string">&quot;last_event_timestamp&quot;</span>:<span class="string">&quot;2023-02-11T19:51:54.920Z&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;/home/ELK/tomcat/apache-tomcat-10.0.27/logs/localhost_access_log.2023-02-11.txt&quot;</span>,<span class="string">&quot;read_offset&quot;</span>:<span class="number">747</span>,<span class="string">&quot;size&quot;</span>:<span class="number">747</span>,<span class="string">&quot;start_time&quot;</span>:<span class="string">&quot;2023-02-11T19:51:54.919Z&quot;</span>&#125;&#125;,<span class="string">&quot;open_files&quot;</span>:<span class="number">1</span>,<span class="string">&quot;running&quot;</span>:<span class="number">1</span>,<span class="string">&quot;started&quot;</span>:<span class="number">1</span>&#125;&#125;,<span class="string">&quot;libbeat&quot;</span>:&#123;<span class="string">&quot;config&quot;</span>:&#123;<span class="string">&quot;module&quot;</span>:&#123;<span class="string">&quot;running&quot;</span>:<span class="number">0</span>&#125;&#125;,<span class="string">&quot;output&quot;</span>:&#123;<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;acked&quot;</span>:<span class="number">1</span>,<span class="string">&quot;batches&quot;</span>:<span class="number">1</span>,<span class="string">&quot;total&quot;</span>:<span class="number">1</span>&#125;,<span class="string">&quot;read&quot;</span>:&#123;<span class="string">&quot;bytes&quot;</span>:<span class="number">6</span>&#125;,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;logstash&quot;</span>,<span class="string">&quot;write&quot;</span>:&#123;<span class="string">&quot;bytes&quot;</span>:<span class="number">546</span>&#125;&#125;,<span class="string">&quot;pipeline&quot;</span>:&#123;<span class="string">&quot;clients&quot;</span>:<span class="number">1</span>,<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;active&quot;</span>:<span class="number">0</span>,<span class="string">&quot;filtered&quot;</span>:<span class="number">1</span>,<span class="string">&quot;published&quot;</span>:<span class="number">1</span>,<span class="string">&quot;retry&quot;</span>:<span class="number">1</span>,<span class="string">&quot;total&quot;</span>:<span class="number">2</span>&#125;,<span class="string">&quot;queue&quot;</span>:&#123;<span class="string">&quot;acked&quot;</span>:<span class="number">1</span>&#125;&#125;&#125;,<span class="string">&quot;registrar&quot;</span>:&#123;<span class="string">&quot;states&quot;</span>:&#123;<span class="string">&quot;current&quot;</span>:<span class="number">1</span>,<span class="string">&quot;update&quot;</span>:<span class="number">2</span>&#125;,<span class="string">&quot;writes&quot;</span>:&#123;<span class="string">&quot;success&quot;</span>:<span class="number">3</span>,<span class="string">&quot;total&quot;</span>:<span class="number">3</span>&#125;&#125;,<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;cpu&quot;</span>:&#123;<span class="string">&quot;cores&quot;</span>:<span class="number">2</span>&#125;,<span class="string">&quot;load&quot;</span>:&#123;<span class="string">&quot;1&quot;</span>:<span class="number">0</span><span class="variable">.26</span>,<span class="string">&quot;15&quot;</span>:<span class="number">0</span><span class="variable">.23</span>,<span class="string">&quot;5&quot;</span>:<span class="number">0</span><span class="variable">.4</span>,<span class="string">&quot;norm&quot;</span>:&#123;<span class="string">&quot;1&quot;</span>:<span class="number">0</span><span class="variable">.13</span>,<span class="string">&quot;15&quot;</span>:<span class="number">0</span><span class="variable">.115</span>,<span class="string">&quot;5&quot;</span>:<span class="number">0</span><span class="variable">.2</span>&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line"><span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">52</span>:<span class="number">54</span><span class="variable">.919</span>-<span class="number">0800</span>    INFO    [monitoring]    log/log<span class="variable">.go</span>:<span class="number">145</span>  Non-zero metrics in the last <span class="number">30</span>s        &#123;<span class="string">&quot;monitoring&quot;</span>: &#123;<span class="string">&quot;metrics&quot;</span>: &#123;<span class="string">&quot;beat&quot;</span>:&#123;<span class="string">&quot;cpu&quot;</span>:&#123;<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">100</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">3</span>&#125;&#125;,<span class="string">&quot;total&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">110</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">3</span>&#125;,<span class="string">&quot;value&quot;</span>:<span class="number">110</span>&#125;,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">10</span>&#125;&#125;,<span class="string">&quot;handles&quot;</span>:&#123;<span class="string">&quot;limit&quot;</span>:&#123;<span class="string">&quot;hard&quot;</span>:<span class="number">4096</span>,<span class="string">&quot;soft&quot;</span>:<span class="number">1024</span>&#125;,<span class="string">&quot;open&quot;</span>:<span class="number">9</span>&#125;,<span class="string">&quot;info&quot;</span>:&#123;<span class="string">&quot;ephemeral_id&quot;</span>:<span class="string">&quot;82569f6e-16d4-4a5c-9372-06d83d5a5d04&quot;</span>,<span class="string">&quot;uptime&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">60074</span>&#125;&#125;,<span class="string">&quot;memstats&quot;</span>:&#123;<span class="string">&quot;gc_next&quot;</span>:<span class="number">8111376</span>,<span class="string">&quot;memory_alloc&quot;</span>:<span class="number">6988704</span>,<span class="string">&quot;memory_total&quot;</span>:<span class="number">15164136</span>&#125;,<span class="string">&quot;runtime&quot;</span>:&#123;<span class="string">&quot;goroutines&quot;</span>:<span class="number">28</span>&#125;&#125;,<span class="string">&quot;filebeat&quot;</span>:&#123;<span class="string">&quot;harvester&quot;</span>:&#123;<span class="string">&quot;open_files&quot;</span>:<span class="number">1</span>,<span class="string">&quot;running&quot;</span>:<span class="number">1</span>&#125;&#125;,<span class="string">&quot;libbeat&quot;</span>:&#123;<span class="string">&quot;config&quot;</span>:&#123;<span class="string">&quot;module&quot;</span>:&#123;<span class="string">&quot;running&quot;</span>:<span class="number">0</span>&#125;&#125;,<span class="string">&quot;pipeline&quot;</span>:&#123;<span class="string">&quot;clients&quot;</span>:<span class="number">1</span>,<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;active&quot;</span>:<span class="number">0</span>&#125;&#125;&#125;,<span class="string">&quot;registrar&quot;</span>:&#123;<span class="string">&quot;states&quot;</span>:&#123;<span class="string">&quot;current&quot;</span>:<span class="number">1</span>&#125;&#125;,<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;load&quot;</span>:&#123;<span class="string">&quot;1&quot;</span>:<span class="number">0</span><span class="variable">.15</span>,<span class="string">&quot;15&quot;</span>:<span class="number">0</span><span class="variable">.22</span>,<span class="string">&quot;5&quot;</span>:<span class="number">0</span><span class="variable">.36</span>,<span class="string">&quot;norm&quot;</span>:&#123;<span class="string">&quot;1&quot;</span>:<span class="number">0</span><span class="variable">.075</span>,<span class="string">&quot;15&quot;</span>:<span class="number">0</span><span class="variable">.11</span>,<span class="string">&quot;5&quot;</span>:<span class="number">0</span><span class="variable">.18</span>&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line"><span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T19:<span class="number">53</span>:<span class="number">24</span><span class="variable">.921</span>-<span class="number">0800</span>    INFO    [monitoring]    log/log<span class="variable">.go</span>:<span class="number">145</span>  Non-zero metrics in the last <span class="number">30</span>s        &#123;<span class="string">&quot;monitoring&quot;</span>: &#123;<span class="string">&quot;metrics&quot;</span>: &#123;<span class="string">&quot;beat&quot;</span>:&#123;<span class="string">&quot;cpu&quot;</span>:&#123;<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">110</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">5</span>&#125;&#125;,<span class="string">&quot;total&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">120</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">6</span>&#125;,<span class="string">&quot;value&quot;</span>:<span class="number">120</span>&#125;,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;ticks&quot;</span>:<span class="number">10</span>,<span class="string">&quot;time&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">1</span>&#125;&#125;&#125;,<span class="string">&quot;handles&quot;</span>:&#123;<span class="string">&quot;limit&quot;</span>:&#123;<span class="string">&quot;hard&quot;</span>:<span class="number">4096</span>,<span class="string">&quot;soft&quot;</span>:<span class="number">1024</span>&#125;,<span class="string">&quot;open&quot;</span>:<span class="number">9</span>&#125;,<span class="string">&quot;info&quot;</span>:&#123;<span class="string">&quot;ephemeral_id&quot;</span>:<span class="string">&quot;82569f6e-16d4-4a5c-9372-06d83d5a5d04&quot;</span>,<span class="string">&quot;uptime&quot;</span>:&#123;<span class="string">&quot;ms&quot;</span>:<span class="number">90073</span>&#125;&#125;,<span class="string">&quot;memstats&quot;</span>:&#123;<span class="string">&quot;gc_next&quot;</span>:<span class="number">8111376</span>,<span class="string">&quot;memory_alloc&quot;</span>:<span class="number">7316496</span>,<span class="string">&quot;memory_total&quot;</span>:<span class="number">15491928</span>&#125;,<span class="string">&quot;runtime&quot;</span>:&#123;<span class="string">&quot;goroutines&quot;</span>:<span class="number">28</span>&#125;&#125;,<span class="string">&quot;filebeat&quot;</span>:&#123;<span class="string">&quot;harvester&quot;</span>:&#123;<span class="string">&quot;open_files&quot;</span>:<span class="number">1</span>,<span class="string">&quot;running&quot;</span>:<span class="number">1</span>&#125;&#125;,<span class="string">&quot;libbeat&quot;</span>:&#123;<span class="string">&quot;config&quot;</span>:&#123;<span class="string">&quot;module&quot;</span>:&#123;<span class="string">&quot;running&quot;</span>:<span class="number">0</span>&#125;&#125;,<span class="string">&quot;pipeline&quot;</span>:&#123;<span class="string">&quot;clients&quot;</span>:<span class="number">1</span>,<span class="string">&quot;events&quot;</span>:&#123;<span class="string">&quot;active&quot;</span>:<span class="number">0</span>&#125;&#125;&#125;,<span class="string">&quot;registrar&quot;</span>:&#123;<span class="string">&quot;states&quot;</span>:&#123;<span class="string">&quot;current&quot;</span>:<span class="number">1</span>&#125;&#125;,<span class="string">&quot;system&quot;</span>:&#123;<span class="string">&quot;load&quot;</span>:&#123;<span class="string">&quot;1&quot;</span>:<span class="number">0</span><span class="variable">.09</span>,<span class="string">&quot;15&quot;</span>:<span class="number">0</span><span class="variable">.22</span>,<span class="string">&quot;5&quot;</span>:<span class="number">0</span><span class="variable">.33</span>,<span class="string">&quot;norm&quot;</span>:&#123;<span class="string">&quot;1&quot;</span>:<span class="number">0</span><span class="variable">.045</span>,<span class="string">&quot;15&quot;</span>:<span class="number">0</span><span class="variable">.11</span>,<span class="string">&quot;5&quot;</span>:<span class="number">0</span><span class="variable">.165</span>&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="日志收集"><a href="#日志收集" class="headerlink" title="日志收集"></a>日志收集</h1><p>来到 LogStash 的控制台，可以看到 tomcat 的日志已被收集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/home/ELK/logStash/logstash-7.6.1/vendor/bundle/jruby/2.5.0/gems/awesome_print-1.7.0/lib/awesome_print/formatters/base_formatter.rb:31: warning: constant ::Fixnum is deprecated</span><br><span class="line">&#123;</span><br><span class="line">       &quot;message&quot; =&gt; &quot;192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET / HTTP/1.1\&quot; 200 11437\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /tomcat.css HTTP/1.1\&quot; 200 5895\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /tomcat.svg HTTP/1.1\&quot; 200 68761\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /bg-upper.png HTTP/1.1\&quot; 200 3103\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /bg-nav.png HTTP/1.1\&quot; 200 1401\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /asf-logo-wide.svg HTTP/1.1\&quot; 200 27530\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /bg-button.png HTTP/1.1\&quot; 200 713\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /bg-middle.png HTTP/1.1\&quot; 200 1918\n192.168.10.1 - - [11/Feb/2023:19:20:31 -0800] \&quot;GET /favicon.ico HTTP/1.1\&quot; 200 21630&quot;,</span><br><span class="line">      &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; 2023-02-12T03:51:54.920Z,</span><br><span class="line">           &quot;log&quot; =&gt; &#123;</span><br><span class="line">        &quot;offset&quot; =&gt; 0,</span><br><span class="line">          &quot;file&quot; =&gt; &#123;</span><br><span class="line">            &quot;path&quot; =&gt; &quot;/home/ELK/tomcat/apache-tomcat-10.0.27/logs/localhost_access_log.2023-02-11.txt&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">         &quot;flags&quot; =&gt; [</span><br><span class="line">            [0] &quot;multiline&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">          &quot;tags&quot; =&gt; [</span><br><span class="line">        [0] &quot;beats_input_codec_plain_applied&quot;</span><br><span class="line">    ],</span><br><span class="line">         &quot;input&quot; =&gt; &#123;</span><br><span class="line">        &quot;type&quot; =&gt; &quot;log&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">         &quot;agent&quot; =&gt; &#123;</span><br><span class="line">        &quot;ephemeral_id&quot; =&gt; &quot;82569f6e-16d4-4a5c-9372-06d83d5a5d04&quot;,</span><br><span class="line">             &quot;version&quot; =&gt; &quot;7.6.1&quot;,</span><br><span class="line">                  &quot;id&quot; =&gt; &quot;902b638f-fcd1-44b2-8a81-5cfae937cbef&quot;,</span><br><span class="line">                &quot;type&quot; =&gt; &quot;filebeat&quot;,</span><br><span class="line">            &quot;hostname&quot; =&gt; &quot;localhost.localdomain&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">           &quot;ecs&quot; =&gt; &#123;</span><br><span class="line">        &quot;version&quot; =&gt; &quot;1.4.0&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">          &quot;host&quot; =&gt; &#123;</span><br><span class="line">        &quot;name&quot; =&gt; &quot;localhost.localdomain&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> LogStash </tag>
            
            <tag> FileBeat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 专题三 （LogStash 数据清洗与被压机制）</title>
      <link href="/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E4%B8%89%EF%BC%88LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6%EF%BC%89/"/>
      <url>/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E4%B8%89%EF%BC%88LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>LogStash 一般用来数据清洗，即数据过滤。可以定制从日志中要过滤出的字段。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Logstash是一个开源的数据采集引擎。它可以动态地将不同来源的数据统一采集，并按照指定的数据格式进行处理后，将数据加载到其他的目的地。最开始，Logstash主要是针对日志采集，但后来Logstash开发了大量丰富的插件，所以，它可以做更多的海量数据的采集。</p><p>它可以处理各种类型的日志数据，例如：Apache的web log、Java的log4j日志数据，或者是系统、网络、防火墙的日志等等。它也可以很容易的和Elastic Stack的Beats组件整合，也可以很方便的和关系型数据库、NoSQL数据库、MQ等整合。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/wps1.jpeg" alt="wps1"></p><h1 id="经典架构"><a href="#经典架构" class="headerlink" title="经典架构"></a>经典架构</h1><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%88%AA%E5%9B%BE%20(1).png" alt="截图 (1)"></p><h1 id="对比-FileBeat"><a href="#对比-FileBeat" class="headerlink" title="对比 FileBeat"></a>对比 FileBeat</h1><ul><li><p>logstash是JVM跑的，资源消耗比较大</p></li><li><p>FileBeat是基于golang编写的，功能较少但资源消耗也比较小，更轻量级</p></li><li><p>logstash 和filebeat都具有日志收集功能，Filebeat更轻量，占用资源更少</p></li><li><p>logstash 具有filter功能，能过滤分析日志</p></li></ul><p>一般结构都是filebeat采集日志，然后发送到消息队列，redis，MQ中然后logstash去获取，利用filter功能过滤分析，然后存储到elasticsearch中。</p><p>FileBeat和Logstash配合，实现背压机制。</p><p><img src="C:\Users\Administrator\Downloads\wps3.jpeg" alt="wps3"></p><h1 id="Logstash-安装"><a href="#Logstash-安装" class="headerlink" title="Logstash 安装"></a>Logstash 安装</h1><h2 id="下载-Logstash"><a href="#下载-Logstash" class="headerlink" title="下载 Logstash"></a>下载 Logstash</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.elastic.co/cn/downloads/past-releases/logstash-7-6-1</span><br></pre></td></tr></table></figure><h2 id="解压-Logstash"><a href="#解压-Logstash" class="headerlink" title="解压 Logstash"></a>解压 Logstash</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip logstash-7.6.1 -d /usr/local/es/</span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/es/logstash-7.6.1/</span><br><span class="line">bin/logstash -e <span class="string">&#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>-e 选项表示，直接把配置放在命令中，这样可以有效快速进行测试</p></blockquote><p>待 LogStash 启动完毕</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sending Logstash logs to /home/ELK/logStash/logstash-<span class="number">7</span><span class="variable">.6</span><span class="variable">.1</span>/logs which is now configured via log4j2<span class="variable">.properties</span></span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">21</span>,<span class="number">419</span>][INFO ][logstash<span class="variable">.setting</span><span class="variable">.writabledirectory</span>] Creating directory &#123;:setting=&gt;<span class="string">&quot;path.queue&quot;</span>, :path=&gt;<span class="string">&quot;/home/ELK/logStash/logstash-7.6.1/data/queue&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">21</span>,<span class="number">686</span>][INFO ][logstash<span class="variable">.setting</span><span class="variable">.writabledirectory</span>] Creating directory &#123;:setting=&gt;<span class="string">&quot;path.dead_letter_queue&quot;</span>, :path=&gt;<span class="string">&quot;/home/ELK/logStash/logstash-7.6.1/data/dead_letter_queue&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">21</span>,<span class="number">943</span>][WARN ][logstash<span class="variable">.config</span><span class="variable">.source</span><span class="variable">.multilocal</span>] Ignoring the &#x27;pipelines<span class="variable">.yml</span>&#x27; file because modules <span class="keyword">or</span> command line options are specified</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">21</span>,<span class="number">954</span>][INFO ][logstash<span class="variable">.runner</span>          ] Starting Logstash &#123;<span class="string">&quot;logstash.version&quot;</span>=&gt;<span class="string">&quot;7.6.1&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">21</span>,<span class="number">974</span>][INFO ][logstash<span class="variable">.agent</span>           ] No persistent UUID file found. Generating <span class="keyword">new</span> UUID &#123;:uuid=&gt;<span class="string">&quot;ccfe7a60-a9ce-44b4-b4fc-503d8745082d&quot;</span>, :path=&gt;<span class="string">&quot;/home/ELK/logStash/logstash-7.6.1/data/uuid&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">23</span>,<span class="number">078</span>][INFO ][org<span class="variable">.reflections</span><span class="variable">.Reflections</span>] Reflections took <span class="number">42</span> ms to scan <span class="number">1</span> urls, producing <span class="number">20</span> keys <span class="keyword">and</span> <span class="number">40</span> values</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">23</span>,<span class="number">630</span>][WARN ][org<span class="variable">.logstash</span><span class="variable">.instrument</span><span class="variable">.metrics</span><span class="variable">.gauge</span><span class="variable">.LazyDelegatingGauge</span>][main] A gauge metric of an unknown <span class="keyword">type</span> (org<span class="variable">.jruby</span><span class="variable">.RubyArray</span>) has been create <span class="keyword">for</span> key: cluster_uuids. This may result in invalid serialization.  It is recommended to log an issue to the responsible developer/development team.</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">23</span>,<span class="number">649</span>][INFO ][logstash<span class="variable">.javapipeline</span>    ][main] Starting pipeline &#123;:pipeline_id=&gt;<span class="string">&quot;main&quot;</span>, <span class="string">&quot;pipeline.workers&quot;</span>=&gt;<span class="number">2</span>, <span class="string">&quot;pipeline.batch.size&quot;</span>=&gt;<span class="number">125</span>, <span class="string">&quot;pipeline.batch.delay&quot;</span>=&gt;<span class="number">50</span>, <span class="string">&quot;pipeline.max_inflight&quot;</span>=&gt;<span class="number">250</span>, <span class="string">&quot;pipeline.sources&quot;</span>=&gt;[<span class="string">&quot;config string&quot;</span>], :thread=&gt;<span class="string">&quot;#&lt;Thread:0x63c93421 run&gt;&quot;</span>&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">24</span>,<span class="number">342</span>][INFO ][logstash<span class="variable">.javapipeline</span>    ][main] Pipeline started &#123;<span class="string">&quot;pipeline.id&quot;</span>=&gt;<span class="string">&quot;main&quot;</span>&#125;</span><br><span class="line">The stdin plugin is now waiting <span class="keyword">for</span> <span class="keyword">input</span>:</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">24</span>,<span class="number">407</span>][INFO ][logstash<span class="variable">.agent</span>           ] Pipelines running &#123;:count=&gt;<span class="number">1</span>, :running_pipelines=&gt;[:main], :non_running_pipelines=&gt;[]&#125;</span><br><span class="line">[<span class="number">2023</span>-<span class="number">02</span>-<span class="number">11</span>T18:<span class="number">32</span>:<span class="number">24</span>,<span class="number">555</span>][INFO ][logstash<span class="variable">.agent</span>           ] Successfully started Logstash API endpoint &#123;:port=&gt;<span class="number">9600</span>&#125;</span><br></pre></td></tr></table></figure><p>然后，随便在控制台中输入内容，等待LogStash的输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello LogStash</span><br></pre></td></tr></table></figure><p>LogStash 输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span> =&gt; 2023-02-12T02:37:58.166Z,</span><br><span class="line">      <span class="string">&quot;@version&quot;</span> =&gt; <span class="string">&quot;1&quot;</span>,</span><br><span class="line">          <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;localhost.localdomain&quot;</span>,</span><br><span class="line">       <span class="string">&quot;message&quot;</span> =&gt; <span class="string">&quot;Hello LogStash&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> LogStash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 专题二 （FileBeat 日志收集）</title>
      <link href="/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E4%BA%8C%EF%BC%88FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%EF%BC%89/"/>
      <url>/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E4%BA%8C%EF%BC%88FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Beats 是一个开源代码的数据发送器。可以把 Beats 作为一种代理安装在服务器上，这样就可以比较方便地将数据发送到 Elasticsearch 或者 Logstash 中。Elastic Stack 提供了多种类型的 Beats 组件。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h1 id="Beats-类型"><a href="#Beats-类型" class="headerlink" title="Beats 类型"></a>Beats 类型</h1><table><thead><tr><th>数据类型</th><th>Beat 类型</th></tr></thead><tbody><tr><td>审计数据</td><td>AuditBeat</td></tr><tr><td>日志文件</td><td>FileBeat</td></tr><tr><td>云数据</td><td>FunctionBeat</td></tr><tr><td>可用性数据</td><td>HeartBeat</td></tr><tr><td>系统日志</td><td>JournalBeat</td></tr><tr><td>指标数据</td><td>MetricBeat</td></tr><tr><td>网络流量数据</td><td>PacketBeat</td></tr><tr><td>Windows 事件日志</td><td>WinlogBeat</td></tr></tbody></table><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/clipboard.png" alt="clipboard"></p><p>Beats 可以直接将数据发送到 Elasticsearch 或者发送到 LogStash，基于 LogStash 可以进一步对数据进行处理，然后将处理后的数据存入到 Elasticsearch，最后使用 Kibana 进行数据可视化。</p><h1 id="FileBeat简介"><a href="#FileBeat简介" class="headerlink" title="FileBeat简介"></a>FileBeat简介</h1><p>FileBeat 专门用于转发和手机日志数据的轻量级采集工具。它可以作为代理安装在服务器上，FileBeat 见识指定路径的日志文件，收集日志数据，并将收集到的日志转发到 Elasticsearch 或者 LogStash。</p><h1 id="FileBeat工作原理"><a href="#FileBeat工作原理" class="headerlink" title="FileBeat工作原理"></a>FileBeat工作原理</h1><p>启动FileBeat时，会启动一个或者多个输入（Input），这些Input监控指定的日志数据位置。FileBeat会针对每一个文件启动一个Harvester（收割机）。Harvester读取每一个文件的日志，将新的日志发送到libbeat，libbeat将数据收集到一起，并将数据发送给输出（Output）。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/clipboard%20(1).png" alt="clipboard (1)"></p><h1 id="安装-FIleBeat"><a href="#安装-FIleBeat" class="headerlink" title="安装 FIleBeat"></a>安装 FIleBeat</h1><p>安装FileBeat只需要将FileBeat Linux安装包上传到Linux系统，并将压缩包解压到系统就可以了。</p><p>FileBeat官方下载地址：</p><p><a href="https://www.elastic.co/cn/downloads/past-releases/filebeat-7-6-1">https://www.elastic.co/cn/downloads/past-releases/filebeat-7-6-1</a></p><p>上传FileBeat安装到Linux，并解压。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf filebeat-7.6.1-linux-x86_64.tar.gz -C /usr/local/es/</span><br></pre></td></tr></table></figure><h2 id="采集日志"><a href="#采集日志" class="headerlink" title="采集日志"></a>采集日志</h2><p>使用FileBeat采集MQ日志到ElasticSearch</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>在资料中有一个mq_server.log.tar.gz压缩包，里面包含了很多的MQ服务器日志，现在我们为了通过在Elasticsearch中快速查询这些日志，定位问题。我们需要用FileBeats将日志数据上传到Elasticsearch中。</p><p><strong>问题</strong></p><p>首先，我们要指定FileBeat采集哪些MQ日志，因为FileBeats中必须知道采集存放在哪儿的日志，才能进行采集。</p><p> 其次，采集到这些数据后，还需要指定FileBeats将采集到的日志输出到Elasticsearch，那么Elasticsearch的地址也必须指定。</p><h1 id="配置-FileBeats"><a href="#配置-FileBeats" class="headerlink" title="配置 FileBeats"></a>配置 FileBeats</h1><p>FileBeats配置文件主要分为两个部分。</p><ul><li>inputs    输入数据</li><li>output   输出数据</li></ul><h2 id="input-配置"><a href="#input-配置" class="headerlink" title="input 配置"></a>input 配置</h2><p>在 FileBeats 中，可以读取一个或多个数据源。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="comment"># &quot;-&quot; 表示可以配置多个</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span>  <span class="comment"># type表示采集的是读取每一行日志文件，还是可以配置stdin，表示从标准输入刘输入</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment"># 启用该输入</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/log/*.log</span>  <span class="comment"># 采集日志路径</span></span><br><span class="line">    <span class="comment">#- c:\programdata\elasticsearch\logs\*</span></span><br></pre></td></tr></table></figure><h2 id="output-配置"><a href="#output-配置" class="headerlink" title="output 配置"></a>output 配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output.elasticsearch:</span>  <span class="comment"># 输出到 ElasticSearch</span></span><br><span class="line">  <span class="comment"># Array of hosts to connect to.</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;localhost:9200&quot;</span>]  <span class="comment"># ElasticSearch 的集群地址</span></span><br></pre></td></tr></table></figure><p>默认 FileBeat 会将日志数据放入到名称为 filebeat-%filebeat-%版本号%-yyyy.mm.dd 的索引中。</p><blockquote><p>FileBeats 中 filebeat.reference.yml 包含了 FileBeats 所有支持的配置选项</p></blockquote><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>创建配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/es/filebeat-7.6.1-linux-x86_64</span><br><span class="line">touch filebeat_mq_log.yml</span><br><span class="line">vim filebeat_mq_log.yml</span><br></pre></td></tr></table></figure><p>复制一下到配置文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/mq/log/server.log.*</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">    <span class="attr">hosts:</span> [<span class="string">&quot;192.168.21.130:9200&quot;</span>, <span class="string">&quot;192.168.21.131:9200&quot;</span>, <span class="string">&quot;192.168.21.132:9200&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="运行-FileBeat"><a href="#运行-FileBeat" class="headerlink" title="运行 FileBeat"></a>运行 FileBeat</h2><h3 id="启动-ES-集群"><a href="#启动-ES-集群" class="headerlink" title="启动 ES 集群"></a>启动 ES 集群</h3><p>在每个节点上执行以下命令，启动 Elasticsearch 集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> /usr/local/es/elasticsearch-7.6.1/bin/elasticsearch 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="运行-FileBeat-1"><a href="#运行-FileBeat-1" class="headerlink" title="运行 FileBeat"></a>运行 FileBeat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -c filebeat_mq_log.yml -e</span><br></pre></td></tr></table></figure><h3 id="上传日志"><a href="#上传日志" class="headerlink" title="上传日志"></a>上传日志</h3><p>将日志数据上传到 /var/mq/log，并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /var/mq/log</span><br><span class="line"><span class="built_in">cd</span> /var/mq/log</span><br><span class="line">tar -zxvf mq_server.log.tar.gz</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>通过 head 插件，我们可以看到 filebeat 采集了日志消息，并写入到 Elasticsearch 集群中。</p><h1 id="FileBeat-如何工作"><a href="#FileBeat-如何工作" class="headerlink" title="FileBeat 如何工作"></a>FileBeat 如何工作</h1><p>FileBeat 主要由 input 和 harvesters（收割机）组成。这两个组件协同工作，并将数据发送到指定的输出。</p><h2 id="inputs（输入）"><a href="#inputs（输入）" class="headerlink" title="inputs（输入）"></a>inputs（输入）</h2><p>input是负责管理Harvesters和查找所有要读取的文件的组件。如果输入类型是 log，input组件会查找磁盘上与路径描述的所有文件，并为每个文件启动一个Harvester，每个输入都独立地运行</p><h2 id="Harvesters（收割机）"><a href="#Harvesters（收割机）" class="headerlink" title="Harvesters（收割机）"></a>Harvesters（收割机）</h2><p>Harvesters负责读取单个文件的内容，它负责打开/关闭文件，并逐行读取每个文件的内容，将读取到的内容发送给输出每个文件都会启动一个Harvester，Harvester运行时，文件将处于打开状态。如果文件在读取时，被移除或者重命名，FileBeat将继续读取该文件。</p><h2 id="如何保持文件状态"><a href="#如何保持文件状态" class="headerlink" title="如何保持文件状态"></a>如何保持文件状态</h2><p>FileBeat保存每个文件的状态，并定时将状态信息保存在磁盘的「注册表」文件中，该状态记录Harvester读取的最后一次偏移量，并确保发送所有的日志数据。如果输出（Elasticsearch或者Logstash）无法访问，FileBeat会记录成功发送的最后一行，并在输出（Elasticsearch或者Logstash）可用时，继续读取文件发送数据。</p><p>在运行FileBeat时，每个input的状态信息也会保存在内存中，重新启动FileBeat时，会从「注册表」文件中读取数据来重新构建状态。</p><p>在/usr/local/es/filebeat-7.6.1-linux-x86_64/data目录中有一个Registry文件夹，里面有一个data.json，该文件中记录了Harvester读取日志的offset。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%88%AA%E5%9B%BE.png" alt="截图"></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> FileBeat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK 专题一 （IK分词器源码升级改造实现热更新机制）</title>
      <link href="/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E4%B8%80%EF%BC%88IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6%EF%BC%89/"/>
      <url>/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%E4%B8%93%E9%A2%98%E4%B8%80%EF%BC%88IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> IK 分词器源码下载：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><blockquote><p>本案例以 ES7.6.1 和 Mysql 数据库 5.7 为例进行配置</p></blockquote><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul><h3 id="修改源码步骤"><a href="#修改源码步骤" class="headerlink" title="修改源码步骤"></a>修改源码步骤</h3><p>1 修改 maven 依赖的 es 版本号</p><p>使用工具打开 IK 源码后，打开 pom.xml 文件，修改 elasticsearch 版本号为 7.6.1</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.6.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2 引入 MySQL 驱动到项目中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3 开始修改源码</p><p>在项目中找到 Dictionary 类，找到 Dictionary 单例类的初始化方法 initial 方法，在初始化方法中新启动一个线程，用来执行远程词库的热更新，在修改之前，先在 Dictionary 类同目录下新建一个类 HotDictReloadThread，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotDictReloadThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> ESPluginLoggerFactory.getLogger(</span><br><span class="line">        HotDictReloadThread.class.getName()</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initial</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;正在调用 HotDictReloadThread...&quot;</span>);</span><br><span class="line">            Dictionary.getSingleton().reLoadMainDict();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码含义为：获取字典单实例，并执行它的 reLoadMainDict 方法。</p><p>完成上述操作后，就开始修改 initial 方法，改动如下，创建上面新建的类并调用它的 initial 方法，从而执行 DIctionary 类的 reLoadMainDict 方法；改动代码如下，在字典实例初始化完成后新奇一个线程来执行字典的热更新操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新启动一个线程用来加载数据库</span></span><br><span class="line">pool.execute(() -&gt; <span class="keyword">new</span> <span class="title class_">HotDictReloadThread</span>().initial());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 词典初始化 由于IK Analyzer的词典采用Dictionary类的静态方法进行词典初始化</span></span><br><span class="line"><span class="comment"> * 只有当Dictionary类被实际调用时，才会开始载入词典， 这将延长首次分词操作的时间 该方法提供了一</span></span><br><span class="line"><span class="comment"> * 个在应用加载阶段就初始化字典的手段</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Dictionary</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">initial</span><span class="params">(Configuration cfg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Dictionary.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                singleton = <span class="keyword">new</span> <span class="title class_">Dictionary</span>(cfg);</span><br><span class="line">                singleton.loadMainDict();</span><br><span class="line">                singleton.loadSurnameDict();</span><br><span class="line">                singleton.loadQuantifierDict();</span><br><span class="line">                singleton.loadSuffixDict();</span><br><span class="line">                singleton.loadPrepDict();</span><br><span class="line">                singleton.loadStopWordDict();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 新启动一个线程用来加载数据库</span></span><br><span class="line">                pool.execute(() -&gt; <span class="keyword">new</span> <span class="title class_">HotDictReloadThread</span>().initial());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(cfg.isEnableRemoteDict())&#123;</span><br><span class="line">                    <span class="comment">// 建立监控线程</span></span><br><span class="line">                    <span class="keyword">for</span> (String location : singleton.getRemoteExtDictionarys()) &#123;</span><br><span class="line">                        <span class="comment">// 10 秒是初始延迟可以修改的 60是间隔时间 单位秒</span></span><br><span class="line">                        pool.scheduleAtFixedRate(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Monitor</span>(location), <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (String location : singleton.getRemoteExtStopWordDictionarys()) </span><br><span class="line">                    &#123;</span><br><span class="line">                        pool.scheduleAtFixedRate(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Monitor</span>(location), <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 reLoadMainDict 方法中，可以看到有 2 个方法：</p><ul><li>tmpDict.loadMainDict()    维护的是扩展词库</li><li>tmpDict.loadStopWordDict()维护的是停用词库</li></ul><p>先看对扩展词库的维护。</p><p>在方法 tmpDict.loadMainDict() 中，在最后一行加载远程自定义词库后面新增一个方法 this.loadMySQLExtDict()，用于加载 MySQL 词库，在加载 MySQL 词库之前，需要先准备下 MySQL 相关的配置以及 SQL 语句；在数据库中新建一张表，用户维护扩展词和停用词，表结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `es_lexicon`  (</span><br><span class="line">  `lexicon_id` bigint(8) NOT NULL AUTO_INCREMENT COMMENT &#x27;词库id&#x27;,</span><br><span class="line">  `lexicon_text` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT &#x27;词条关键词&#x27;,</span><br><span class="line">  `lexicon_type` int(1) NOT NULL DEFAULT 0 COMMENT &#x27;0扩展词库 1停用词库&#x27;,</span><br><span class="line">  `lexicon_status` int(1) NOT NULL DEFAULT 0 COMMENT &#x27;词条状态 0正常 1暂停使用&#x27;,</span><br><span class="line">  `del_flag` int(1) NOT NULL DEFAULT 0 COMMENT &#x27;作废标志 0正常 1作废&#x27;,</span><br><span class="line">  `create_time` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`lexicon_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &#x27;ES远程扩展词库表&#x27; ROW_FORMAT = Dynamic;</span><br></pre></td></tr></table></figure><p>然后我们在项目的根路径的config目录下新建配置文件jdbc-reload.properties，内容如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库地址</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=GMT&amp;autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useAffectedRows=true&amp;useSSL=false</span></span><br><span class="line"><span class="comment"># 数据库用户名</span></span><br><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># 数据库密码</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"># 数据库查询扩展词库sql语句</span></span><br><span class="line"><span class="attr">jdbc.reload.sql</span>=<span class="string">select gel.lexicon_text as word from es_lexicon gel where gel.lexicon_type = 0 and gel.lexicon_status = 0 and gel.del_flag = 0 order by gel.lexicon_id desc </span></span><br><span class="line"><span class="comment"># 数据库查询停用词sql语句</span></span><br><span class="line"><span class="attr">jdbc.reload.stopword.sql</span>=<span class="string">select gel.lexicon_text as word from ges_lexicon gel where gel.lexicon_type = 1 and gel.lexicon_status = 0 and gel.del_flag = 0 order by gel.lexicon_id desc </span></span><br><span class="line"><span class="comment"># 数据库查询间隔时间 每隔10秒请求一次</span></span><br><span class="line"><span class="attr">jdbc.reload.interval</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure><p>完成了这些基础配置之后，我们再一同看看关于同步MySql词库的方法loadMySQLExtDict()；代码较长，粘贴如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从MySql中加载动态词库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadMySQLExtDict</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="type">Path</span> <span class="variable">file</span> <span class="operator">=</span> PathUtils.get(getDictRoot(), <span class="string">&quot;jdbc-reload.properties&quot;</span>);</span><br><span class="line">     props.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file.toFile()));</span><br><span class="line"></span><br><span class="line">     logger.info(<span class="string">&quot;[==========]jdbc-reload.properties&quot;</span>);</span><br><span class="line">     <span class="keyword">for</span>(Object key : props.keySet()) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;[==========]&quot;</span> + key + <span class="string">&quot;=&quot;</span> + props.getProperty(String.valueOf(key)));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     logger.info(<span class="string">&quot;[==========]query hot dict from mysql, &quot;</span> + props.getProperty(<span class="string">&quot;jdbc.reload.sql&quot;</span>) + <span class="string">&quot;......&quot;</span>);</span><br><span class="line"><span class="comment">//       Class.forName(props.getProperty(&quot;jdbc.className&quot;));</span></span><br><span class="line">     conn = DriverManager.getConnection(</span><br><span class="line">           props.getProperty(<span class="string">&quot;jdbc.url&quot;</span>),</span><br><span class="line">           props.getProperty(<span class="string">&quot;jdbc.user&quot;</span>),</span><br><span class="line">           props.getProperty(<span class="string">&quot;jdbc.password&quot;</span>));</span><br><span class="line">     stmt = conn.createStatement();</span><br><span class="line">     rs = stmt.executeQuery(props.getProperty(<span class="string">&quot;jdbc.reload.sql&quot;</span>));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">theWord</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;[==========]正在加载Mysql自定义IK扩展词库词条: &quot;</span> + theWord);</span><br><span class="line">        _MainDict.fillSegment(theWord.trim().toCharArray());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     Thread.sleep(Integer.valueOf(String.valueOf(props.get(<span class="string">&quot;jdbc.reload.interval&quot;</span>))) * <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     logger.error(<span class="string">&quot;erorr&quot;</span>, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     <span class="keyword">if</span>(rs != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           logger.error(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           logger.error(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           logger.error(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，通过加载配置文件，获取数据库连接，执行扩展词sql，将结果集添加到扩展词库中；</p><p>同理，同步MySql停用词的逻辑也是一样的，这里我直接把代码粘贴过来；停用词方法调用顺序为tmpDict.loadStopWordDict()，在方法后面，新增一个方法调用this.loadMySQLStopwordDict()，新方法中处理通用词逻辑，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 从MySql中加载远程停用词库</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadMySQLStopwordDict</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="type">Path</span> <span class="variable">file</span> <span class="operator">=</span> PathUtils.get(getDictRoot(), <span class="string">&quot;jdbc-reload.properties&quot;</span>);</span><br><span class="line">     props.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file.toFile()));</span><br><span class="line"></span><br><span class="line">     logger.info(<span class="string">&quot;[==========]jdbc-reload.properties&quot;</span>);</span><br><span class="line">     <span class="keyword">for</span>(Object key : props.keySet()) &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;[==========]&quot;</span> + key + <span class="string">&quot;=&quot;</span> + props.getProperty(String.valueOf(key)));</span><br><span class="line">     &#125;</span><br><span class="line">     logger.info(<span class="string">&quot;[==========]query hot stopword dict from mysql, &quot;</span> + props.getProperty(<span class="string">&quot;jdbc.reload.stopword.sql&quot;</span>) + <span class="string">&quot;......&quot;</span>);</span><br><span class="line"><span class="comment">//       Class.forName(props.getProperty(&quot;jdbc.className&quot;));</span></span><br><span class="line">     conn = DriverManager.getConnection(</span><br><span class="line">           props.getProperty(<span class="string">&quot;jdbc.url&quot;</span>),</span><br><span class="line">           props.getProperty(<span class="string">&quot;jdbc.user&quot;</span>),</span><br><span class="line">           props.getProperty(<span class="string">&quot;jdbc.password&quot;</span>));</span><br><span class="line">     stmt = conn.createStatement();</span><br><span class="line">     rs = stmt.executeQuery(props.getProperty(<span class="string">&quot;jdbc.reload.stopword.sql&quot;</span>));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">theWord</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;word&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;[==========]正在加载Mysql自定义IK停用词库词条: &quot;</span> + theWord);</span><br><span class="line">        _StopWords.fillSegment(theWord.trim().toCharArray());</span><br><span class="line">     &#125;</span><br><span class="line">     Thread.sleep(Integer.valueOf(String.valueOf(props.get(<span class="string">&quot;jdbc.reload.interval&quot;</span>))) * <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     logger.error(<span class="string">&quot;erorr&quot;</span>, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     <span class="keyword">if</span>(rs != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           logger.error(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           stmt.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           logger.error(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           logger.error(<span class="string">&quot;error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成这些，整体代码改造完毕；在上述代码中，有很多的地方是可以进一步优化的，比如扩展词和停用词的大量重复代码，以及读取本地配置文件项可以做到只读取一次等，这个大家可以自行优化；</p><p>完成了这些之后，我们就可以开始打包插件了；直接使用maven package命令进行打包，在target/releases/elasticsearch-analysis-ik-7.8.0.zip文件，我们将Mysql驱动mysql-connector-java.jar也放到这个压缩包里面；</p><p><strong>安装插件</strong></p><p>完成上述步骤后，拿到elasticsearch-analysis-ik-7.8.0.zip插件，我们将其放在ES安装目录下的plugins目录下，新建一个ik文件夹，将其解压到ik文件夹下；目录结构大概如下，记得要有MySql驱动mysql-connector-java.jar</p><p><img src="https://pic1.zhimg.com/80/v2-73f17eaa457c573eaff75a112faca3b8_720w.webp" alt="img"></p><p>完成上述步骤后，我们就可以启动ES了，在启动过程中，可以看到关于IK热更新MySql词库相关的日志输出；在实际过程中，可能会报很多的异常，下面是我所遇到的一些问题以及解决方案；</p><p><strong>常见问题</strong></p><p><strong>1、异常1</strong>：java.sql.SQLException: Column ‘word’ not found.</p><p>此异常是因为编写sql时，查询的数据库字段需要起别名为 word，修改一下sql即可解决这个问题；</p><p><strong>2、异常2</strong>：Could not create connection to database server</p><p>此异常通常是因为引用的mysql驱动和mysql版本号不一致导致的，只需要替换成对应的版本号即可解决，另外，数据库连接我们不需要再额外的去配置显示加载，即不需要写 Class.forName(props.getProperty(“jdbc.className”));</p><p><strong>3、异常3</strong>：no suitable driver found for jdbc:mysql://…</p><p>此异常我们需要在环境的JDK安装目录的jre\lib\ext目录下添加mysql驱动mysql-connector-java.jar；比如我本地的是C:\Java\jdk_8u_231\jre\lib\ext 目录，服务器上是/data/jdk1.8.0_181/jre/lib/ext</p><p><strong>4、异常4</strong>：AccessControlException: access denied (“java.net.SocketPermission” “127.0.0.1:3306” “connect,resolve”)</p><p>这个异常，我们修改jdk安装路径下的C:\Java\jdk_8u_231\jre\lib\security目录下的文件<strong>java.policy</strong>，在下面新增一行即可解决</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permission java.net.SocketPermission &quot;*&quot;, &quot;connect,resolve&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-67909acb527460a226b09072e3f6d3bd_720w.webp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> IK 分词器 </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK Beats 进阶专题</title>
      <link href="/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%20Beats%20%E8%BF%9B%E9%98%B6%E4%B8%93%E9%A2%98/"/>
      <url>/2023/02/12/java/architect/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98/ELK/ELK%20Beats%20%E8%BF%9B%E9%98%B6%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本节为ELK（Elasticsearch、LogStash、Kibana）进阶实战</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="https://windychenxi.github.io/2023/02/12/ELK/IK%E5%88%86%E8%AF%8D%E5%99%A8%E6%BA%90%E7%A0%81%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6/">ELK专题一 IK 分词器源码升级改造实现热更新机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/">ELK专题二 FileBeat 日志收集</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/LogStash%20%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8E%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6/">ELK专题三 LogStash 数据清洗与被压机制</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/FileBeat%20+%20LogStash%20%E6%95%B4%E5%90%88/">ELK专题四 FileBeat + LogStash 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/Google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6ElasticSearch-head%E5%AE%89%E8%A3%85/">ELK专题五 Google 浏览器插件 ElasticSeach-head 安装</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ELK%20+%20FileBeat%20%E6%95%B4%E5%90%88/">ELK专题六 ELK + FileBeat 整合</a></li><li><a href="https://windychenxi.github.io/2023/02/12/ELK/ElasticSearch%20%E4%BC%98%E5%8C%96/">ELK专题七 ElasticSearch 优化</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小流量商品架构</title>
      <link href="/2023/02/12/%E5%B0%8F%E6%B5%81%E9%87%8F%E5%95%86%E5%93%81%E6%9E%B6%E6%9E%84/"/>
      <url>/2023/02/12/%E5%B0%8F%E6%B5%81%E9%87%8F%E5%95%86%E5%93%81%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%B0%8F%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84-%E5%AF%BC%E5%87%BA.png" alt="小流量架构-导出"></p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><ul><li><p>商品数量：1000</p></li><li><p>模板数量：1</p></li><li><p>静态页面：1000 * 机房（服务）数量</p></li><li><p>小米商城、华为商城等</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>亿级流量商品架构专题</title>
      <link href="/2023/02/12/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E5%95%86%E5%93%81%E6%9E%B6%E6%9E%84%E4%B8%93%E9%A2%98/"/>
      <url>/2023/02/12/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E5%95%86%E5%93%81%E6%9E%B6%E6%9E%84%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是亿级流量商品架构专题，基于Spring Alibaba Cloud微服务，结合了<code>ELK</code>日志收集系统、<code>Skywalking</code>链路追踪等热门技术框架。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="">小流量商品架构</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/11/hello-world/"/>
      <url>/2023/02/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>亿级流量架构</title>
      <link href="/2023/02/10/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E5%95%86%E5%93%81%E6%9E%B6%E6%9E%84/"/>
      <url>/2023/02/10/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E5%95%86%E5%93%81%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="小流量商品架构"><a href="#小流量商品架构" class="headerlink" title="小流量商品架构"></a>小流量商品架构</h1><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%B0%8F%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84-%E5%AF%BC%E5%87%BA.png" alt="小流量架构-导出"></p><p>适用范围：</p><ul><li><p>商品数量：1000</p></li><li><p>模板数量：1</p></li><li><p>静态页面：1000 * 机房（服务）数量</p></li><li><p>小米商城、华为商城等</p></li></ul><h2 id="页面静态化"><a href="#页面静态化" class="headerlink" title="页面静态化"></a>页面静态化</h2><p>使用<code>FreeMarker</code>模板引擎。基于模板和数据源生成输出文本（HTML网页、配置文件）。</p><p><code>pom</code> 引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FreeMarkTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 第一步：创建一个Configuration对象，直接new一个对象。构造方法的参数就是freemarker对于的版本号。</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(Configuration.getVersion());</span><br><span class="line">        <span class="comment">// 第二步：设置模板文件所在的路径。</span></span><br><span class="line">        configuration.setDirectoryForTemplateLoading(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;G:\\tuling\\ftl&quot;</span>));</span><br><span class="line">        <span class="comment">// 第三步：设置模板文件使用的字符集。一般就是utf-8.</span></span><br><span class="line">        configuration.setDefaultEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 第四步：加载一个模板，创建一个模板对象。</span></span><br><span class="line">        <span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> configuration.getTemplate(<span class="string">&quot;test.ftl&quot;</span>);</span><br><span class="line">        <span class="comment">// 第五步：创建一个模板使用的数据集，可以是pojo也可以是map。一般是Map。</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">dataModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//向数据集中添加数据</span></span><br><span class="line">        dataModel.put(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;monkey老师2021年6月6日21:21:08&quot;</span>);</span><br><span class="line">        <span class="comment">// 第六步：创建一个Writer对象，一般创建一FileWriter对象，指定生成的文件名。</span></span><br><span class="line">        <span class="type">Writer</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;G:\\tuling\\ftl\\test.html&quot;</span>));</span><br><span class="line">        <span class="comment">// 第七步：调用模板对象的process方法输出文件。</span></span><br><span class="line">        template.process(dataModel, out);</span><br><span class="line">        <span class="comment">// 第八步：关闭流。</span></span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="架构方案的问题"><a href="#架构方案的问题" class="headerlink" title="架构方案的问题"></a>架构方案的问题</h2><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><p>数据新增分增量和全量数据，商品需要进行静态化。新增的商品静态化数据如何同步？</p><p>不同的应用部署在不同服务器甚至在不同的机房和国家。</p><p><strong>（1）通过网络同步的方式</strong></p><p>其中一台服务器静态话后，把文件同步到其它应用服务器上。比如 <code>linux</code> 的 <code>scp</code> 命令。</p><p>方法可行，但问题较多，有多少个节点就需要同步多少份，等于是商品数量 * 服务器。</p><p>不是最优。</p><h5 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h5><p>可以在每个应用使用定时任务，分别去执行数据可需要静态化的数据即可。</p><p>可以解决1中数据同步问题。因为所有的任务都是在本机运行，不需要数据同步。</p><p>弊端是无法避免不同的服务器跑的数据不能重复，也就是 <code>A</code> 和 <code>B</code> 定时任务都跑了一份商品。（比较直观的就是上锁）</p><h5 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h5><p>使用消息中间件来解决。订阅 <code>topic</code> 然后生成当前服务器静态化的页面。</p><h5 id="1-2-2-数据更新"><a href="#1-2-2-数据更新" class="headerlink" title="1.2.2 数据更新"></a>1.2.2 数据更新</h5><p>​    <code>FreeMarker</code> 生成的数据都是按模板生产好的。</p><ul><li><p>如果修改了模板，就需要重新生成静态化文件，牵一发而动全身</p></li><li><p>如果后台数据有变更，如何即使同步到其它服务器？</p></li></ul><h4 id="1-3-后台优化"><a href="#1-3-后台优化" class="headerlink" title="1.3 后台优化"></a>1.3 后台优化</h4><h5 id="1-3-1-引入缓存"><a href="#1-3-1-引入缓存" class="headerlink" title="1.3.1 引入缓存"></a>1.3.1 引入缓存</h5><p>将商品详情加入 <code>redis</code> 缓存，这样第二次请求同一个商品，无需再查数据库，直接从<code> redis</code> 缓存中获取，<strong>减少磁盘IO</strong>。</p><h6 id="redis-工具类"><a href="#redis-工具类" class="headerlink" title="redis 工具类"></a>redis 工具类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisOpsUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key,Object value)</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> timeout, TimeUnit unit)</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key,value,timeout,unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setIfAbsent</span><span class="params">(String key, Object value, <span class="type">long</span> timeout, TimeUnit unit)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().setIfAbsent(key,value,timeout,unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">get</span><span class="params">(String key,Class&lt;?&gt; T)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T)redisTemplate</span><br><span class="line">                .opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) redisTemplate</span><br><span class="line">                .opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate</span><br><span class="line">                .opsForValue().decrement(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key,<span class="type">long</span> delta)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate</span><br><span class="line">                .opsForValue().decrement(key,delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate</span><br><span class="line">                .opsForValue().increment(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key,<span class="type">long</span> delta)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate</span><br><span class="line">                .opsForValue().increment(key,delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品加入缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的商品</span></span><br><span class="line">...</span><br><span class="line">    redsiOpsUtil.set(商品ID, 商品信息);</span><br></pre></td></tr></table></figure><h6 id="缓存数据一致性"><a href="#缓存数据一致性" class="headerlink" title="缓存数据一致性"></a>缓存数据一致性</h6><p>（1）<strong>最终一致性方案</strong></p><p>设置超时时间来解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redisOpsUtil.set(RedisKeyPrefixConst.PRODUCT_DETAIL_CACHE+id,productInfo,<span class="number">360</span>,T</span><br><span class="line">imeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>（2）<strong>实时一致性方案</strong></p><p><strong>后续会讲到</strong>（交易 canal binlog）</p><h5 id="1-3-2-问题"><a href="#1-3-2-问题" class="headerlink" title="1.3.2 问题"></a>1.3.2 问题</h5><ol><li><p>提高请求的吞吐量，除了减少磁盘IO，还有网络IO。我们还可以发现，请求 redis 其实也会涉及到网络IO，我们所有的请求都需要走 6379 端口。</p></li><li><p>高并发</p><p>预期的 set 一次 redis，但实际是多次，并发问题。</p><p>分布式锁：redis、zookeeper</p></li><li><p>压缩（减少内存）</p><p>序列化转成字符串</p></li></ol><h4 id="1-4-加入分布式锁"><a href="#1-4-加入分布式锁" class="headerlink" title="1.4 加入分布式锁"></a>1.4 加入分布式锁</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;!‐‐加入redisson‐‐&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>原理</strong>：使用的 <code>setnx</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETNX key value</span><br></pre></td></tr></table></figure><p><code>setnx</code> 是 <code>SET if NOT EXISTS</code>（如果不存在，则 <code>SET</code>）的简写。</p><ul><li>不存在    <code>SET</code> 成功，则返回 <code>int 1</code></li><li>存在       <code>SET</code> 失败，则返回 <code>int 0</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">    config.useSingleServer()</span><br><span class="line">       .setAddress(<span class="string">&quot;redis://tlshop.com:6379&quot;</span>).setPassword(<span class="string">&quot;123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示例</p><p>（1）<code>lock()</code> 粗暴上锁，但所有的线程都会去获取锁，需使用双检锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取缓存</span></span><br><span class="line">...</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(lockPath + id);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="comment">// 调用本方法，再次获取缓存 (双重检测)</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 业务代码</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优点</strong></p><ul><li>简单粗暴</li><li>等待时间为 0</li></ul><p><strong>缺点</strong></p><ul><li><p>所有线程都需要<strong>串行化</strong>获取锁（与高并发环境违背）</p></li><li><p>使用<strong>双检锁</strong>，需要访问<strong>两次</strong> redis 缓存（<strong>网络 IO</strong>）</p></li></ul><p><code>tryLock()</code> 尝试获得锁，如果上锁失败那么就从缓存中取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取缓存</span></span><br><span class="line">...</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(lockPath + id);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(lock.tryLock(<span class="number">0</span>, <span class="number">5</span>, SECONDS))&#123;</span><br><span class="line">        <span class="comment">// 业务代码</span></span><br><span class="line">    ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 递归调用本方法，获取缓存</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 判断当前是否有锁（tryLock 可能失败，没有获取到锁，故可能释放锁失败）</span></span><br><span class="line">    <span class="keyword">if</span> (lock.isLocked()) &#123;</span><br><span class="line">        <span class="comment">// 判断占有锁的是否为当前线程</span></span><br><span class="line">        <span class="keyword">if</span> (lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意点</strong></p><p><code>tryLock()</code>无参时，会存在默认的续命时间，线程会等待默认时间再次获取锁.</p><p>在此处，需要将续命时间设置为 <code>0</code>，同时将锁设置固定时间 <code>5</code> 秒，如果当前线程在 <code>5</code> 秒内未执行完，将由下一个线程执行。</p><p><strong>优点</strong></p><ul><li>只需要获取<strong>一次</strong> <code>redis</code> 缓存（<strong>网络 IO</strong>）</li><li>线程不需要串行化获取锁</li></ul><p><strong>缺点</strong></p><ul><li>使用 <strong>sleep</strong> ，总会有一个线程存在<strong>等待时间</strong></li></ul><p>缓存引用场景</p><ol><li>访问量大、<code>QPS</code>高、更新频率不是很高的业务</li><li>数据一致性要求不高</li></ol><h4 id="1-5-缓存不足"><a href="#1-5-缓存不足" class="headerlink" title="1.5 缓存不足"></a>1.5 缓存不足</h4><h5 id="1-5-1-缓存击穿（热点数据单个key）"><a href="#1-5-1-缓存击穿（热点数据单个key）" class="headerlink" title="1.5.1 缓存击穿（热点数据单个key）"></a>1.5.1 缓存击穿（热点数据单个key）</h5><p>对于一些设置过期时间的 <code>key</code>，如果这些 <code>key</code> 可能再某些时间点被超高并发的访问，是一种非常“热点”的数据。此时，需要考虑缓存被“击穿”的问题。</p><p>与<strong>缓存雪崩</strong>的区别：</p><p>这里针对某一个 <code>key</code> 的缓存，雪崩是多个 <code>key</code></p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF-%E5%AF%BC%E5%87%BA.png" alt="缓存击穿-导出"></p><p><strong>解决方案</strong></p><ol><li><p><strong>加锁</strong></p><p>在未命中缓存时，通过加锁避免大量请求访问数据库。</p></li><li><p><strong>不允许过期</strong></p><p>物理不过期，也就是不设置过期时间。而是逻辑上定时在后台异步的更新数据。</p></li><li><p><strong>采用二级缓存</strong></p><p><code>L1</code> 缓存失效时间短，<code>L2</code> 缓存失效时间长。请求优先从 <code>L1</code> 缓存获取数据，如果未命中，则加锁。保证只有一个线程去数据库中读取数据，然后再更新到 <code>L1</code> 和 <code>L2</code> 中。其它线程依然再 <code>L2</code> 缓存获取数据。</p></li></ol><h5 id="1-5-2-缓存穿透（恶意攻击、访问不存在的数据）"><a href="#1-5-2-缓存穿透（恶意攻击、访问不存在的数据）" class="headerlink" title="1.5.2 缓存穿透（恶意攻击、访问不存在的数据）"></a>1.5.2 缓存穿透（恶意攻击、访问不存在的数据）</h5><p>缓存穿透是指查询一个一定不存在的数据，由于缓存时不命中时杯中写的，并且处于容错考虑，如果从存储层查询不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能 <code>DB</code> 就挂掉了。如果有人利用不存在的 <code>key</code> 频繁攻击我们的应用，这就是漏洞。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F-%E5%AF%BC%E5%87%BA.png" alt="缓存穿透-导出"></p><p><strong>解决方案</strong></p><p>有很多种方法可以有效解决缓存穿透问题</p><ol><li><p>布隆过滤器</p><p>最常用，将所有可能存在的数据哈希到一个足够大的 <code>BitMap</code> 中，一个一定不存在的数据会被 <code>BitMap</code> 拦截掉，从而避免了对底层存储系统的查询压力。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8-%E5%AF%BC%E5%87%BA.png" alt="布隆过滤器-导出"></p></li><li><p>缓存空数据</p><p>简单粗暴。如果一个查询返回的数据为空（不管是数据不存在还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过 <code>5</code> 分钟。</p></li></ol><h5 id="1-5-3-缓存雪崩（同一时间失效，并发量大）"><a href="#1-5-3-缓存雪崩（同一时间失效，并发量大）" class="headerlink" title="1.5.3 缓存雪崩（同一时间失效，并发量大）"></a>1.5.3 缓存雪崩（同一时间失效，并发量大）</h5><p>在设置缓存时，采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到 <code>DB</code>，<code>DB</code>瞬时压力过重雪崩。</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9-%E5%AF%BC%E5%87%BA.png" alt="缓存雪崩-导出"></p><p><strong>解决方案</strong></p><ol><li><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕。大多数系统设计者考虑用加锁或者队列的方式保证缓存的单线程（进程）写，从而避免失效时大量的并发请求落到底层存储系统上。</p><p>这里分享一个简单方案就是：将缓存失效时间分散开。比如可以在原有的失效时间基础上增加一个随机值，比如<code>1~5分钟</code>随机。这样每个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p></li><li><p>事前</p><p>这种方案就是在发生雪崩前对缓存集群实现高可用，如果是使用 <code>Redis</code>，可以使用 <strong>主从 + 哨兵</strong>，<strong>Redis Cluster</strong> 来避免 <code>Redis</code> 全盘崩溃的情况。</p></li><li><p>事中</p><p>使用 Hystrix 进行<strong>限流 &amp; 降级</strong>。比如一秒来了 <code>5000</code> 个请求，可以设置假设只能有一秒 <code>2000</code> 个请求能通过这个组件，那么其他剩余的 3000 请求就会走限流逻辑。人啊后驱调用我们自己开发的降级组件（降级）。比如设置一些默认值等，以此来保护最后的 <code>MySQL</code> 不会被大量的请求给打死。</p></li><li><p>事后</p><p>开启 <strong>Redis 持久化</strong>机制，尽快恢复缓存集群</p></li></ol><h5 id="1-5-4-缓存和数据库双写一致性"><a href="#1-5-4-缓存和数据库双写一致性" class="headerlink" title="1.5.4 缓存和数据库双写一致性"></a>1.5.4 缓存和数据库双写一致性</h5><p>一致性问题是分布式常见问题，可以分为最终一致性和强一致性。数据库和缓存双写，就必然会存在不一致的问题。</p><h4 id="1-6-本地缓存"><a href="#1-6-本地缓存" class="headerlink" title="1.6 本地缓存"></a>1.6 本地缓存</h4><p>网站的性能好与坏，<strong>网络 IO</strong> 和<strong>磁盘 IO</strong> 这两部分影响是比较大的。</p><p>我们现在引入缓存的目的就是提网站的性能。其实本质是不走磁盘走内存减少<strong>磁盘 IO</strong> 来提高性能。</p><p>但是引入 <code>redis</code> 后，同时也增加了<strong>网络 IO</strong>。那么就用到了本地缓存。</p><p>本地缓存不推荐 <code>ConcurrentHashMap</code>。因为它没有过期机制，需要自己实现。</p><h4 id="1-7-Guava-缓存"><a href="#1-7-Guava-缓存" class="headerlink" title="1.7 Guava 缓存"></a>1.7 Guava 缓存</h4><p><code>pom</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>guava</code> 缓存作为<strong>一级缓存</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalCache</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String,PmsProductParam&gt; localCache = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        localCache = CacheBuilder.newBuilder()</span><br><span class="line">                <span class="comment">//设置本地缓存容器的初始容量</span></span><br><span class="line">                .initialCapacity(<span class="number">10</span>)</span><br><span class="line">                <span class="comment">//设置本地缓存的最大容量</span></span><br><span class="line">                .maximumSize(<span class="number">500</span>)</span><br><span class="line">                <span class="comment">//设置写缓存后多少秒过期</span></span><br><span class="line">                .expireAfterWrite(<span class="number">60</span>, TimeUnit.SECONDS).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLocalCache</span><span class="params">(String key,PmsProductParam object)</span>&#123;</span><br><span class="line">        localCache.put(key,object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PmsProductParam <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> localCache.getIfPresent(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置最大容量</li><li>初始化容量</li><li>缓存过期</li></ul><p>两层缓存：本地缓存 + <code>redis</code> 缓存</p><h4 id="1-8-布隆过滤器"><a href="#1-8-布隆过滤器" class="headerlink" title="1.8 布隆过滤器"></a>1.8 布隆过滤器</h4><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8-%E5%AF%BC%E5%87%BA.png" alt="布隆过滤器-导出"></p><h5 id="1-8-1-存储"><a href="#1-8-1-存储" class="headerlink" title="1.8.1 存储"></a>1.8.1 存储</h5><p>应用在加载时，将数据加入布隆过滤器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterConfig</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PmsProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BloomFilterHelper&lt;String&gt; <span class="title function_">initBloomFilterHelper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BloomFilterHelper</span>&lt;&gt;((Funnel&lt;String&gt;) (from, into) -&gt; into.putString(from, Charsets.UTF_8)</span><br><span class="line">                .putString(from, Charsets.UTF_8), <span class="number">1000000</span>, <span class="number">0.01</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 布隆过滤器bean注入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BloomRedisService <span class="title function_">bloomRedisService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">BloomRedisService</span> <span class="variable">bloomRedisService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BloomRedisService</span>();</span><br><span class="line">        bloomRedisService.setBloomFilterHelper(initBloomFilterHelper());</span><br><span class="line">        bloomRedisService.setRedisTemplate(template);</span><br><span class="line">        <span class="keyword">return</span> bloomRedisService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        List&lt;Long&gt; list = productService.getAllProductId();</span><br><span class="line">        log.info(<span class="string">&quot;加载产品到布隆过滤器当中,size:&#123;&#125;&quot;</span>,list.size());</span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(list))&#123;</span><br><span class="line">            list.stream().forEach(item-&gt;&#123;</span><br><span class="line">                <span class="comment">//LocalBloomFilter.put(item);</span></span><br><span class="line">                bloomRedisService().addByBloomFilter(RedisKeyPrefixConst.PRODUCT_REDIS_BLOOM_FILTER,item+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-8-2-拦截匹配"><a href="#1-8-2-拦截匹配" class="headerlink" title="1.8.2 拦截匹配"></a>1.8.2 拦截匹配</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BloomRedisService bloomRedisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">currentUrl</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">PathMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">        <span class="comment">//解析出pathvariable</span></span><br><span class="line">        Map&lt;String, String&gt; pathVariable = matcher.extractUriTemplateVariables(<span class="string">&quot;/pms/productInfo/&#123;id&#125;&quot;</span>, currentUrl);</span><br><span class="line">        <span class="comment">//布隆过滤器存储在redis中</span></span><br><span class="line">        <span class="keyword">if</span>(bloomRedisService.includeByBloomFilter(RedisKeyPrefixConst.PRODUCT_REDIS_BLOOM_FILTER,pathVariable.get(<span class="string">&quot;id&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 存储在本地jvm布隆过滤器中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*if(LocalBloomFilter.match(pathVariable.get(&quot;id&quot;)))&#123;</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 不在本地布隆过滤器当中，直接返回验证失败</span></span><br><span class="line"><span class="comment">         * 设置响应头</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(CommonResult.validateFailed(<span class="string">&quot;产品不存在!&quot;</span>));</span><br><span class="line">        response.getWriter().print(result);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-8-3-服务层"><a href="#1-8-3-服务层" class="headerlink" title="1.8.3 服务层"></a>1.8.3 服务层</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomRedisService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BloomFilterHelper bloomFilterHelper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBloomFilterHelper</span><span class="params">(BloomFilterHelper bloomFilterHelper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bloomFilterHelper = bloomFilterHelper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRedisTemplate</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据给定的布隆过滤器添加值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">addByBloomFilter</span><span class="params">(String key, T value)</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(bloomFilterHelper != <span class="literal">null</span>, <span class="string">&quot;bloomFilterHelper不能为空&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] offset = bloomFilterHelper.murmurHashOffset(value);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : offset) &#123;</span><br><span class="line">            redisTemplate.opsForValue().setBit(key, i, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据给定的布隆过滤器判断值是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">includeByBloomFilter</span><span class="params">(String key, T value)</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(bloomFilterHelper != <span class="literal">null</span>, <span class="string">&quot;bloomFilterHelper不能为空&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] offset = bloomFilterHelper.murmurHashOffset(value);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : offset) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!redisTemplate.opsForValue().getBit(key, i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-8-4-工具类"><a href="#1-8-4-工具类" class="headerlink" title="1.8.4 工具类"></a>1.8.4 工具类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 算法过程：</span></span><br><span class="line"><span class="comment"> * 1. 首先需要k个hash函数，每个函数可以把key散列成为1个整数</span></span><br><span class="line"><span class="comment"> * 2. 初始化时，需要一个长度为n比特的数组，每个比特位初始化为0</span></span><br><span class="line"><span class="comment"> * 3. 某个key加入集合时，用k个hash函数计算出k个散列值，并把数组中对应的比特位置为1</span></span><br><span class="line"><span class="comment"> * 4. 判断某个key是否在集合时，用k个hash函数计算出k个散列值，并查询数组中对应的比特位，如果所有的比特位都是1，认为在集合中。</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterHelper</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numHashFunctions;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bitSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Funnel&lt;T&gt; funnel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BloomFilterHelper</span><span class="params">(Funnel&lt;T&gt; funnel, <span class="type">int</span> expectedInsertions, <span class="type">double</span> fpp)</span> &#123;</span><br><span class="line">        Preconditions.checkArgument(funnel != <span class="literal">null</span>, <span class="string">&quot;funnel不能为空&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.funnel = funnel;</span><br><span class="line">        <span class="comment">// 计算bit数组长度</span></span><br><span class="line">        bitSize = optimalNumOfBits(expectedInsertions, fpp);</span><br><span class="line">        <span class="comment">// 计算hash方法执行次数</span></span><br><span class="line">        numHashFunctions = optimalNumOfHashFunctions(expectedInsertions, bitSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] murmurHashOffset(T value) &#123;</span><br><span class="line">        <span class="type">int</span>[] offset = <span class="keyword">new</span> <span class="title class_">int</span>[numHashFunctions];</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">hash64</span> <span class="operator">=</span> Hashing.murmur3_128().hashObject(value, funnel).asLong();</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash1</span> <span class="operator">=</span> (<span class="type">int</span>) hash64;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash2</span> <span class="operator">=</span> (<span class="type">int</span>) (hash64 &gt;&gt;&gt; <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= numHashFunctions; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nextHash</span> <span class="operator">=</span> hash1 + i * hash2;</span><br><span class="line">            <span class="keyword">if</span> (nextHash &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                nextHash = ~nextHash;</span><br><span class="line">            &#125;</span><br><span class="line">            offset[i - <span class="number">1</span>] = nextHash % bitSize;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算bit数组长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">optimalNumOfBits</span><span class="params">(<span class="type">long</span> n, <span class="type">double</span> p)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 设定最小期望长度</span></span><br><span class="line">            p = Double.MIN_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (-n * Math.log(p) / (Math.log(<span class="number">2</span>) * Math.log(<span class="number">2</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算hash方法执行次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">optimalNumOfHashFunctions</span><span class="params">(<span class="type">long</span> n, <span class="type">long</span> m)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(<span class="number">1</span>, (<span class="type">int</span>) Math.round((<span class="type">double</span>) m / n * Math.log(<span class="number">2</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-亿级流量商品架构"><a href="#2-亿级流量商品架构" class="headerlink" title="2. 亿级流量商品架构"></a>2. 亿级流量商品架构</h3><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E6%9E%B6%E6%9E%84-%E5%AF%BC%E5%87%BA.png" alt="亿级流量架构-导出"></p><h4 id="2-1-动态化渲染"><a href="#2-1-动态化渲染" class="headerlink" title="2.1 动态化渲染"></a>2.1 动态化渲染</h4><p><code>OpenResty®</code> 是一个基于 <code>Nginx</code> 与 <code>Lua</code> 的高性能 <code>Web</code> 平台，其内部继承了大量精良的 <code>Lua</code> 库、第三方模块以及大多数的依赖项。用于方便搭建能够处理超高并发、扩展性极高的动态 <code>Web</code> 应用、<code>Web</code> 服务和动态网关。</p><p><code>Web</code> 开发人员和系统工程师可以使用 <code>Lua</code> 脚本语言调动 <code>Nginx</code> 支持的各种 <code>C</code> 以及 <code>Lua</code> 模块，快速构造出足以胜任 <code>10K</code> 乃至 <code>1000K</code> 以上单机并发连接的高性能 Web 应用系统。<code>OpenResty®</code> 的目标是让你的<code>Web</code>服务直接跑在 <code>Nginx</code> 服务内部，充分利用 <code>Nginx</code> 的非阻塞 <code>I/O</code> 模型，不仅仅对 <code>HTTP</code> 客户端请求,甚至于对远程后端诸如<code>MySQL</code>、<code>PostgreSQL</code>、<code>Memcached</code> 以及 <code>Redis</code> 等都进行一致的高性能响应。</p><p><code>OpenResty®</code>下载地址：<a href="http://openresty.org/cn/download.html">http://openresty.org/cn/download.html</a></p><h5 id="2-1-1-流量分发"><a href="#2-1-1-流量分发" class="headerlink" title="2.1.1 流量分发"></a>2.1.1 流量分发</h5><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%B5%81%E9%87%8F%E5%88%86%E5%8F%91-%E5%AF%BC%E5%87%BA.png" alt="流量分发-导出"></p><h6 id="引入OpenResty-HTTP-模块"><a href="#引入OpenResty-HTTP-模块" class="headerlink" title="引入OpenResty HTTP 模块"></a>引入<code>OpenResty HTTP</code> 模块</h6><p>流量分发的 <code>Nginx</code> 会发送 HTTP 请求到后端的应用层 <code>Nginx</code>，故需要先引用 <code>Lua http</code> 模块</p><p>下载地址：<a href="https://github.com/ledgetech/lua-resty-http/tree/master/lib/resty">https://github.com/ledgetech/lua-resty-http/tree/master/lib/resty</a></p><ul><li>http.lua</li><li>http_headers.lua</li></ul><p> <a href="software%5Clua-resty-http-master.zip">lua-resty-http-master.zip</a> </p><p>文件放置 <code>I:\openresty\openresty\lualib\resty\</code> 下。</p><p>在 <code>nginx.conf</code> 的 <code>http</code> 模块中加入支持 <code>Lua</code> 相关的包：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lua_package_path <span class="string">&#x27;../lualib/?.lua;;&#x27;</span>;</span><br><span class="line">lua_package_cpath <span class="string">&#x27;../lualib/?.so;;&#x27;</span>;</span><br><span class="line">include lua.conf;</span><br></pre></td></tr></table></figure><p><code>lua.conf </code>如下：（其实就是将<code>nginx.conf</code>中<code>http</code>模块的<code>server</code>单独提出来）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 300;</span><br><span class="line">    location /product &#123;</span><br><span class="line">        default_type &#x27;text/html;charset=UTF‐8&#x27;;</span><br><span class="line">        lua_code_cache on;</span><br><span class="line">        content_by_lua_file D:/ProgramData/nginx/dis.lua;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听 <code>300</code> 端口，如果请求路径是 <code>product</code>，那么就让它包含 <code>distribution.lua</code> 文件的内容，并开启 <code>lua</code> 缓存。</p><p><code>distribution.conf</code>如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> uri_args = ngx.req.get_uri_args()</span><br><span class="line"><span class="keyword">local</span> productId = uri_args[<span class="string">&quot;productId&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 流量分发接收服务器</span></span><br><span class="line"><span class="keyword">local</span> host = &#123;<span class="string">&quot;127.0.0.1:222&quot;</span>,<span class="string">&quot;127.0.0.1:333&quot;</span>&#125;</span><br><span class="line"><span class="keyword">local</span> hash = ngx.crc32_long(productId)</span><br><span class="line">hash = (hash % <span class="number">2</span>) + <span class="number">1</span></span><br><span class="line">backend = <span class="string">&quot;http://&quot;</span>..host[hash]</span><br><span class="line"><span class="keyword">local</span> method = uri_args[<span class="string">&quot;method&quot;</span>]</span><br><span class="line"><span class="keyword">local</span> requestBody = <span class="string">&quot;/&quot;</span>..method..<span class="string">&quot;?productId=&quot;</span>..productId</span><br><span class="line"><span class="keyword">local</span> http = <span class="built_in">require</span>(<span class="string">&quot;resty.http&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> httpc = http.new()</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> resp, err = httpc:request_uri(backend, &#123;</span><br><span class="line">method = <span class="string">&quot;GET&quot;</span>,</span><br><span class="line"><span class="built_in">path</span> = requestBody,</span><br><span class="line">keepalive=<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> resp <span class="keyword">then</span></span><br><span class="line">ngx.say(<span class="string">&quot;request error :&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ngx.say(resp.body)</span><br><span class="line"></span><br><span class="line">httpc:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p>截取传过来的 <code>productId</code>，然后从配置的 <code>host</code>服务中 <code>hash</code> 去取其中一台服务，再通过服务请求拿到相应的数据，并对数据进行输出。</p><p><code>222</code> 和 <code>333</code> 的配置</p><p><code>lua.conf</code>如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lua_shared_dict my_cache 128m;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 222;</span><br><span class="line">    set $template_location &quot;/templates&quot;;</span><br><span class="line">    set $template_root &quot;I:/openresty/&quot;;</span><br><span class="line"></span><br><span class="line">    location /product &#123;</span><br><span class="line">    default_type &#x27;text/html;charset=UTF‐8&#x27;;</span><br><span class="line">    lua_code_cache on;</span><br><span class="line">    content_by_lua_file I:/openresty/product.lua;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-2-请求后台"><a href="#2-1-2-请求后台" class="headerlink" title="2.1.2 请求后台"></a>2.1.2 请求后台</h5><h6 id="引入OpenResty-Template模块"><a href="#引入OpenResty-Template模块" class="headerlink" title="引入OpenResty Template模块"></a>引入<code>OpenResty Template</code>模块</h6><p>模板渲染使用是 <code>OpenResty Template</code>模块</p><p>下载地址：<a href="https://opm.openresty.org/package/bungle/lua-resty-template/">https://opm.openresty.org/package/bungle/lua-resty-template/</a></p><ul><li>/template/<ul><li>html.lua</li><li>microbenchmark.lua</li><li>safe.lua</li></ul></li><li>template.lua</li></ul><h6 id="加入缓存"><a href="#加入缓存" class="headerlink" title="加入缓存"></a>加入缓存</h6><p><code>product.lua</code>如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取请求路径参数数组</span></span><br><span class="line"><span class="keyword">local</span> uri_args = ngx.req.get_uri_args()</span><br><span class="line"><span class="comment">-- 获取商品 ID</span></span><br><span class="line"><span class="keyword">local</span> productId = uri_args[<span class="string">&quot;productId&quot;</span>]</span><br><span class="line"><span class="comment">-- 定义 nginx 缓存</span></span><br><span class="line"><span class="keyword">local</span> cache_ngx = ngx.shared.my_cache</span><br><span class="line"><span class="comment">-- 拼接缓存 key</span></span><br><span class="line"><span class="keyword">local</span> productCacheKey = <span class="string">&quot;product_info_&quot;</span>..productId</span><br><span class="line"><span class="comment">-- 从缓存中获取 key 对应的商品信息</span></span><br><span class="line"><span class="keyword">local</span> productCache = cache_ngx:get(productCacheKey)</span><br><span class="line"><span class="comment">-- 缓存未命中，请求商品服务</span></span><br><span class="line"><span class="keyword">if</span> productCache == <span class="string">&quot;&quot;</span> <span class="keyword">or</span> productCache == <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">local</span> http = <span class="built_in">require</span>(<span class="string">&quot;resty.http&quot;</span>)</span><br><span class="line"><span class="keyword">local</span> httpc = http.new()</span><br><span class="line"><span class="keyword">local</span> resp, err = httpc:request_uri(<span class="string">&quot;http://127.0.0.1:8866&quot;</span>,&#123;</span><br><span class="line">method = <span class="string">&quot;GET&quot;</span>,</span><br><span class="line"><span class="built_in">path</span> = <span class="string">&quot;/pms/productInfo/&quot;</span>..productId</span><br><span class="line">&#125;)</span><br><span class="line">productCache = resp.body</span><br><span class="line"><span class="keyword">local</span> expireTime = <span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">600</span>,<span class="number">1200</span>)</span><br><span class="line">cache_ngx:set(productCacheKey, productCache, expireTime)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span>(<span class="string">&quot;cjson&quot;</span>)</span><br><span class="line"><span class="comment">-- 反序列化，获得商品 Json 字符串</span></span><br><span class="line"><span class="keyword">local</span> productCacheJSON =cjson.decode(productCache)</span><br><span class="line">ngx.say(productCache);</span><br><span class="line"><span class="comment">-- 解析商品信息</span></span><br><span class="line"><span class="keyword">local</span> context = &#123;</span><br><span class="line">    id = productCacheJSON.data.id,</span><br><span class="line">    name = productCacheJSON.data.name,</span><br><span class="line">    price = productCacheJSON.data.price,</span><br><span class="line">    pic = productCacheJSON.data.pic,</span><br><span class="line">    detailHtml = productCacheJSON.data.detailHtml</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">-- 获取模板文件</span></span><br><span class="line"><span class="keyword">local</span> template = <span class="built_in">require</span>(<span class="string">&quot;resty.template&quot;</span>)</span><br><span class="line"><span class="comment">-- 将 context 映射到 template 文件中</span></span><br><span class="line">template.render(<span class="string">&quot;product.html&quot;</span>, context)</span><br></pre></td></tr></table></figure><h6 id="HTML-模板"><a href="#HTML-模板" class="headerlink" title="HTML 模板"></a><code>HTML</code> 模板</h6><p>语法如下：（<code>&#123;* id *&#125;</code>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http</span>‐<span class="attr">equiv</span>=<span class="string">&quot;Content‐Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf‐8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">商品id: &#123;* id *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">商品名称: &#123;* name *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">商品价格: &#123;* price *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">商品库存: <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;*</span> <span class="attr">pic</span> *&#125;/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">商品描述: &#123;* detailHtml *&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <a href="software%5Cproduct.html">product.html</a> </p><h6 id="关闭-nginx-命令"><a href="#关闭-nginx-命令" class="headerlink" title="关闭 nginx 命令"></a>关闭 <code>nginx</code> 命令</h6><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">taskkill</span> /im nginx.exe /f</span><br></pre></td></tr></table></figure><h5 id="2-1-3-渲染图"><a href="#2-1-3-渲染图" class="headerlink" title="2.1.3 渲染图"></a>2.1.3 渲染图</h5><p>模板动态渲染图如下：</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%A8%A1%E6%9D%BF%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93.png" alt="模板动态渲染"></p><h4 id="2-2-多级缓存"><a href="#2-2-多级缓存" class="headerlink" title="2.2 多级缓存"></a>2.2 多级缓存</h4><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98-%E5%AF%BC%E5%87%BA.png" alt="多级缓存-导出"></p><h5 id="2-2-1-一级缓存"><a href="#2-2-1-一级缓存" class="headerlink" title="2.2.1 一级缓存"></a>2.2.1 一级缓存</h5><p>实现方式：<code>Lua</code> + <code>Nginx</code></p><p>特点：数据量小、访问量相对很高</p><h5 id="2-2-2-二级缓存"><a href="#2-2-2-二级缓存" class="headerlink" title="2.2.2 二级缓存"></a>2.2.2 二级缓存</h5><p>实现方式：<code>JVM</code>本地缓存（<code>GUAVA</code>）</p><p>特点：数据量很大、访问量相对高</p><h5 id="2-2-3-三级缓存"><a href="#2-2-3-三级缓存" class="headerlink" title="2.2.3 三级缓存"></a>2.2.3 三级缓存</h5><p>实现方式：<code>Redis</code></p><p>特点：数据量相对比较大、访问量相对不高</p><h5 id="2-2-4-热度问题"><a href="#2-2-4-热度问题" class="headerlink" title="2.2.4 热度问题"></a>2.2.4 热度问题</h5><p>如何保证最热的数据在最前面 ？</p><ul><li><p>设置各级缓存的内存大小，越靠前的缓存其容量越小</p></li><li><p>设置各级缓存的过期时间，越靠前的缓存其过期时间越小</p></li><li><p>使用 <code>LRU-K</code>(链表 <code>K</code>) 最近最热的一次数据连续访问 <code>3</code> 次以上，放入一级缓存</p></li></ul><h3 id="3-微服务拆分"><a href="#3-微服务拆分" class="headerlink" title="3. 微服务拆分"></a>3. 微服务拆分</h3><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/image-20230115213350295.png" alt="image-20230115213350295"></p><p>原图地址：<a href="https://www.processon.com/view/link/5e69e768e4b07fc7a6841488">https://www.processon.com/view/link/5e69e768e4b07fc7a6841488</a></p><h4 id="3-1-微服务拆分时机"><a href="#3-1-微服务拆分时机" class="headerlink" title="3.1 微服务拆分时机"></a>3.1 微服务拆分时机</h4><p>如下场景需要进行微服务拆分：</p><ul><li>代码维护困难，几百人同时开发一个模块，提交代码频繁出现大量冲突</li><li>模块耦合严重，相互依赖，小工嗯呢该修改也必须累计到大版本才能上线</li><li>很想扩展流程复杂，主要业务和次要业务耦合。例如：下单和支付业务需要扩容，而注册业务不需要要扩容</li></ul><p>微服务不仅仅是技术的升级，更是开发方式、组织架构、开发观念的转变。</p><h4 id="3-2-微服务拆分的一些通用原则"><a href="#3-2-微服务拆分的一些通用原则" class="headerlink" title="3.2 微服务拆分的一些通用原则"></a>3.2 微服务拆分的一些通用原则</h4><p><strong>单一服务内部功能高内聚低耦合</strong>：每个服务只完成自己职责内的任务，对于不是自己职责的功能交给其它服务来完成</p><p><strong>闭包原则（CCP）：</strong>微服务的闭包原则就是当我们需要改变一个微服务的时候，所有依赖都在这个微服务的组件内，不需要修改其他微服务</p><p><strong>服务自治、接口隔离原则：</strong>尽量消除对其他服务的强依赖，这样可以降低沟通成本，提升服务稳定性。服务通过标准的</p><p>接口隔离，隐藏内部实现细节。这使得服务可以独立开发、测试、部署、运行，以服务为单位持续交付。</p><p><strong>持续演进原则：</strong>在服务拆分的初期，你其实很难确定服务究竟要拆成什么样。应逐步划分，持续演进，避免服务数量的爆炸性增长。</p><p><strong>拆分的过程尽量避免影响产品的日常功能迭代：</strong>也就是说要一边做产品功能迭代，一边完成服务化拆分。比如优先剥离比较独立的边界服务（如短信服务等），从非核心的服务出发减少拆分对现有业务的影响，也给团队一个练习、试错的机会。同时当两个服务存在依赖关系时优先拆分被依赖的服务。</p><p><strong>服务接口的定义要具备可扩展性：</strong>比如微服务的接口因为升级把之前的三个参数改成了四个，上线后导致调用方大量报错，推荐做法服务接口的参数类型最好是封装类，这样如果增加参数就不必变更接口的签名<strong>避免环形依赖与双向依赖：</strong>尽量不要有服务之间的环形依赖或双向依赖，原因是存在这种情况说明我们的功能边界没有化分清楚或者有通用的功能没有下沉下来。</p><p><strong>阶段性合并：</strong>随着你对业务领域理解的逐渐深入或者业务本身逻辑发生了比较大的变化，亦或者之前的拆分没有考虑的很清楚，导致拆分后的服务边界变得越来越混乱，这时就要重新梳理领域边界，不断纠正拆分的合理性。</p><p><strong>自动化驱动：</strong>部署和运维的成本会随着服务的增多呈指数级增长，每个服务都需要部署、监控、日志分析等运维工作，成本会显著提升。因此，在服务划分之前，应该首先构建自动化的工具及环境。开发人员应该以自动化为驱动力，简化服务在创建、开发、测试、部署、运维上的重复性工作，通过工具实现更可靠的操作，避免微服务数量增多带来的开发、管理复杂度问题。</p><p><strong>拆分粒度控制</strong></p><p>思考： 拆分的粒度是不是越细越好？</p><p>目前很多传统的单体应用再向微服务架构进行升级改造，如果拆分粒度太细会增加运维复杂度，粒度过大又起不到效果，那么改造过程中如何平衡拆分粒度呢？平衡拆分粒度可以从两方面进行权衡，一是业务发展的复度，二是团队规模的人数人员和服务数量的不匹配，会导致维护成本增加，也会导致服务合并。</p><p>前期设计和开发阶段： 3个人负责一个微服务后期维护阶段：每个微服务可以安排2个人维护，每个人可以维护多个微服务</p><p><strong>功能维度拆分策略</strong></p><p>大的原则是基于业务复杂度拆分服务： 业务复杂度足够高，应该基于领域驱动拆分服务。业务复杂度较低，选择基于数据驱动拆分服务</p><p>基于数据驱动拆分服务： 自下而上的架构设计方法，通过分析需求，确定整体数据结构，根据表之间的关系拆分服务。</p><p>拆分步骤： 需求分析，抽象数据结构，划分服务，确定调用关系和业务流程验证。</p><p>基于领域驱动拆分服务： 自上而下的架构设计方法，通过和领域专家建立统一的语言，不断交流，确定关键业务场景，逐步确定边界上下文。领域驱动更强调业务实现效果，认为自下而上的设计可能会导致技术人员不能更好地理解业务方向，进而偏离业务目标。</p><p>拆分步骤：通过模型和领域专家建立统一语言，业务分析，寻找聚合，确定服务调用关系，业务流程验证和持续优化。</p><p>以电商的场景为例，交易链路划分的限界上下文如下图左半部分，根据一个限界上下文可以设计一个微服务，拆解出来的微服务如下图右侧部分。还有一种常见拆分场景，从已有单体架构中逐步拆分服务。</p><p>拆分步骤： 前后端分离，提取公共基础服务（如单点登录），不断从老系统抽取服务，垂直划分优先，适当水平切分以上几种拆分方式不是多选一，而是可以根据实际情况自由排列组合。<strong>同时拆分不仅仅是架构上的调整，也意味着要在组织结构上做出相应的适应性优化，以确保拆分后的服务由相对独立的团队负责维护。</strong></p><p><strong>非功能维度拆分策略</strong></p><p>主要考虑六点包括扩展性、复用性、高性能、高可用、安全性、异构性</p><p><strong>扩展性</strong></p><p>区分系统中变与不变的部分，不变的部分一般是成熟的、通用的服务功能，变的部分一般是改动比较多、满足业务迭代扩展性需要的功能，我们可以将不变的部分拆分出来，作为共用的服务，将变的部分独立出来满足个性化扩展需要同时根据二八原则，系统中经常变动的部分大约只占 20%，而剩下的 80% 基本不变或极少变化，这样的拆分也解决了发布频率过多而影响成熟服务稳定性的问题。</p><p><strong>复用性</strong></p><p>不同的业务里或服务里经常会出现重复的功能，比如每个服务都有鉴权、限流、安全及日志监控等功能，可以将这些通过的功能拆分出来形成独立的服务，也就是微服务里面的 API 网关。</p><p><strong>高性能</strong></p><p>将性能要求高或者性能压力大的模块拆分出来，避免性能压力大的服务影响其它服务。常见的拆分方式和具体的性能瓶颈有关，例如电商的抢购，性能压力最大的是入口的排队功能，可以将排队功能独立为一个服务。我们也可以基于读写分离来拆分，比如电商的商品信息，在 App 端主要是商详有大量的读取操作，但是写入端商家中心访问量确很少。因此可以对流量较大或较为核心的服务做读写分离，拆分为两个服务发布，一个负责读，另外一个负责写。</p><p>数据一致性是另一个基于性能维度拆分需要考虑的点，对于强一致的数据，属于强耦合，尽量放在同一个服务中（但是有时会因为各种原因需要进行拆分，那就需要有响应的机制进行保证），弱一致性通常可以拆分为不同的服务。</p><p><strong>高可用</strong></p><p>将可靠性要求高的核心服务和可靠性要求低的非核心服务拆分开来，然后重点保证核心服务的高可用。具体拆分的时候，核心服务可以是一个也可以是多个，只要最终的服务数量满足“三个火枪手”的原则就可以。</p><p><strong>安全性</strong></p><p>不同的服务可能对信息安全有不同的要求，因此把需要高度安全的服务拆分出来，进行区别部署，比如设置特定的 DMZ区域对服务进行分区部署，可以更有针对性地满足信息安全的要求，也可以降低对防火墙等安全设备吞吐量、并发性等方面的要求，降低成本，提高效率。</p><p><strong>异构性</strong></p><p>对于对开发语言种类有要求的业务场景，可以用不同的语言将其功能独立出来实现一个独立服务。<strong>拆分注意的风险</strong></p><p><strong>不打无准备之仗：</strong>开发团队是否具备足够的经验，能否驾驭微服务的技术栈，可能是第一个需要考虑的点。</p><p><strong>不断纠正：</strong>我们需要承认我们的认知是有限的，只能基于目前的业务状态和有限的对未来的预测来制定出一个相对合适</p><p>的拆分方案，而不是所谓的最优方案，任何方案都只能保证在当下提供了相对合适的粒度和划分原则，要时刻做好在未来的末一个时刻会变得不和时宜、需要再次调整的准备。</p><p><strong>要做行动派，而不是理论派：</strong>在具体怎么拆分上，也不要太纠结于是否合适，如果拆了之后发现真的不合适，在重新调整就好了。如果要灵活调整，可以针对服务化架构搭建起一套完成的能力体系，比如服务治理平台、数据迁移工具、数据双写等等</p><p><strong>服务只拆不合：</strong></p><p>拆相当于我们开发代码，合相当于重构代码。随着我们对应用程序领域的了解越来越深，它们需要随着时间的推移而变化。</p><p>人员和服务数量的不匹配，导致的维护成本增加，也是导致服务合并的一个重要原因。</p><p>如果微服务数量过多和资源不匹配，则可以考虑合并多个微服务到服务包，部署到一台服务器，这样可以节省服务运行时的基础资源消耗也降低了维护成本。需要注意的是，虽然服务包是运行在一个进程中，但是服务包内的服务依然要满足微服务定义，以便在未来某一天要重新拆开的时候可以很快就分离</p><h4 id="3-3-Spring-Cloud-技术栈选型"><a href="#3-3-Spring-Cloud-技术栈选型" class="headerlink" title="3.3 Spring Cloud 技术栈选型"></a>3.3 Spring Cloud 技术栈选型</h4><p><code>Spring Cloud Alibaba</code>官网：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki">https://github.com/alibaba/spring-cloud-alibaba/wiki</a></p><p>SpringCloud 的几大痛点：</p><ul><li><p>SpringCloud 部分组件停止维护和更新，给开发带来不便;</p></li><li><p>SpringCloud 部分环境搭建复杂，没有完善的可视化界面，我们需要大量的二次开发和定制</p></li><li><p>SpringCloud 配置复杂，难以上手，部分配置差别难以区分和合理应用</p></li></ul><p>SpringCloud Alibaba 的优势:</p><ul><li><p>阿里使用过的组件经历了考验，性能强悍，设计合理，现在开源出来大家用成套的产品搭配完善的可视化界面给开发运维带来极大的便利</p></li><li><p>搭建简单，学习曲线低。</p></li></ul><p>所以我们优先选择 Spring Cloud Alibaba 提供的微服务组件</p><p>Spring Cloud Alibaba 官方推荐版本选择：</p><table><thead><tr><th>Spring Cloud Alibaba Version</th><th>Spring Cloud Version</th><th>Spring Boot Version</th></tr></thead><tbody><tr><td>2022.0.0.0-RC*</td><td>Spring Cloud 2022.0.0</td><td>3.0.0</td></tr></tbody></table><table><thead><tr><th>Spring Cloud Alibaba Version</th><th>Spring Cloud Version</th><th>Spring Boot Version</th></tr></thead><tbody><tr><td>2021.0.4.0*</td><td>Spring Cloud 2021.0.4</td><td>2.6.11</td></tr><tr><td>2021.0.1.0</td><td>Spring Cloud 2021.0.1</td><td>2.6.3</td></tr><tr><td>2021.1</td><td>Spring Cloud 2020.0.1</td><td>2.4.2</td></tr></tbody></table><p>pom 引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> &lt;!‐‐ lookup parent from repository ‐‐&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tuling<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tuling‐mall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1‐SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>tuling‐mall<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">&lt;spring‐cloud.version&gt;Greenwich.SR3&lt;/spring‐cloud.version&gt;</span><br><span class="line">&lt;spring‐cloud‐alibaba.version&gt;2.1.2.RELEASE&lt;/spring‐cloud‐alibaba.version&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">&lt;!‐‐Spring Cloud 相关依赖‐‐&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐cloud‐dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring‐cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&lt;!‐‐Spring Cloud Alibaba 相关依赖‐‐&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐cloud‐alibaba‐dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring‐cloud‐alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-4-Nacos-服务高可用搭建（待完善）"><a href="#3-4-Nacos-服务高可用搭建（待完善）" class="headerlink" title="3.4 Nacos 服务高可用搭建（待完善）"></a>3.4 Nacos 服务高可用搭建<strong>（待完善）</strong></h4><h5 id="3-4-1-Nacos-UI"><a href="#3-4-1-Nacos-UI" class="headerlink" title="3.4.1 Nacos UI"></a>3.4.1 Nacos UI</h5><p>访问地址：<a href="http://192.168.10.148:8848/nacos/">http://192.168.10.148:8848/nacos/</a></p><p>用户名：nacos    密码：nacos</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/nacos-ui.png" alt="nacos-ui"></p><h4 id="3-5-服务发现"><a href="#3-5-服务发现" class="headerlink" title="3.5 服务发现"></a>3.5 服务发现</h4><p>将微服务注册到 <code>Nacos</code> 服务器</p><h5 id="3-5-1-引入依赖"><a href="#3-5-1-引入依赖" class="headerlink" title="3.5.1 引入依赖"></a>3.5.1 引入依赖</h5><p>需要注册的服务引入依赖，服务启动时自动注册到 <code>Nacos</code> 服务中心</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册中心 服务注册与发现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：**@EnableDiscoveryClient** <code>Spring Cloud</code> 已经实现了该注解的功能，无需在主程序上添加该注解。</p><h5 id="3-5-2-在-yml-中配置注册中心地址"><a href="#3-5-2-在-yml-中配置注册中心地址" class="headerlink" title="3.5.2 在 yml 中配置注册中心地址"></a>3.5.2 在 yml 中配置注册中心地址</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tulingmall-member</span><span class="comment"># 微服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">tl.nacos.com:8848</span><span class="comment"># Nacos 服务器地址</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">80a98d11‐492c‐4008‐85aa‐32d889e9b0d0</span> <span class="comment"># 环境隔离</span></span><br></pre></td></tr></table></figure><h5 id="3-5-3-环境隔离"><a href="#3-5-3-环境隔离" class="headerlink" title="3.5.3 环境隔离"></a>3.5.3 环境隔离</h5><p>服务使用命名空间进行分组。</p><p><code>namespace</code> 为 <code>Nacos UI</code> 页面创建的<strong>命名空间</strong>的 <code>ID</code> ：</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%88%86%E7%BB%84-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4.png" alt="分组-命名空间"></p><p>启动该服务，在 <code>Nacos UI</code> 上查看，该服务已存在对应的分组下：</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%9C%8D%E5%8A%A1%E5%88%86%E7%BB%84.png" alt="服务分组"></p><h4 id="3-6-RPC-调用"><a href="#3-6-RPC-调用" class="headerlink" title="3.6 RPC 调用"></a>3.6 RPC 调用</h4><h5 id="3-6-1-引入依赖"><a href="#3-6-1-引入依赖" class="headerlink" title="3.6.1 引入依赖"></a>3.6.1 引入依赖</h5><p><code>RPC</code> 使用的是 <code>Feign</code>，引入 <code>Feign</code> 的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务远程调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-6-2-添加-EnableFeignClients注解"><a href="#3-6-2-添加-EnableFeignClients注解" class="headerlink" title="3.6.2 添加@EnableFeignClients注解"></a>3.6.2 添加<code>@EnableFeignClients</code>注解</h5><p>在消费端启动类上添加 <code>@EnableFeignClients</code>注解，开启 <code>OpenFeign</code> 远程调用功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TulingmallMemberApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(TulingmallMemberApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-6-3-编写调用接口（疑问）"><a href="#3-6-3-编写调用接口（疑问）" class="headerlink" title="3.6.3 编写调用接口（疑问）"></a>3.6.3 编写调用接口<strong>（疑问）</strong></h5><p>在消费端编写调用接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用远程服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * name 为远程要调用的 服务名</span></span><br><span class="line"><span class="comment"> * path 为远程要调用的服务前缀</span></span><br><span class="line"><span class="comment"> * url  为开发时用来写死访问地址（ip:port），用于测试（不会走负载均衡，直接调用对应节点）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;tulingmall‐coupons&quot;,path = &quot;/coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CouponsFeignService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/list&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">CommonResult&lt;List&lt;SmsCouponHistory&gt;&gt; <span class="title function_">list</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(value = &quot;useStatus&quot;, required = false)</span> Integer useStatus,</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestHeader(&quot;memberId&quot;)</span> Long memberId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>疑问：<code>@FengiClient</code>注解中 path 的作用 ？</strong></p><h5 id="3-6-4-发起远程调用"><a href="#3-6-4-发起远程调用" class="headerlink" title="3.6.4 发起远程调用"></a>3.6.4 发起远程调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入远程服务</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CouponsFeignService couponsFeignService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/coupons&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">getCoupons</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam(value = &quot;useStatus&quot;, required = false)</span> Integer useStatus,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestHeader(&quot;memberId&quot;)</span> Long memberId)</span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 通过openfeign从远程微服务tulingmall‐coupons获取优惠券信息</span></span><br><span class="line"><span class="keyword">return</span> couponsFeignService.list(useStatus, memberId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-6-5-OpenFeign-日志配置（待完善）"><a href="#3-6-5-OpenFeign-日志配置（待完善）" class="headerlink" title="3.6.5 OpenFeign 日志配置（待完善）"></a>3.6.5 OpenFeign 日志配置<strong>（待完善）</strong></h5><p>开启 OpenFeign 日志配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果日志不显示，可以在 yml 中通过 logging.level 设置日志级别</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">level:</span></span><br><span class="line"><span class="attr">com.tuling:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>微服务拆分，可将 <code>Feign</code> 独立拆分出去。</p><h4 id="3-7-配置中心"><a href="#3-7-配置中心" class="headerlink" title="3.7 配置中心"></a>3.7 配置中心</h4><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83-%E5%AF%BC%E5%87%BA.png" alt="配置中心-导出"></p><h5 id="3-7-1-bootstrap-yml-和-application-yml"><a href="#3-7-1-bootstrap-yml-和-application-yml" class="headerlink" title="3.7.1 bootstrap.yml 和 application.yml"></a>3.7.1 bootstrap.yml 和 application.yml</h5><p><code>bootstrap.yml</code> 文件也是 <code>Springboot</code> 的默认配置文件，而且其加载的时间比<code>application.yml </code>更早。</p><p><code>application.yml</code> 和 <code>bootstrap.yml</code> 虽然都是 <code>Springboot</code> 的默认配置文件，但定位却不相同。</p><ul><li><code>bootstrap.yml</code>    可以理解成系统级别的一些参数配置，这些 参数一般是不会变动的。</li><li><code>application.yml</code>    可以用来定义应用级别的参数，如果搭配 <code>spring cloud config</code> 使用，<code>application.yml</code> 里边定义的问价你可以实现动态替换。</li></ul><p><strong>总结</strong>：</p><p>​        <code>bootstrap.yml</code> 文件相当于项目启动时的引导文件，内容相对固定。<code>application.yml</code> 文件是微服务的一些常规配置参数，变化比较频繁。<code>bootstrap.yml</code> 先于 <code>application.yml</code>。</p><p>编写 <code>bootstrap.yml</code> 配置文件，该文件中的配置无需随着环境而变更：</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">tulingmall‐member</span> <span class="comment">#微服务的名称</span></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">                <span class="attr">serverAddr:</span> <span class="number">192.168</span><span class="number">.65</span><span class="number">.232</span><span class="string">:8848</span> <span class="comment">#配置中心的地址</span></span><br><span class="line">                <span class="attr">namespace:</span> <span class="string">741b4a7b‐c610‐4f88‐8b83‐e9ec87e68319</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># dataid 为 yml 的文件扩展名配置方式</span></span><br><span class="line">                <span class="comment"># `$&#123;spring.application.name&#125;.$&#123;file‐extension:properties&#125;`</span></span><br><span class="line">                <span class="string">file‐extension:</span> <span class="string">yml</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 通用配置(拉取通用配置的ID)</span></span><br><span class="line">                <span class="string">shared‐dataids:</span> <span class="string">nacos.yml,mybatis.yml,actuator.yml,redis.yml</span></span><br><span class="line">                <span class="comment"># 刷新配置(动态改配置可以刷新)</span></span><br><span class="line">                <span class="string">refreshable‐dataids:</span> <span class="string">nacos.yml,mybatis.yml,actuator.yml,redis.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># profile 粒度的配置</span></span><br><span class="line"><span class="comment">#`$&#123;spring.application.name&#125;‐$&#123;profile&#125;.$&#123;file‐extension:properties&#125;`</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line"><span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h5 id="3-7-2-抽取公用配置"><a href="#3-7-2-抽取公用配置" class="headerlink" title="3.7.2 抽取公用配置"></a>3.7.2 抽取公用配置</h5><p>在 <code>Nacos UI</code> 界面，新增 <code>nacos.yml</code> 公共配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">tl.nacos.com:8848</span></span><br></pre></td></tr></table></figure><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E6%8A%BD%E5%8F%96%E5%85%AC%E5%85%B1%E9%85%8D%E7%BD%AEnacos.png" alt="抽取公共配置nacos"></p><h5 id="3-7-3-定义-dev-应用配置"><a href="#3-7-3-定义-dev-应用配置" class="headerlink" title="3.7.3 定义 dev 应用配置"></a>3.7.3 定义 dev 应用配置</h5><p>在 <code>nacos UI</code> 界面，<code>dev</code> 命名空间下，定义<code>&#123;</code>服务名 + dev<code> &#125;.yml</code> 的配置文件</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE-dev.png" alt="应用配置-dev"></p><h4 id="3-8-服务网关-Gateway"><a href="#3-8-服务网关-Gateway" class="headerlink" title="3.8 服务网关 Gateway"></a>3.8 服务网关 Gateway</h4><p>定义一个新的 module，为 服务网关 gateway 模块</p><h5 id="3-8-1-引入父-pom"><a href="#3-8-1-引入父-pom" class="headerlink" title="3.8.1 引入父 pom"></a>3.8.1 引入父 pom</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.tuling<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tuling-mall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-8-2-引入网关依赖"><a href="#3-8-2-引入网关依赖" class="headerlink" title="3.8.2 引入网关依赖"></a>3.8.2 引入网关依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-8-3-服务注册"><a href="#3-8-3-服务注册" class="headerlink" title="3.8.3 服务注册"></a>3.8.3 服务注册</h5><p>服务经过网关之后，需要找到下一个微服务，所以网关需要在 Nacos 上注册，以发现其它微服务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Nacos 服务注册与发现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Nacos 配置中心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：会和 spring-webmvc 的依赖冲突，需要排除 spring-webmvc</p><p>编写应用配置文件 application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tulingmall-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">tl.nacos.com:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">4a08c9666f5301bb648463f6d11a12f6</span> <span class="comment"># 环境隔离</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="comment"># 默认为 false，true 表示开启通过微服务创建路由的功能，即可以通过微服务名访问服务</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 是否开启网关</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          </span><br><span class="line">  <span class="comment"># 下一个服务路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 一个 ID 对应一个微服务，路由 ID，全局唯一</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">tulingmall-authcenter</span></span><br><span class="line">        <span class="comment"># 底层有全归过滤器，用来做负载均衡，从微服务里拉取对应微服务，再取出一个节点往下一个传递</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://tulingmall-authcenter</span></span><br><span class="line">          <span class="comment"># 断言，有个断言工厂，用来匹配路径</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="comment"># 当前访问路径里有 oauth 时，会来找这个微服务</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/oauth/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">tulingmall-member</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://tulingmall-member</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/sso/**,/member/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">tulingmall-coupons</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://tulingmall-coupons</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/coupon/**</span></span><br><span class="line">            </span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.springframework.cloud.gateway:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h4 id="3-9-接入-Skywalking"><a href="#3-9-接入-Skywalking" class="headerlink" title="3.9 接入 Skywalking"></a>3.9 接入 Skywalking</h4><h5 id="3-9-1-搭建-Skywalking-OAP-服务"><a href="#3-9-1-搭建-Skywalking-OAP-服务" class="headerlink" title="3.9.1 搭建 Skywalking OAP 服务"></a>3.9.1 搭建 <code>Skywalking OAP</code> 服务</h5><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/Skywalking-oap.png" alt="Skywalking-oap"></p><h5 id="3-9-2-微服务配置-Skywalking-Agent"><a href="#3-9-2-微服务配置-Skywalking-Agent" class="headerlink" title="3.9.2 微服务配置 Skywalking Agent"></a>3.9.2 微服务配置 Skywalking Agent</h5><p>使用 JVM 参数的方式启动微服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:G:\tuling\skywalking-agent\skywalking-agent.jar</span><br><span class="line">-Dskywalking.agent.service_name=tulingmall-member</span><br><span class="line">-Dskywalking.collector.backend_service=192.168.10.153:11800</span><br></pre></td></tr></table></figure><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/jvm%E5%8F%82%E6%95%B0%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AEskywalking-agent.png" alt="jvm参数方式配置skywalking-agent"></p><p>启动微服务，在 Skywalking UI 上可以查看对应服务</p><p><img src="https://butterfly-1316798368.cos.ap-nanjing.myqcloud.com/images/Skywalking%20%E6%9C%8D%E5%8A%A1%E6%9F%A5%E7%9C%8B.png" alt="Skywalking 服务查看"></p>]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
